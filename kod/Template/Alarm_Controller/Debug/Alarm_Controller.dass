
./Debug/Alarm_Controller.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

// **** Boilerplate startup code ****
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup( void ) {
    __asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f002 fc5c 	bl	200028c0 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
      " LDR R0,=0x2001C000\n"		/* set stack */
      " MOV SP,R0\n" 
      " BL main\n" 	    /* call main */
      " B ."
      );
    while(1); // should not be needed
2000000a:	e7fe      	b.n	2000000a <startup+0xa>
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
20000014:	4b14      	ldr	r3, [pc, #80]	; (20000068 <RCC_DeInit+0x58>)
20000016:	681a      	ldr	r2, [r3, #0]
20000018:	4b13      	ldr	r3, [pc, #76]	; (20000068 <RCC_DeInit+0x58>)
2000001a:	2101      	movs	r1, #1
2000001c:	430a      	orrs	r2, r1
2000001e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
20000020:	4b11      	ldr	r3, [pc, #68]	; (20000068 <RCC_DeInit+0x58>)
20000022:	2200      	movs	r2, #0
20000024:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
20000026:	4b10      	ldr	r3, [pc, #64]	; (20000068 <RCC_DeInit+0x58>)
20000028:	681a      	ldr	r2, [r3, #0]
2000002a:	4b0f      	ldr	r3, [pc, #60]	; (20000068 <RCC_DeInit+0x58>)
2000002c:	490f      	ldr	r1, [pc, #60]	; (2000006c <RCC_DeInit+0x5c>)
2000002e:	400a      	ands	r2, r1
20000030:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
20000032:	4b0d      	ldr	r3, [pc, #52]	; (20000068 <RCC_DeInit+0x58>)
20000034:	4a0e      	ldr	r2, [pc, #56]	; (20000070 <RCC_DeInit+0x60>)
20000036:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
20000038:	4a0b      	ldr	r2, [pc, #44]	; (20000068 <RCC_DeInit+0x58>)
2000003a:	2384      	movs	r3, #132	; 0x84
2000003c:	490d      	ldr	r1, [pc, #52]	; (20000074 <RCC_DeInit+0x64>)
2000003e:	50d1      	str	r1, [r2, r3]

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
20000040:	4a09      	ldr	r2, [pc, #36]	; (20000068 <RCC_DeInit+0x58>)
20000042:	2388      	movs	r3, #136	; 0x88
20000044:	490c      	ldr	r1, [pc, #48]	; (20000078 <RCC_DeInit+0x68>)
20000046:	50d1      	str	r1, [r2, r3]
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
20000048:	4b07      	ldr	r3, [pc, #28]	; (20000068 <RCC_DeInit+0x58>)
2000004a:	681a      	ldr	r2, [r3, #0]
2000004c:	4b06      	ldr	r3, [pc, #24]	; (20000068 <RCC_DeInit+0x58>)
2000004e:	490b      	ldr	r1, [pc, #44]	; (2000007c <RCC_DeInit+0x6c>)
20000050:	400a      	ands	r2, r1
20000052:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
20000054:	4b04      	ldr	r3, [pc, #16]	; (20000068 <RCC_DeInit+0x58>)
20000056:	2200      	movs	r2, #0
20000058:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
2000005a:	4a03      	ldr	r2, [pc, #12]	; (20000068 <RCC_DeInit+0x58>)
2000005c:	238c      	movs	r3, #140	; 0x8c
2000005e:	2100      	movs	r1, #0
20000060:	50d1      	str	r1, [r2, r3]

}
20000062:	46c0      	nop			; (mov r8, r8)
20000064:	46bd      	mov	sp, r7
20000066:	bd80      	pop	{r7, pc}
20000068:	40023800 	andmi	r3, r2, r0, lsl #16
2000006c:	eaf6ffff 	b	1fdc0070 <startup-0x23ff90>
20000070:	24003010 	strcs	r3, [r0], #-16
20000074:	20003000 	andcs	r3, r0, r0
20000078:	24003000 	strcs	r3, [r0], #-0
2000007c:	fffbffff 			; <UNDEFINED> instruction: 0xfffbffff

20000080 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
20000080:	b580      	push	{r7, lr}
20000082:	b082      	sub	sp, #8
20000084:	af00      	add	r7, sp, #0
20000086:	0002      	movs	r2, r0
20000088:	1dfb      	adds	r3, r7, #7
2000008a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
2000008c:	4b05      	ldr	r3, [pc, #20]	; (200000a4 <RCC_HSEConfig+0x24>)
2000008e:	2200      	movs	r2, #0
20000090:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
20000092:	4a04      	ldr	r2, [pc, #16]	; (200000a4 <RCC_HSEConfig+0x24>)
20000094:	1dfb      	adds	r3, r7, #7
20000096:	781b      	ldrb	r3, [r3, #0]
20000098:	7013      	strb	r3, [r2, #0]
}
2000009a:	46c0      	nop			; (mov r8, r8)
2000009c:	46bd      	mov	sp, r7
2000009e:	b002      	add	sp, #8
200000a0:	bd80      	pop	{r7, pc}
200000a2:	46c0      	nop			; (mov r8, r8)
200000a4:	40023802 	andmi	r3, r2, r2, lsl #16

200000a8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
200000a8:	b590      	push	{r4, r7, lr}
200000aa:	b083      	sub	sp, #12
200000ac:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
200000ae:	2300      	movs	r3, #0
200000b0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
200000b2:	1dfb      	adds	r3, r7, #7
200000b4:	2200      	movs	r2, #0
200000b6:	701a      	strb	r2, [r3, #0]
  FlagStatus hsestatus = RESET;
200000b8:	1dbb      	adds	r3, r7, #6
200000ba:	2200      	movs	r2, #0
200000bc:	701a      	strb	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
200000be:	1dbc      	adds	r4, r7, #6
200000c0:	2031      	movs	r0, #49	; 0x31
200000c2:	f000 fd7d 	bl	20000bc0 <RCC_GetFlagStatus>
200000c6:	0003      	movs	r3, r0
200000c8:	7023      	strb	r3, [r4, #0]
    startupcounter++;
200000ca:	683b      	ldr	r3, [r7, #0]
200000cc:	3301      	adds	r3, #1
200000ce:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
200000d0:	683a      	ldr	r2, [r7, #0]
200000d2:	23a0      	movs	r3, #160	; 0xa0
200000d4:	01db      	lsls	r3, r3, #7
200000d6:	429a      	cmp	r2, r3
200000d8:	d003      	beq.n	200000e2 <RCC_WaitForHSEStartUp+0x3a>
200000da:	1dbb      	adds	r3, r7, #6
200000dc:	781b      	ldrb	r3, [r3, #0]
200000de:	2b00      	cmp	r3, #0
200000e0:	d0ed      	beq.n	200000be <RCC_WaitForHSEStartUp+0x16>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
200000e2:	2031      	movs	r0, #49	; 0x31
200000e4:	f000 fd6c 	bl	20000bc0 <RCC_GetFlagStatus>
200000e8:	1e03      	subs	r3, r0, #0
200000ea:	d003      	beq.n	200000f4 <RCC_WaitForHSEStartUp+0x4c>
  {
    status = SUCCESS;
200000ec:	1dfb      	adds	r3, r7, #7
200000ee:	2201      	movs	r2, #1
200000f0:	701a      	strb	r2, [r3, #0]
200000f2:	e002      	b.n	200000fa <RCC_WaitForHSEStartUp+0x52>
  }
  else
  {
    status = ERROR;
200000f4:	1dfb      	adds	r3, r7, #7
200000f6:	2200      	movs	r2, #0
200000f8:	701a      	strb	r2, [r3, #0]
  }
  return (status);
200000fa:	1dfb      	adds	r3, r7, #7
200000fc:	781b      	ldrb	r3, [r3, #0]
}
200000fe:	0018      	movs	r0, r3
20000100:	46bd      	mov	sp, r7
20000102:	b003      	add	sp, #12
20000104:	bd90      	pop	{r4, r7, pc}

20000106 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
20000106:	b580      	push	{r7, lr}
20000108:	b084      	sub	sp, #16
2000010a:	af00      	add	r7, sp, #0
2000010c:	0002      	movs	r2, r0
2000010e:	1dfb      	adds	r3, r7, #7
20000110:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0;
20000112:	2300      	movs	r3, #0
20000114:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
20000116:	4b0a      	ldr	r3, [pc, #40]	; (20000140 <RCC_AdjustHSICalibrationValue+0x3a>)
20000118:	681b      	ldr	r3, [r3, #0]
2000011a:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
2000011c:	68fb      	ldr	r3, [r7, #12]
2000011e:	22f8      	movs	r2, #248	; 0xf8
20000120:	4393      	bics	r3, r2
20000122:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
20000124:	1dfb      	adds	r3, r7, #7
20000126:	781b      	ldrb	r3, [r3, #0]
20000128:	00db      	lsls	r3, r3, #3
2000012a:	68fa      	ldr	r2, [r7, #12]
2000012c:	4313      	orrs	r3, r2
2000012e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
20000130:	4b03      	ldr	r3, [pc, #12]	; (20000140 <RCC_AdjustHSICalibrationValue+0x3a>)
20000132:	68fa      	ldr	r2, [r7, #12]
20000134:	601a      	str	r2, [r3, #0]
}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	46bd      	mov	sp, r7
2000013a:	b004      	add	sp, #16
2000013c:	bd80      	pop	{r7, pc}
2000013e:	46c0      	nop			; (mov r8, r8)
20000140:	40023800 	andmi	r3, r2, r0, lsl #16

20000144 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
20000144:	b580      	push	{r7, lr}
20000146:	b082      	sub	sp, #8
20000148:	af00      	add	r7, sp, #0
2000014a:	0002      	movs	r2, r0
2000014c:	1dfb      	adds	r3, r7, #7
2000014e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
20000150:	4b03      	ldr	r3, [pc, #12]	; (20000160 <RCC_HSICmd+0x1c>)
20000152:	1dfa      	adds	r2, r7, #7
20000154:	7812      	ldrb	r2, [r2, #0]
20000156:	601a      	str	r2, [r3, #0]
}
20000158:	46c0      	nop			; (mov r8, r8)
2000015a:	46bd      	mov	sp, r7
2000015c:	b002      	add	sp, #8
2000015e:	bd80      	pop	{r7, pc}
20000160:	42470000 	submi	r0, r7, #0

20000164 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
20000164:	b580      	push	{r7, lr}
20000166:	b082      	sub	sp, #8
20000168:	af00      	add	r7, sp, #0
2000016a:	0002      	movs	r2, r0
2000016c:	1dfb      	adds	r3, r7, #7
2000016e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000170:	4b0c      	ldr	r3, [pc, #48]	; (200001a4 <RCC_LSEConfig+0x40>)
20000172:	2200      	movs	r2, #0
20000174:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
20000176:	4b0b      	ldr	r3, [pc, #44]	; (200001a4 <RCC_LSEConfig+0x40>)
20000178:	2200      	movs	r2, #0
2000017a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	781b      	ldrb	r3, [r3, #0]
20000180:	2b01      	cmp	r3, #1
20000182:	d002      	beq.n	2000018a <RCC_LSEConfig+0x26>
20000184:	2b04      	cmp	r3, #4
20000186:	d004      	beq.n	20000192 <RCC_LSEConfig+0x2e>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
20000188:	e007      	b.n	2000019a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
2000018a:	4b06      	ldr	r3, [pc, #24]	; (200001a4 <RCC_LSEConfig+0x40>)
2000018c:	2201      	movs	r2, #1
2000018e:	701a      	strb	r2, [r3, #0]
      break;
20000190:	e003      	b.n	2000019a <RCC_LSEConfig+0x36>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
20000192:	4b04      	ldr	r3, [pc, #16]	; (200001a4 <RCC_LSEConfig+0x40>)
20000194:	2205      	movs	r2, #5
20000196:	701a      	strb	r2, [r3, #0]
      break;
20000198:	46c0      	nop			; (mov r8, r8)
  }
}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	46bd      	mov	sp, r7
2000019e:	b002      	add	sp, #8
200001a0:	bd80      	pop	{r7, pc}
200001a2:	46c0      	nop			; (mov r8, r8)
200001a4:	40023870 	andmi	r3, r2, r0, ror r8

200001a8 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
200001a8:	b580      	push	{r7, lr}
200001aa:	b082      	sub	sp, #8
200001ac:	af00      	add	r7, sp, #0
200001ae:	0002      	movs	r2, r0
200001b0:	1dfb      	adds	r3, r7, #7
200001b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
200001b4:	4b03      	ldr	r3, [pc, #12]	; (200001c4 <RCC_LSICmd+0x1c>)
200001b6:	1dfa      	adds	r2, r7, #7
200001b8:	7812      	ldrb	r2, [r2, #0]
200001ba:	601a      	str	r2, [r3, #0]
}
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	46bd      	mov	sp, r7
200001c0:	b002      	add	sp, #8
200001c2:	bd80      	pop	{r7, pc}
200001c4:	42470e80 	submi	r0, r7, #128, 28	; 0x800

200001c8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
200001c8:	b580      	push	{r7, lr}
200001ca:	b084      	sub	sp, #16
200001cc:	af00      	add	r7, sp, #0
200001ce:	60f8      	str	r0, [r7, #12]
200001d0:	60b9      	str	r1, [r7, #8]
200001d2:	607a      	str	r2, [r7, #4]
200001d4:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200001d6:	687b      	ldr	r3, [r7, #4]
200001d8:	019a      	lsls	r2, r3, #6
200001da:	68bb      	ldr	r3, [r7, #8]
200001dc:	431a      	orrs	r2, r3
200001de:	683b      	ldr	r3, [r7, #0]
200001e0:	085b      	lsrs	r3, r3, #1
200001e2:	3b01      	subs	r3, #1
200001e4:	041b      	lsls	r3, r3, #16
200001e6:	431a      	orrs	r2, r3
200001e8:	68fb      	ldr	r3, [r7, #12]
200001ea:	431a      	orrs	r2, r3
200001ec:	0011      	movs	r1, r2
                 (PLLQ << 24);
200001ee:	69bb      	ldr	r3, [r7, #24]
200001f0:	061a      	lsls	r2, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
200001f2:	4b03      	ldr	r3, [pc, #12]	; (20000200 <RCC_PLLConfig+0x38>)
200001f4:	430a      	orrs	r2, r1
200001f6:	605a      	str	r2, [r3, #4]
}
200001f8:	46c0      	nop			; (mov r8, r8)
200001fa:	46bd      	mov	sp, r7
200001fc:	b004      	add	sp, #16
200001fe:	bd80      	pop	{r7, pc}
20000200:	40023800 	andmi	r3, r2, r0, lsl #16

20000204 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
20000204:	b580      	push	{r7, lr}
20000206:	b082      	sub	sp, #8
20000208:	af00      	add	r7, sp, #0
2000020a:	0002      	movs	r2, r0
2000020c:	1dfb      	adds	r3, r7, #7
2000020e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
20000210:	4b03      	ldr	r3, [pc, #12]	; (20000220 <RCC_PLLCmd+0x1c>)
20000212:	1dfa      	adds	r2, r7, #7
20000214:	7812      	ldrb	r2, [r2, #0]
20000216:	601a      	str	r2, [r3, #0]
}
20000218:	46c0      	nop			; (mov r8, r8)
2000021a:	46bd      	mov	sp, r7
2000021c:	b002      	add	sp, #8
2000021e:	bd80      	pop	{r7, pc}
20000220:	42470060 	submi	r0, r7, #96	; 0x60

20000224 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
20000224:	b580      	push	{r7, lr}
20000226:	b082      	sub	sp, #8
20000228:	af00      	add	r7, sp, #0
2000022a:	6078      	str	r0, [r7, #4]
2000022c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
2000022e:	687b      	ldr	r3, [r7, #4]
20000230:	019a      	lsls	r2, r3, #6
20000232:	683b      	ldr	r3, [r7, #0]
20000234:	071b      	lsls	r3, r3, #28
20000236:	4904      	ldr	r1, [pc, #16]	; (20000248 <RCC_PLLI2SConfig+0x24>)
20000238:	4313      	orrs	r3, r2
2000023a:	2284      	movs	r2, #132	; 0x84
2000023c:	508b      	str	r3, [r1, r2]
}
2000023e:	46c0      	nop			; (mov r8, r8)
20000240:	46bd      	mov	sp, r7
20000242:	b002      	add	sp, #8
20000244:	bd80      	pop	{r7, pc}
20000246:	46c0      	nop			; (mov r8, r8)
20000248:	40023800 	andmi	r3, r2, r0, lsl #16

2000024c <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
2000024c:	b580      	push	{r7, lr}
2000024e:	b082      	sub	sp, #8
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
20000258:	4b03      	ldr	r3, [pc, #12]	; (20000268 <RCC_PLLI2SCmd+0x1c>)
2000025a:	1dfa      	adds	r2, r7, #7
2000025c:	7812      	ldrb	r2, [r2, #0]
2000025e:	601a      	str	r2, [r3, #0]
}
20000260:	46c0      	nop			; (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	b002      	add	sp, #8
20000266:	bd80      	pop	{r7, pc}
20000268:	42470068 	submi	r0, r7, #104	; 0x68

2000026c <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
2000026c:	b580      	push	{r7, lr}
2000026e:	b084      	sub	sp, #16
20000270:	af00      	add	r7, sp, #0
20000272:	60f8      	str	r0, [r7, #12]
20000274:	60b9      	str	r1, [r7, #8]
20000276:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
20000278:	68fb      	ldr	r3, [r7, #12]
2000027a:	019a      	lsls	r2, r3, #6
2000027c:	68bb      	ldr	r3, [r7, #8]
2000027e:	061b      	lsls	r3, r3, #24
20000280:	431a      	orrs	r2, r3
20000282:	687b      	ldr	r3, [r7, #4]
20000284:	071b      	lsls	r3, r3, #28
20000286:	4904      	ldr	r1, [pc, #16]	; (20000298 <RCC_PLLSAIConfig+0x2c>)
20000288:	4313      	orrs	r3, r2
2000028a:	2288      	movs	r2, #136	; 0x88
2000028c:	508b      	str	r3, [r1, r2]
}
2000028e:	46c0      	nop			; (mov r8, r8)
20000290:	46bd      	mov	sp, r7
20000292:	b004      	add	sp, #16
20000294:	bd80      	pop	{r7, pc}
20000296:	46c0      	nop			; (mov r8, r8)
20000298:	40023800 	andmi	r3, r2, r0, lsl #16

2000029c <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
2000029c:	b580      	push	{r7, lr}
2000029e:	b082      	sub	sp, #8
200002a0:	af00      	add	r7, sp, #0
200002a2:	0002      	movs	r2, r0
200002a4:	1dfb      	adds	r3, r7, #7
200002a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
200002a8:	4b03      	ldr	r3, [pc, #12]	; (200002b8 <RCC_PLLSAICmd+0x1c>)
200002aa:	1dfa      	adds	r2, r7, #7
200002ac:	7812      	ldrb	r2, [r2, #0]
200002ae:	601a      	str	r2, [r3, #0]
}
200002b0:	46c0      	nop			; (mov r8, r8)
200002b2:	46bd      	mov	sp, r7
200002b4:	b002      	add	sp, #8
200002b6:	bd80      	pop	{r7, pc}
200002b8:	42470070 	submi	r0, r7, #112	; 0x70

200002bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
200002bc:	b580      	push	{r7, lr}
200002be:	b082      	sub	sp, #8
200002c0:	af00      	add	r7, sp, #0
200002c2:	0002      	movs	r2, r0
200002c4:	1dfb      	adds	r3, r7, #7
200002c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
200002c8:	4b03      	ldr	r3, [pc, #12]	; (200002d8 <RCC_ClockSecuritySystemCmd+0x1c>)
200002ca:	1dfa      	adds	r2, r7, #7
200002cc:	7812      	ldrb	r2, [r2, #0]
200002ce:	601a      	str	r2, [r3, #0]
}
200002d0:	46c0      	nop			; (mov r8, r8)
200002d2:	46bd      	mov	sp, r7
200002d4:	b002      	add	sp, #8
200002d6:	bd80      	pop	{r7, pc}
200002d8:	4247004c 	submi	r0, r7, #76	; 0x4c

200002dc <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
200002dc:	b580      	push	{r7, lr}
200002de:	b084      	sub	sp, #16
200002e0:	af00      	add	r7, sp, #0
200002e2:	6078      	str	r0, [r7, #4]
200002e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
200002e6:	2300      	movs	r3, #0
200002e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
200002ea:	4b0a      	ldr	r3, [pc, #40]	; (20000314 <RCC_MCO1Config+0x38>)
200002ec:	689b      	ldr	r3, [r3, #8]
200002ee:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
200002f0:	68fb      	ldr	r3, [r7, #12]
200002f2:	4a09      	ldr	r2, [pc, #36]	; (20000318 <RCC_MCO1Config+0x3c>)
200002f4:	4013      	ands	r3, r2
200002f6:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
200002f8:	687a      	ldr	r2, [r7, #4]
200002fa:	683b      	ldr	r3, [r7, #0]
200002fc:	4313      	orrs	r3, r2
200002fe:	68fa      	ldr	r2, [r7, #12]
20000300:	4313      	orrs	r3, r2
20000302:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
20000304:	4b03      	ldr	r3, [pc, #12]	; (20000314 <RCC_MCO1Config+0x38>)
20000306:	68fa      	ldr	r2, [r7, #12]
20000308:	609a      	str	r2, [r3, #8]
}
2000030a:	46c0      	nop			; (mov r8, r8)
2000030c:	46bd      	mov	sp, r7
2000030e:	b004      	add	sp, #16
20000310:	bd80      	pop	{r7, pc}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	40023800 	andmi	r3, r2, r0, lsl #16
20000318:	f89fffff 			; <UNDEFINED> instruction: 0xf89fffff

2000031c <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
2000031c:	b580      	push	{r7, lr}
2000031e:	b084      	sub	sp, #16
20000320:	af00      	add	r7, sp, #0
20000322:	6078      	str	r0, [r7, #4]
20000324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
20000326:	2300      	movs	r3, #0
20000328:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
2000032a:	4b0a      	ldr	r3, [pc, #40]	; (20000354 <RCC_MCO2Config+0x38>)
2000032c:	689b      	ldr	r3, [r3, #8]
2000032e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
20000330:	68fb      	ldr	r3, [r7, #12]
20000332:	015b      	lsls	r3, r3, #5
20000334:	095b      	lsrs	r3, r3, #5
20000336:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
20000338:	687a      	ldr	r2, [r7, #4]
2000033a:	683b      	ldr	r3, [r7, #0]
2000033c:	4313      	orrs	r3, r2
2000033e:	68fa      	ldr	r2, [r7, #12]
20000340:	4313      	orrs	r3, r2
20000342:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
20000344:	4b03      	ldr	r3, [pc, #12]	; (20000354 <RCC_MCO2Config+0x38>)
20000346:	68fa      	ldr	r2, [r7, #12]
20000348:	609a      	str	r2, [r3, #8]
}
2000034a:	46c0      	nop			; (mov r8, r8)
2000034c:	46bd      	mov	sp, r7
2000034e:	b004      	add	sp, #16
20000350:	bd80      	pop	{r7, pc}
20000352:	46c0      	nop			; (mov r8, r8)
20000354:	40023800 	andmi	r3, r2, r0, lsl #16

20000358 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
20000358:	b580      	push	{r7, lr}
2000035a:	b084      	sub	sp, #16
2000035c:	af00      	add	r7, sp, #0
2000035e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000360:	2300      	movs	r3, #0
20000362:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
20000364:	4b08      	ldr	r3, [pc, #32]	; (20000388 <RCC_SYSCLKConfig+0x30>)
20000366:	689b      	ldr	r3, [r3, #8]
20000368:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
2000036a:	68fb      	ldr	r3, [r7, #12]
2000036c:	2203      	movs	r2, #3
2000036e:	4393      	bics	r3, r2
20000370:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
20000372:	68fa      	ldr	r2, [r7, #12]
20000374:	687b      	ldr	r3, [r7, #4]
20000376:	4313      	orrs	r3, r2
20000378:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
2000037a:	4b03      	ldr	r3, [pc, #12]	; (20000388 <RCC_SYSCLKConfig+0x30>)
2000037c:	68fa      	ldr	r2, [r7, #12]
2000037e:	609a      	str	r2, [r3, #8]
}
20000380:	46c0      	nop			; (mov r8, r8)
20000382:	46bd      	mov	sp, r7
20000384:	b004      	add	sp, #16
20000386:	bd80      	pop	{r7, pc}
20000388:	40023800 	andmi	r3, r2, r0, lsl #16

2000038c <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
2000038c:	b580      	push	{r7, lr}
2000038e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
20000390:	4b04      	ldr	r3, [pc, #16]	; (200003a4 <RCC_GetSYSCLKSource+0x18>)
20000392:	689b      	ldr	r3, [r3, #8]
20000394:	b2db      	uxtb	r3, r3
20000396:	220c      	movs	r2, #12
20000398:	4013      	ands	r3, r2
2000039a:	b2db      	uxtb	r3, r3
}
2000039c:	0018      	movs	r0, r3
2000039e:	46bd      	mov	sp, r7
200003a0:	bd80      	pop	{r7, pc}
200003a2:	46c0      	nop			; (mov r8, r8)
200003a4:	40023800 	andmi	r3, r2, r0, lsl #16

200003a8 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
200003a8:	b580      	push	{r7, lr}
200003aa:	b084      	sub	sp, #16
200003ac:	af00      	add	r7, sp, #0
200003ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200003b0:	2300      	movs	r3, #0
200003b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
200003b4:	4b08      	ldr	r3, [pc, #32]	; (200003d8 <RCC_HCLKConfig+0x30>)
200003b6:	689b      	ldr	r3, [r3, #8]
200003b8:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
200003ba:	68fb      	ldr	r3, [r7, #12]
200003bc:	22f0      	movs	r2, #240	; 0xf0
200003be:	4393      	bics	r3, r2
200003c0:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
200003c2:	68fa      	ldr	r2, [r7, #12]
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	4313      	orrs	r3, r2
200003c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200003ca:	4b03      	ldr	r3, [pc, #12]	; (200003d8 <RCC_HCLKConfig+0x30>)
200003cc:	68fa      	ldr	r2, [r7, #12]
200003ce:	609a      	str	r2, [r3, #8]
}
200003d0:	46c0      	nop			; (mov r8, r8)
200003d2:	46bd      	mov	sp, r7
200003d4:	b004      	add	sp, #16
200003d6:	bd80      	pop	{r7, pc}
200003d8:	40023800 	andmi	r3, r2, r0, lsl #16

200003dc <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
200003dc:	b580      	push	{r7, lr}
200003de:	b084      	sub	sp, #16
200003e0:	af00      	add	r7, sp, #0
200003e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200003e4:	2300      	movs	r3, #0
200003e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
200003e8:	4b08      	ldr	r3, [pc, #32]	; (2000040c <RCC_PCLK1Config+0x30>)
200003ea:	689b      	ldr	r3, [r3, #8]
200003ec:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
200003ee:	68fb      	ldr	r3, [r7, #12]
200003f0:	4a07      	ldr	r2, [pc, #28]	; (20000410 <RCC_PCLK1Config+0x34>)
200003f2:	4013      	ands	r3, r2
200003f4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
200003f6:	68fa      	ldr	r2, [r7, #12]
200003f8:	687b      	ldr	r3, [r7, #4]
200003fa:	4313      	orrs	r3, r2
200003fc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
200003fe:	4b03      	ldr	r3, [pc, #12]	; (2000040c <RCC_PCLK1Config+0x30>)
20000400:	68fa      	ldr	r2, [r7, #12]
20000402:	609a      	str	r2, [r3, #8]
}
20000404:	46c0      	nop			; (mov r8, r8)
20000406:	46bd      	mov	sp, r7
20000408:	b004      	add	sp, #16
2000040a:	bd80      	pop	{r7, pc}
2000040c:	40023800 	andmi	r3, r2, r0, lsl #16
20000410:	ffffe3ff 			; <UNDEFINED> instruction: 0xffffe3ff

20000414 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
20000414:	b580      	push	{r7, lr}
20000416:	b084      	sub	sp, #16
20000418:	af00      	add	r7, sp, #0
2000041a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000041c:	2300      	movs	r3, #0
2000041e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
20000420:	4b09      	ldr	r3, [pc, #36]	; (20000448 <RCC_PCLK2Config+0x34>)
20000422:	689b      	ldr	r3, [r3, #8]
20000424:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
20000426:	68fb      	ldr	r3, [r7, #12]
20000428:	4a08      	ldr	r2, [pc, #32]	; (2000044c <RCC_PCLK2Config+0x38>)
2000042a:	4013      	ands	r3, r2
2000042c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
2000042e:	687b      	ldr	r3, [r7, #4]
20000430:	00db      	lsls	r3, r3, #3
20000432:	68fa      	ldr	r2, [r7, #12]
20000434:	4313      	orrs	r3, r2
20000436:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
20000438:	4b03      	ldr	r3, [pc, #12]	; (20000448 <RCC_PCLK2Config+0x34>)
2000043a:	68fa      	ldr	r2, [r7, #12]
2000043c:	609a      	str	r2, [r3, #8]
}
2000043e:	46c0      	nop			; (mov r8, r8)
20000440:	46bd      	mov	sp, r7
20000442:	b004      	add	sp, #16
20000444:	bd80      	pop	{r7, pc}
20000446:	46c0      	nop			; (mov r8, r8)
20000448:	40023800 	andmi	r3, r2, r0, lsl #16
2000044c:	ffff1fff 			; <UNDEFINED> instruction: 0xffff1fff

20000450 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
20000450:	b580      	push	{r7, lr}
20000452:	b088      	sub	sp, #32
20000454:	af00      	add	r7, sp, #0
20000456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
20000458:	2300      	movs	r3, #0
2000045a:	61bb      	str	r3, [r7, #24]
2000045c:	2300      	movs	r3, #0
2000045e:	617b      	str	r3, [r7, #20]
20000460:	2300      	movs	r3, #0
20000462:	61fb      	str	r3, [r7, #28]
20000464:	2302      	movs	r3, #2
20000466:	613b      	str	r3, [r7, #16]
20000468:	2300      	movs	r3, #0
2000046a:	60fb      	str	r3, [r7, #12]
2000046c:	2302      	movs	r3, #2
2000046e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
20000470:	4b49      	ldr	r3, [pc, #292]	; (20000598 <RCC_GetClocksFreq+0x148>)
20000472:	689b      	ldr	r3, [r3, #8]
20000474:	220c      	movs	r2, #12
20000476:	4013      	ands	r3, r2
20000478:	61bb      	str	r3, [r7, #24]

  switch (tmp)
2000047a:	69bb      	ldr	r3, [r7, #24]
2000047c:	2b04      	cmp	r3, #4
2000047e:	d007      	beq.n	20000490 <RCC_GetClocksFreq+0x40>
20000480:	2b08      	cmp	r3, #8
20000482:	d009      	beq.n	20000498 <RCC_GetClocksFreq+0x48>
20000484:	2b00      	cmp	r3, #0
20000486:	d141      	bne.n	2000050c <RCC_GetClocksFreq+0xbc>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
20000488:	687b      	ldr	r3, [r7, #4]
2000048a:	4a44      	ldr	r2, [pc, #272]	; (2000059c <RCC_GetClocksFreq+0x14c>)
2000048c:	601a      	str	r2, [r3, #0]
      break;
2000048e:	e041      	b.n	20000514 <RCC_GetClocksFreq+0xc4>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
20000490:	687b      	ldr	r3, [r7, #4]
20000492:	4a43      	ldr	r2, [pc, #268]	; (200005a0 <RCC_GetClocksFreq+0x150>)
20000494:	601a      	str	r2, [r3, #0]
      break;
20000496:	e03d      	b.n	20000514 <RCC_GetClocksFreq+0xc4>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
20000498:	4b3f      	ldr	r3, [pc, #252]	; (20000598 <RCC_GetClocksFreq+0x148>)
2000049a:	685b      	ldr	r3, [r3, #4]
2000049c:	0d9b      	lsrs	r3, r3, #22
2000049e:	2201      	movs	r2, #1
200004a0:	4013      	ands	r3, r2
200004a2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200004a4:	4b3c      	ldr	r3, [pc, #240]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004a6:	685b      	ldr	r3, [r3, #4]
200004a8:	223f      	movs	r2, #63	; 0x3f
200004aa:	4013      	ands	r3, r2
200004ac:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
200004ae:	68fb      	ldr	r3, [r7, #12]
200004b0:	2b00      	cmp	r3, #0
200004b2:	d00d      	beq.n	200004d0 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
200004b4:	68b9      	ldr	r1, [r7, #8]
200004b6:	483a      	ldr	r0, [pc, #232]	; (200005a0 <RCC_GetClocksFreq+0x150>)
200004b8:	f002 fa72 	bl	200029a0 <__udivsi3>
200004bc:	0003      	movs	r3, r0
200004be:	001a      	movs	r2, r3
200004c0:	4b35      	ldr	r3, [pc, #212]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004c2:	685b      	ldr	r3, [r3, #4]
200004c4:	099b      	lsrs	r3, r3, #6
200004c6:	05db      	lsls	r3, r3, #23
200004c8:	0ddb      	lsrs	r3, r3, #23
200004ca:	4353      	muls	r3, r2
200004cc:	61fb      	str	r3, [r7, #28]
200004ce:	e00c      	b.n	200004ea <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
200004d0:	68b9      	ldr	r1, [r7, #8]
200004d2:	4832      	ldr	r0, [pc, #200]	; (2000059c <RCC_GetClocksFreq+0x14c>)
200004d4:	f002 fa64 	bl	200029a0 <__udivsi3>
200004d8:	0003      	movs	r3, r0
200004da:	001a      	movs	r2, r3
200004dc:	4b2e      	ldr	r3, [pc, #184]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004de:	685b      	ldr	r3, [r3, #4]
200004e0:	099b      	lsrs	r3, r3, #6
200004e2:	05db      	lsls	r3, r3, #23
200004e4:	0ddb      	lsrs	r3, r3, #23
200004e6:	4353      	muls	r3, r2
200004e8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
200004ea:	4b2b      	ldr	r3, [pc, #172]	; (20000598 <RCC_GetClocksFreq+0x148>)
200004ec:	685b      	ldr	r3, [r3, #4]
200004ee:	0c1b      	lsrs	r3, r3, #16
200004f0:	2203      	movs	r2, #3
200004f2:	4013      	ands	r3, r2
200004f4:	3301      	adds	r3, #1
200004f6:	005b      	lsls	r3, r3, #1
200004f8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
200004fa:	6939      	ldr	r1, [r7, #16]
200004fc:	69f8      	ldr	r0, [r7, #28]
200004fe:	f002 fa4f 	bl	200029a0 <__udivsi3>
20000502:	0003      	movs	r3, r0
20000504:	001a      	movs	r2, r3
20000506:	687b      	ldr	r3, [r7, #4]
20000508:	601a      	str	r2, [r3, #0]
      break;
2000050a:	e003      	b.n	20000514 <RCC_GetClocksFreq+0xc4>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
2000050c:	687b      	ldr	r3, [r7, #4]
2000050e:	4a23      	ldr	r2, [pc, #140]	; (2000059c <RCC_GetClocksFreq+0x14c>)
20000510:	601a      	str	r2, [r3, #0]
      break;
20000512:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
20000514:	4b20      	ldr	r3, [pc, #128]	; (20000598 <RCC_GetClocksFreq+0x148>)
20000516:	689b      	ldr	r3, [r3, #8]
20000518:	22f0      	movs	r2, #240	; 0xf0
2000051a:	4013      	ands	r3, r2
2000051c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
2000051e:	69bb      	ldr	r3, [r7, #24]
20000520:	091b      	lsrs	r3, r3, #4
20000522:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000524:	4a1f      	ldr	r2, [pc, #124]	; (200005a4 <RCC_GetClocksFreq+0x154>)
20000526:	69bb      	ldr	r3, [r7, #24]
20000528:	18d3      	adds	r3, r2, r3
2000052a:	781b      	ldrb	r3, [r3, #0]
2000052c:	b2db      	uxtb	r3, r3
2000052e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	681a      	ldr	r2, [r3, #0]
20000534:	697b      	ldr	r3, [r7, #20]
20000536:	40da      	lsrs	r2, r3
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
2000053c:	4b16      	ldr	r3, [pc, #88]	; (20000598 <RCC_GetClocksFreq+0x148>)
2000053e:	689a      	ldr	r2, [r3, #8]
20000540:	23e0      	movs	r3, #224	; 0xe0
20000542:	015b      	lsls	r3, r3, #5
20000544:	4013      	ands	r3, r2
20000546:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
20000548:	69bb      	ldr	r3, [r7, #24]
2000054a:	0a9b      	lsrs	r3, r3, #10
2000054c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
2000054e:	4a15      	ldr	r2, [pc, #84]	; (200005a4 <RCC_GetClocksFreq+0x154>)
20000550:	69bb      	ldr	r3, [r7, #24]
20000552:	18d3      	adds	r3, r2, r3
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	b2db      	uxtb	r3, r3
20000558:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
2000055a:	687b      	ldr	r3, [r7, #4]
2000055c:	685a      	ldr	r2, [r3, #4]
2000055e:	697b      	ldr	r3, [r7, #20]
20000560:	40da      	lsrs	r2, r3
20000562:	687b      	ldr	r3, [r7, #4]
20000564:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
20000566:	4b0c      	ldr	r3, [pc, #48]	; (20000598 <RCC_GetClocksFreq+0x148>)
20000568:	689a      	ldr	r2, [r3, #8]
2000056a:	23e0      	movs	r3, #224	; 0xe0
2000056c:	021b      	lsls	r3, r3, #8
2000056e:	4013      	ands	r3, r2
20000570:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
20000572:	69bb      	ldr	r3, [r7, #24]
20000574:	0b5b      	lsrs	r3, r3, #13
20000576:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
20000578:	4a0a      	ldr	r2, [pc, #40]	; (200005a4 <RCC_GetClocksFreq+0x154>)
2000057a:	69bb      	ldr	r3, [r7, #24]
2000057c:	18d3      	adds	r3, r2, r3
2000057e:	781b      	ldrb	r3, [r3, #0]
20000580:	b2db      	uxtb	r3, r3
20000582:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
20000584:	687b      	ldr	r3, [r7, #4]
20000586:	685a      	ldr	r2, [r3, #4]
20000588:	697b      	ldr	r3, [r7, #20]
2000058a:	40da      	lsrs	r2, r3
2000058c:	687b      	ldr	r3, [r7, #4]
2000058e:	60da      	str	r2, [r3, #12]
}
20000590:	46c0      	nop			; (mov r8, r8)
20000592:	46bd      	mov	sp, r7
20000594:	b008      	add	sp, #32
20000596:	bd80      	pop	{r7, pc}
20000598:	40023800 	andmi	r3, r2, r0, lsl #16
2000059c:	00f42400 	rscseq	r2, r4, r0, lsl #8
200005a0:	007a1200 	rsbseq	r1, sl, r0, lsl #4
200005a4:	20002ab8 			; <UNDEFINED> instruction: 0x20002ab8

200005a8 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
200005a8:	b580      	push	{r7, lr}
200005aa:	b084      	sub	sp, #16
200005ac:	af00      	add	r7, sp, #0
200005ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200005b0:	2300      	movs	r3, #0
200005b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
200005b4:	687a      	ldr	r2, [r7, #4]
200005b6:	23c0      	movs	r3, #192	; 0xc0
200005b8:	009b      	lsls	r3, r3, #2
200005ba:	401a      	ands	r2, r3
200005bc:	23c0      	movs	r3, #192	; 0xc0
200005be:	009b      	lsls	r3, r3, #2
200005c0:	429a      	cmp	r2, r3
200005c2:	d10f      	bne.n	200005e4 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
200005c4:	4b0d      	ldr	r3, [pc, #52]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005c6:	689b      	ldr	r3, [r3, #8]
200005c8:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
200005ca:	68fb      	ldr	r3, [r7, #12]
200005cc:	4a0c      	ldr	r2, [pc, #48]	; (20000600 <RCC_RTCCLKConfig+0x58>)
200005ce:	4013      	ands	r3, r2
200005d0:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
200005d2:	687b      	ldr	r3, [r7, #4]
200005d4:	4a0b      	ldr	r2, [pc, #44]	; (20000604 <RCC_RTCCLKConfig+0x5c>)
200005d6:	4013      	ands	r3, r2
200005d8:	68fa      	ldr	r2, [r7, #12]
200005da:	4313      	orrs	r3, r2
200005dc:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
200005de:	4b07      	ldr	r3, [pc, #28]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005e0:	68fa      	ldr	r2, [r7, #12]
200005e2:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
200005e4:	4b05      	ldr	r3, [pc, #20]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005e6:	6f19      	ldr	r1, [r3, #112]	; 0x70
200005e8:	687b      	ldr	r3, [r7, #4]
200005ea:	051b      	lsls	r3, r3, #20
200005ec:	0d1a      	lsrs	r2, r3, #20
200005ee:	4b03      	ldr	r3, [pc, #12]	; (200005fc <RCC_RTCCLKConfig+0x54>)
200005f0:	430a      	orrs	r2, r1
200005f2:	671a      	str	r2, [r3, #112]	; 0x70
}
200005f4:	46c0      	nop			; (mov r8, r8)
200005f6:	46bd      	mov	sp, r7
200005f8:	b004      	add	sp, #16
200005fa:	bd80      	pop	{r7, pc}
200005fc:	40023800 	andmi	r3, r2, r0, lsl #16
20000600:	ffe0ffff 			; <UNDEFINED> instruction: 0xffe0ffff
20000604:	0ffffcff 	svceq	0x00fffcff

20000608 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
20000608:	b580      	push	{r7, lr}
2000060a:	b082      	sub	sp, #8
2000060c:	af00      	add	r7, sp, #0
2000060e:	0002      	movs	r2, r0
20000610:	1dfb      	adds	r3, r7, #7
20000612:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
20000614:	4b03      	ldr	r3, [pc, #12]	; (20000624 <RCC_RTCCLKCmd+0x1c>)
20000616:	1dfa      	adds	r2, r7, #7
20000618:	7812      	ldrb	r2, [r2, #0]
2000061a:	601a      	str	r2, [r3, #0]
}
2000061c:	46c0      	nop			; (mov r8, r8)
2000061e:	46bd      	mov	sp, r7
20000620:	b002      	add	sp, #8
20000622:	bd80      	pop	{r7, pc}
20000624:	42470e3c 	submi	r0, r7, #60, 28	; 0x3c0

20000628 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
20000628:	b580      	push	{r7, lr}
2000062a:	b082      	sub	sp, #8
2000062c:	af00      	add	r7, sp, #0
2000062e:	0002      	movs	r2, r0
20000630:	1dfb      	adds	r3, r7, #7
20000632:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
20000634:	4b03      	ldr	r3, [pc, #12]	; (20000644 <RCC_BackupResetCmd+0x1c>)
20000636:	1dfa      	adds	r2, r7, #7
20000638:	7812      	ldrb	r2, [r2, #0]
2000063a:	601a      	str	r2, [r3, #0]
}
2000063c:	46c0      	nop			; (mov r8, r8)
2000063e:	46bd      	mov	sp, r7
20000640:	b002      	add	sp, #8
20000642:	bd80      	pop	{r7, pc}
20000644:	42470e40 	submi	r0, r7, #64, 28	; 0x400

20000648 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
20000648:	b580      	push	{r7, lr}
2000064a:	b082      	sub	sp, #8
2000064c:	af00      	add	r7, sp, #0
2000064e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
20000650:	4b03      	ldr	r3, [pc, #12]	; (20000660 <RCC_I2SCLKConfig+0x18>)
20000652:	687a      	ldr	r2, [r7, #4]
20000654:	601a      	str	r2, [r3, #0]
}
20000656:	46c0      	nop			; (mov r8, r8)
20000658:	46bd      	mov	sp, r7
2000065a:	b002      	add	sp, #8
2000065c:	bd80      	pop	{r7, pc}
2000065e:	46c0      	nop			; (mov r8, r8)
20000660:	4247015c 	submi	r0, r7, #92, 2

20000664 <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
20000664:	b580      	push	{r7, lr}
20000666:	b084      	sub	sp, #16
20000668:	af00      	add	r7, sp, #0
2000066a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
2000066c:	2300      	movs	r3, #0
2000066e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
20000670:	4a0a      	ldr	r2, [pc, #40]	; (2000069c <RCC_SAIPLLI2SClkDivConfig+0x38>)
20000672:	238c      	movs	r3, #140	; 0x8c
20000674:	58d3      	ldr	r3, [r2, r3]
20000676:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
20000678:	68fb      	ldr	r3, [r7, #12]
2000067a:	221f      	movs	r2, #31
2000067c:	4393      	bics	r3, r2
2000067e:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
20000680:	687b      	ldr	r3, [r7, #4]
20000682:	3b01      	subs	r3, #1
20000684:	68fa      	ldr	r2, [r7, #12]
20000686:	4313      	orrs	r3, r2
20000688:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000068a:	4904      	ldr	r1, [pc, #16]	; (2000069c <RCC_SAIPLLI2SClkDivConfig+0x38>)
2000068c:	228c      	movs	r2, #140	; 0x8c
2000068e:	68fb      	ldr	r3, [r7, #12]
20000690:	508b      	str	r3, [r1, r2]
}
20000692:	46c0      	nop			; (mov r8, r8)
20000694:	46bd      	mov	sp, r7
20000696:	b004      	add	sp, #16
20000698:	bd80      	pop	{r7, pc}
2000069a:	46c0      	nop			; (mov r8, r8)
2000069c:	40023800 	andmi	r3, r2, r0, lsl #16

200006a0 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
200006a0:	b580      	push	{r7, lr}
200006a2:	b084      	sub	sp, #16
200006a4:	af00      	add	r7, sp, #0
200006a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200006a8:	2300      	movs	r3, #0
200006aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
200006ac:	4a0a      	ldr	r2, [pc, #40]	; (200006d8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200006ae:	238c      	movs	r3, #140	; 0x8c
200006b0:	58d3      	ldr	r3, [r2, r3]
200006b2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
200006b4:	68fb      	ldr	r3, [r7, #12]
200006b6:	4a09      	ldr	r2, [pc, #36]	; (200006dc <RCC_SAIPLLSAIClkDivConfig+0x3c>)
200006b8:	4013      	ands	r3, r2
200006ba:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	3b01      	subs	r3, #1
200006c0:	021b      	lsls	r3, r3, #8
200006c2:	68fa      	ldr	r2, [r7, #12]
200006c4:	4313      	orrs	r3, r2
200006c6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
200006c8:	4903      	ldr	r1, [pc, #12]	; (200006d8 <RCC_SAIPLLSAIClkDivConfig+0x38>)
200006ca:	228c      	movs	r2, #140	; 0x8c
200006cc:	68fb      	ldr	r3, [r7, #12]
200006ce:	508b      	str	r3, [r1, r2]
}
200006d0:	46c0      	nop			; (mov r8, r8)
200006d2:	46bd      	mov	sp, r7
200006d4:	b004      	add	sp, #16
200006d6:	bd80      	pop	{r7, pc}
200006d8:	40023800 	andmi	r3, r2, r0, lsl #16
200006dc:	ffffe0ff 			; <UNDEFINED> instruction: 0xffffe0ff

200006e0 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
200006e0:	b580      	push	{r7, lr}
200006e2:	b084      	sub	sp, #16
200006e4:	af00      	add	r7, sp, #0
200006e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
200006e8:	2300      	movs	r3, #0
200006ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
200006ec:	4a09      	ldr	r2, [pc, #36]	; (20000714 <RCC_SAIBlockACLKConfig+0x34>)
200006ee:	238c      	movs	r3, #140	; 0x8c
200006f0:	58d3      	ldr	r3, [r2, r3]
200006f2:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
200006f4:	68fb      	ldr	r3, [r7, #12]
200006f6:	4a08      	ldr	r2, [pc, #32]	; (20000718 <RCC_SAIBlockACLKConfig+0x38>)
200006f8:	4013      	ands	r3, r2
200006fa:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
200006fc:	68fa      	ldr	r2, [r7, #12]
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	4313      	orrs	r3, r2
20000702:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000704:	4903      	ldr	r1, [pc, #12]	; (20000714 <RCC_SAIBlockACLKConfig+0x34>)
20000706:	228c      	movs	r2, #140	; 0x8c
20000708:	68fb      	ldr	r3, [r7, #12]
2000070a:	508b      	str	r3, [r1, r2]
}
2000070c:	46c0      	nop			; (mov r8, r8)
2000070e:	46bd      	mov	sp, r7
20000710:	b004      	add	sp, #16
20000712:	bd80      	pop	{r7, pc}
20000714:	40023800 	andmi	r3, r2, r0, lsl #16
20000718:	ffcfffff 			; <UNDEFINED> instruction: 0xffcfffff

2000071c <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
2000071c:	b580      	push	{r7, lr}
2000071e:	b084      	sub	sp, #16
20000720:	af00      	add	r7, sp, #0
20000722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000724:	2300      	movs	r3, #0
20000726:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
20000728:	4a09      	ldr	r2, [pc, #36]	; (20000750 <RCC_SAIBlockBCLKConfig+0x34>)
2000072a:	238c      	movs	r3, #140	; 0x8c
2000072c:	58d3      	ldr	r3, [r2, r3]
2000072e:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
20000730:	68fb      	ldr	r3, [r7, #12]
20000732:	4a08      	ldr	r2, [pc, #32]	; (20000754 <RCC_SAIBlockBCLKConfig+0x38>)
20000734:	4013      	ands	r3, r2
20000736:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
20000738:	68fa      	ldr	r2, [r7, #12]
2000073a:	687b      	ldr	r3, [r7, #4]
2000073c:	4313      	orrs	r3, r2
2000073e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
20000740:	4903      	ldr	r1, [pc, #12]	; (20000750 <RCC_SAIBlockBCLKConfig+0x34>)
20000742:	228c      	movs	r2, #140	; 0x8c
20000744:	68fb      	ldr	r3, [r7, #12]
20000746:	508b      	str	r3, [r1, r2]
}
20000748:	46c0      	nop			; (mov r8, r8)
2000074a:	46bd      	mov	sp, r7
2000074c:	b004      	add	sp, #16
2000074e:	bd80      	pop	{r7, pc}
20000750:	40023800 	andmi	r3, r2, r0, lsl #16
20000754:	ff3fffff 			; <UNDEFINED> instruction: 0xff3fffff

20000758 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
20000758:	b580      	push	{r7, lr}
2000075a:	b084      	sub	sp, #16
2000075c:	af00      	add	r7, sp, #0
2000075e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
20000760:	2300      	movs	r3, #0
20000762:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
20000764:	4a09      	ldr	r2, [pc, #36]	; (2000078c <RCC_LTDCCLKDivConfig+0x34>)
20000766:	238c      	movs	r3, #140	; 0x8c
20000768:	58d3      	ldr	r3, [r2, r3]
2000076a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
2000076c:	68fb      	ldr	r3, [r7, #12]
2000076e:	4a08      	ldr	r2, [pc, #32]	; (20000790 <RCC_LTDCCLKDivConfig+0x38>)
20000770:	4013      	ands	r3, r2
20000772:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
20000774:	68fa      	ldr	r2, [r7, #12]
20000776:	687b      	ldr	r3, [r7, #4]
20000778:	4313      	orrs	r3, r2
2000077a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
2000077c:	4903      	ldr	r1, [pc, #12]	; (2000078c <RCC_LTDCCLKDivConfig+0x34>)
2000077e:	228c      	movs	r2, #140	; 0x8c
20000780:	68fb      	ldr	r3, [r7, #12]
20000782:	508b      	str	r3, [r1, r2]
}
20000784:	46c0      	nop			; (mov r8, r8)
20000786:	46bd      	mov	sp, r7
20000788:	b004      	add	sp, #16
2000078a:	bd80      	pop	{r7, pc}
2000078c:	40023800 	andmi	r3, r2, r0, lsl #16
20000790:	fffcffff 			; <UNDEFINED> instruction: 0xfffcffff

20000794 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
20000794:	b580      	push	{r7, lr}
20000796:	b082      	sub	sp, #8
20000798:	af00      	add	r7, sp, #0
2000079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
2000079c:	4b03      	ldr	r3, [pc, #12]	; (200007ac <RCC_TIMCLKPresConfig+0x18>)
2000079e:	687a      	ldr	r2, [r7, #4]
200007a0:	601a      	str	r2, [r3, #0]
  
}
200007a2:	46c0      	nop			; (mov r8, r8)
200007a4:	46bd      	mov	sp, r7
200007a6:	b002      	add	sp, #8
200007a8:	bd80      	pop	{r7, pc}
200007aa:	46c0      	nop			; (mov r8, r8)
200007ac:	424711e0 	submi	r1, r7, #224, 2	; 0x38

200007b0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200007b0:	b580      	push	{r7, lr}
200007b2:	b082      	sub	sp, #8
200007b4:	af00      	add	r7, sp, #0
200007b6:	6078      	str	r0, [r7, #4]
200007b8:	000a      	movs	r2, r1
200007ba:	1cfb      	adds	r3, r7, #3
200007bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200007be:	1cfb      	adds	r3, r7, #3
200007c0:	781b      	ldrb	r3, [r3, #0]
200007c2:	2b00      	cmp	r3, #0
200007c4:	d006      	beq.n	200007d4 <RCC_AHB1PeriphClockCmd+0x24>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
200007c6:	4b09      	ldr	r3, [pc, #36]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
200007ca:	4b08      	ldr	r3, [pc, #32]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007cc:	687a      	ldr	r2, [r7, #4]
200007ce:	430a      	orrs	r2, r1
200007d0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
200007d2:	e006      	b.n	200007e2 <RCC_AHB1PeriphClockCmd+0x32>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
200007d4:	4b05      	ldr	r3, [pc, #20]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200007d8:	687b      	ldr	r3, [r7, #4]
200007da:	43d9      	mvns	r1, r3
200007dc:	4b03      	ldr	r3, [pc, #12]	; (200007ec <RCC_AHB1PeriphClockCmd+0x3c>)
200007de:	400a      	ands	r2, r1
200007e0:	631a      	str	r2, [r3, #48]	; 0x30
}
200007e2:	46c0      	nop			; (mov r8, r8)
200007e4:	46bd      	mov	sp, r7
200007e6:	b002      	add	sp, #8
200007e8:	bd80      	pop	{r7, pc}
200007ea:	46c0      	nop			; (mov r8, r8)
200007ec:	40023800 	andmi	r3, r2, r0, lsl #16

200007f0 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
200007f0:	b580      	push	{r7, lr}
200007f2:	b082      	sub	sp, #8
200007f4:	af00      	add	r7, sp, #0
200007f6:	6078      	str	r0, [r7, #4]
200007f8:	000a      	movs	r2, r1
200007fa:	1cfb      	adds	r3, r7, #3
200007fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200007fe:	1cfb      	adds	r3, r7, #3
20000800:	781b      	ldrb	r3, [r3, #0]
20000802:	2b00      	cmp	r3, #0
20000804:	d006      	beq.n	20000814 <RCC_AHB2PeriphClockCmd+0x24>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
20000806:	4b09      	ldr	r3, [pc, #36]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
20000808:	6b59      	ldr	r1, [r3, #52]	; 0x34
2000080a:	4b08      	ldr	r3, [pc, #32]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
2000080c:	687a      	ldr	r2, [r7, #4]
2000080e:	430a      	orrs	r2, r1
20000810:	635a      	str	r2, [r3, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
20000812:	e006      	b.n	20000822 <RCC_AHB2PeriphClockCmd+0x32>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
20000814:	4b05      	ldr	r3, [pc, #20]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
20000816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20000818:	687b      	ldr	r3, [r7, #4]
2000081a:	43d9      	mvns	r1, r3
2000081c:	4b03      	ldr	r3, [pc, #12]	; (2000082c <RCC_AHB2PeriphClockCmd+0x3c>)
2000081e:	400a      	ands	r2, r1
20000820:	635a      	str	r2, [r3, #52]	; 0x34
}
20000822:	46c0      	nop			; (mov r8, r8)
20000824:	46bd      	mov	sp, r7
20000826:	b002      	add	sp, #8
20000828:	bd80      	pop	{r7, pc}
2000082a:	46c0      	nop			; (mov r8, r8)
2000082c:	40023800 	andmi	r3, r2, r0, lsl #16

20000830 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000830:	b580      	push	{r7, lr}
20000832:	b082      	sub	sp, #8
20000834:	af00      	add	r7, sp, #0
20000836:	6078      	str	r0, [r7, #4]
20000838:	000a      	movs	r2, r1
2000083a:	1cfb      	adds	r3, r7, #3
2000083c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000083e:	1cfb      	adds	r3, r7, #3
20000840:	781b      	ldrb	r3, [r3, #0]
20000842:	2b00      	cmp	r3, #0
20000844:	d006      	beq.n	20000854 <RCC_AHB3PeriphClockCmd+0x24>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
20000846:	4b09      	ldr	r3, [pc, #36]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
20000848:	6b99      	ldr	r1, [r3, #56]	; 0x38
2000084a:	4b08      	ldr	r3, [pc, #32]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
2000084c:	687a      	ldr	r2, [r7, #4]
2000084e:	430a      	orrs	r2, r1
20000850:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
20000852:	e006      	b.n	20000862 <RCC_AHB3PeriphClockCmd+0x32>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
20000854:	4b05      	ldr	r3, [pc, #20]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
20000856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	43d9      	mvns	r1, r3
2000085c:	4b03      	ldr	r3, [pc, #12]	; (2000086c <RCC_AHB3PeriphClockCmd+0x3c>)
2000085e:	400a      	ands	r2, r1
20000860:	639a      	str	r2, [r3, #56]	; 0x38
}
20000862:	46c0      	nop			; (mov r8, r8)
20000864:	46bd      	mov	sp, r7
20000866:	b002      	add	sp, #8
20000868:	bd80      	pop	{r7, pc}
2000086a:	46c0      	nop			; (mov r8, r8)
2000086c:	40023800 	andmi	r3, r2, r0, lsl #16

20000870 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000870:	b580      	push	{r7, lr}
20000872:	b082      	sub	sp, #8
20000874:	af00      	add	r7, sp, #0
20000876:	6078      	str	r0, [r7, #4]
20000878:	000a      	movs	r2, r1
2000087a:	1cfb      	adds	r3, r7, #3
2000087c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000087e:	1cfb      	adds	r3, r7, #3
20000880:	781b      	ldrb	r3, [r3, #0]
20000882:	2b00      	cmp	r3, #0
20000884:	d006      	beq.n	20000894 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
20000886:	4b09      	ldr	r3, [pc, #36]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
20000888:	6c19      	ldr	r1, [r3, #64]	; 0x40
2000088a:	4b08      	ldr	r3, [pc, #32]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
2000088c:	687a      	ldr	r2, [r7, #4]
2000088e:	430a      	orrs	r2, r1
20000890:	641a      	str	r2, [r3, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
20000892:	e006      	b.n	200008a2 <RCC_APB1PeriphClockCmd+0x32>
    RCC->APB1ENR &= ~RCC_APB1Periph;
20000894:	4b05      	ldr	r3, [pc, #20]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
20000896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20000898:	687b      	ldr	r3, [r7, #4]
2000089a:	43d9      	mvns	r1, r3
2000089c:	4b03      	ldr	r3, [pc, #12]	; (200008ac <RCC_APB1PeriphClockCmd+0x3c>)
2000089e:	400a      	ands	r2, r1
200008a0:	641a      	str	r2, [r3, #64]	; 0x40
}
200008a2:	46c0      	nop			; (mov r8, r8)
200008a4:	46bd      	mov	sp, r7
200008a6:	b002      	add	sp, #8
200008a8:	bd80      	pop	{r7, pc}
200008aa:	46c0      	nop			; (mov r8, r8)
200008ac:	40023800 	andmi	r3, r2, r0, lsl #16

200008b0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200008b0:	b580      	push	{r7, lr}
200008b2:	b082      	sub	sp, #8
200008b4:	af00      	add	r7, sp, #0
200008b6:	6078      	str	r0, [r7, #4]
200008b8:	000a      	movs	r2, r1
200008ba:	1cfb      	adds	r3, r7, #3
200008bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008be:	1cfb      	adds	r3, r7, #3
200008c0:	781b      	ldrb	r3, [r3, #0]
200008c2:	2b00      	cmp	r3, #0
200008c4:	d006      	beq.n	200008d4 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
200008c6:	4b09      	ldr	r3, [pc, #36]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
200008ca:	4b08      	ldr	r3, [pc, #32]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008cc:	687a      	ldr	r2, [r7, #4]
200008ce:	430a      	orrs	r2, r1
200008d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
200008d2:	e006      	b.n	200008e2 <RCC_APB2PeriphClockCmd+0x32>
    RCC->APB2ENR &= ~RCC_APB2Periph;
200008d4:	4b05      	ldr	r3, [pc, #20]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	43d9      	mvns	r1, r3
200008dc:	4b03      	ldr	r3, [pc, #12]	; (200008ec <RCC_APB2PeriphClockCmd+0x3c>)
200008de:	400a      	ands	r2, r1
200008e0:	645a      	str	r2, [r3, #68]	; 0x44
}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	46bd      	mov	sp, r7
200008e6:	b002      	add	sp, #8
200008e8:	bd80      	pop	{r7, pc}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	40023800 	andmi	r3, r2, r0, lsl #16

200008f0 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
200008f0:	b580      	push	{r7, lr}
200008f2:	b082      	sub	sp, #8
200008f4:	af00      	add	r7, sp, #0
200008f6:	6078      	str	r0, [r7, #4]
200008f8:	000a      	movs	r2, r1
200008fa:	1cfb      	adds	r3, r7, #3
200008fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
200008fe:	1cfb      	adds	r3, r7, #3
20000900:	781b      	ldrb	r3, [r3, #0]
20000902:	2b00      	cmp	r3, #0
20000904:	d006      	beq.n	20000914 <RCC_AHB1PeriphResetCmd+0x24>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
20000906:	4b09      	ldr	r3, [pc, #36]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
20000908:	6919      	ldr	r1, [r3, #16]
2000090a:	4b08      	ldr	r3, [pc, #32]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
2000090c:	687a      	ldr	r2, [r7, #4]
2000090e:	430a      	orrs	r2, r1
20000910:	611a      	str	r2, [r3, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
20000912:	e006      	b.n	20000922 <RCC_AHB1PeriphResetCmd+0x32>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
20000914:	4b05      	ldr	r3, [pc, #20]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
20000916:	691a      	ldr	r2, [r3, #16]
20000918:	687b      	ldr	r3, [r7, #4]
2000091a:	43d9      	mvns	r1, r3
2000091c:	4b03      	ldr	r3, [pc, #12]	; (2000092c <RCC_AHB1PeriphResetCmd+0x3c>)
2000091e:	400a      	ands	r2, r1
20000920:	611a      	str	r2, [r3, #16]
}
20000922:	46c0      	nop			; (mov r8, r8)
20000924:	46bd      	mov	sp, r7
20000926:	b002      	add	sp, #8
20000928:	bd80      	pop	{r7, pc}
2000092a:	46c0      	nop			; (mov r8, r8)
2000092c:	40023800 	andmi	r3, r2, r0, lsl #16

20000930 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000930:	b580      	push	{r7, lr}
20000932:	b082      	sub	sp, #8
20000934:	af00      	add	r7, sp, #0
20000936:	6078      	str	r0, [r7, #4]
20000938:	000a      	movs	r2, r1
2000093a:	1cfb      	adds	r3, r7, #3
2000093c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000093e:	1cfb      	adds	r3, r7, #3
20000940:	781b      	ldrb	r3, [r3, #0]
20000942:	2b00      	cmp	r3, #0
20000944:	d006      	beq.n	20000954 <RCC_AHB2PeriphResetCmd+0x24>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
20000946:	4b09      	ldr	r3, [pc, #36]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
20000948:	6959      	ldr	r1, [r3, #20]
2000094a:	4b08      	ldr	r3, [pc, #32]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
2000094c:	687a      	ldr	r2, [r7, #4]
2000094e:	430a      	orrs	r2, r1
20000950:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
20000952:	e006      	b.n	20000962 <RCC_AHB2PeriphResetCmd+0x32>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
20000954:	4b05      	ldr	r3, [pc, #20]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
20000956:	695a      	ldr	r2, [r3, #20]
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	43d9      	mvns	r1, r3
2000095c:	4b03      	ldr	r3, [pc, #12]	; (2000096c <RCC_AHB2PeriphResetCmd+0x3c>)
2000095e:	400a      	ands	r2, r1
20000960:	615a      	str	r2, [r3, #20]
}
20000962:	46c0      	nop			; (mov r8, r8)
20000964:	46bd      	mov	sp, r7
20000966:	b002      	add	sp, #8
20000968:	bd80      	pop	{r7, pc}
2000096a:	46c0      	nop			; (mov r8, r8)
2000096c:	40023800 	andmi	r3, r2, r0, lsl #16

20000970 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000970:	b580      	push	{r7, lr}
20000972:	b082      	sub	sp, #8
20000974:	af00      	add	r7, sp, #0
20000976:	6078      	str	r0, [r7, #4]
20000978:	000a      	movs	r2, r1
2000097a:	1cfb      	adds	r3, r7, #3
2000097c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
2000097e:	1cfb      	adds	r3, r7, #3
20000980:	781b      	ldrb	r3, [r3, #0]
20000982:	2b00      	cmp	r3, #0
20000984:	d006      	beq.n	20000994 <RCC_AHB3PeriphResetCmd+0x24>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
20000986:	4b09      	ldr	r3, [pc, #36]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
20000988:	6999      	ldr	r1, [r3, #24]
2000098a:	4b08      	ldr	r3, [pc, #32]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
2000098c:	687a      	ldr	r2, [r7, #4]
2000098e:	430a      	orrs	r2, r1
20000990:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
20000992:	e006      	b.n	200009a2 <RCC_AHB3PeriphResetCmd+0x32>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
20000994:	4b05      	ldr	r3, [pc, #20]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
20000996:	699a      	ldr	r2, [r3, #24]
20000998:	687b      	ldr	r3, [r7, #4]
2000099a:	43d9      	mvns	r1, r3
2000099c:	4b03      	ldr	r3, [pc, #12]	; (200009ac <RCC_AHB3PeriphResetCmd+0x3c>)
2000099e:	400a      	ands	r2, r1
200009a0:	619a      	str	r2, [r3, #24]
}
200009a2:	46c0      	nop			; (mov r8, r8)
200009a4:	46bd      	mov	sp, r7
200009a6:	b002      	add	sp, #8
200009a8:	bd80      	pop	{r7, pc}
200009aa:	46c0      	nop			; (mov r8, r8)
200009ac:	40023800 	andmi	r3, r2, r0, lsl #16

200009b0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
200009b0:	b580      	push	{r7, lr}
200009b2:	b082      	sub	sp, #8
200009b4:	af00      	add	r7, sp, #0
200009b6:	6078      	str	r0, [r7, #4]
200009b8:	000a      	movs	r2, r1
200009ba:	1cfb      	adds	r3, r7, #3
200009bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200009be:	1cfb      	adds	r3, r7, #3
200009c0:	781b      	ldrb	r3, [r3, #0]
200009c2:	2b00      	cmp	r3, #0
200009c4:	d006      	beq.n	200009d4 <RCC_APB1PeriphResetCmd+0x24>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
200009c6:	4b09      	ldr	r3, [pc, #36]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009c8:	6a19      	ldr	r1, [r3, #32]
200009ca:	4b08      	ldr	r3, [pc, #32]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009cc:	687a      	ldr	r2, [r7, #4]
200009ce:	430a      	orrs	r2, r1
200009d0:	621a      	str	r2, [r3, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
200009d2:	e006      	b.n	200009e2 <RCC_APB1PeriphResetCmd+0x32>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
200009d4:	4b05      	ldr	r3, [pc, #20]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009d6:	6a1a      	ldr	r2, [r3, #32]
200009d8:	687b      	ldr	r3, [r7, #4]
200009da:	43d9      	mvns	r1, r3
200009dc:	4b03      	ldr	r3, [pc, #12]	; (200009ec <RCC_APB1PeriphResetCmd+0x3c>)
200009de:	400a      	ands	r2, r1
200009e0:	621a      	str	r2, [r3, #32]
}
200009e2:	46c0      	nop			; (mov r8, r8)
200009e4:	46bd      	mov	sp, r7
200009e6:	b002      	add	sp, #8
200009e8:	bd80      	pop	{r7, pc}
200009ea:	46c0      	nop			; (mov r8, r8)
200009ec:	40023800 	andmi	r3, r2, r0, lsl #16

200009f0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
200009f0:	b580      	push	{r7, lr}
200009f2:	b082      	sub	sp, #8
200009f4:	af00      	add	r7, sp, #0
200009f6:	6078      	str	r0, [r7, #4]
200009f8:	000a      	movs	r2, r1
200009fa:	1cfb      	adds	r3, r7, #3
200009fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200009fe:	1cfb      	adds	r3, r7, #3
20000a00:	781b      	ldrb	r3, [r3, #0]
20000a02:	2b00      	cmp	r3, #0
20000a04:	d006      	beq.n	20000a14 <RCC_APB2PeriphResetCmd+0x24>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
20000a06:	4b09      	ldr	r3, [pc, #36]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a08:	6a59      	ldr	r1, [r3, #36]	; 0x24
20000a0a:	4b08      	ldr	r3, [pc, #32]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a0c:	687a      	ldr	r2, [r7, #4]
20000a0e:	430a      	orrs	r2, r1
20000a10:	625a      	str	r2, [r3, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
20000a12:	e006      	b.n	20000a22 <RCC_APB2PeriphResetCmd+0x32>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
20000a14:	4b05      	ldr	r3, [pc, #20]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000a18:	687b      	ldr	r3, [r7, #4]
20000a1a:	43d9      	mvns	r1, r3
20000a1c:	4b03      	ldr	r3, [pc, #12]	; (20000a2c <RCC_APB2PeriphResetCmd+0x3c>)
20000a1e:	400a      	ands	r2, r1
20000a20:	625a      	str	r2, [r3, #36]	; 0x24
}
20000a22:	46c0      	nop			; (mov r8, r8)
20000a24:	46bd      	mov	sp, r7
20000a26:	b002      	add	sp, #8
20000a28:	bd80      	pop	{r7, pc}
20000a2a:	46c0      	nop			; (mov r8, r8)
20000a2c:	40023800 	andmi	r3, r2, r0, lsl #16

20000a30 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
20000a30:	b580      	push	{r7, lr}
20000a32:	b082      	sub	sp, #8
20000a34:	af00      	add	r7, sp, #0
20000a36:	6078      	str	r0, [r7, #4]
20000a38:	000a      	movs	r2, r1
20000a3a:	1cfb      	adds	r3, r7, #3
20000a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a3e:	1cfb      	adds	r3, r7, #3
20000a40:	781b      	ldrb	r3, [r3, #0]
20000a42:	2b00      	cmp	r3, #0
20000a44:	d006      	beq.n	20000a54 <RCC_AHB1PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
20000a46:	4b09      	ldr	r3, [pc, #36]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a48:	6d19      	ldr	r1, [r3, #80]	; 0x50
20000a4a:	4b08      	ldr	r3, [pc, #32]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a4c:	687a      	ldr	r2, [r7, #4]
20000a4e:	430a      	orrs	r2, r1
20000a50:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
20000a52:	e006      	b.n	20000a62 <RCC_AHB1PeriphClockLPModeCmd+0x32>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
20000a54:	4b05      	ldr	r3, [pc, #20]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20000a58:	687b      	ldr	r3, [r7, #4]
20000a5a:	43d9      	mvns	r1, r3
20000a5c:	4b03      	ldr	r3, [pc, #12]	; (20000a6c <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
20000a5e:	400a      	ands	r2, r1
20000a60:	651a      	str	r2, [r3, #80]	; 0x50
}
20000a62:	46c0      	nop			; (mov r8, r8)
20000a64:	46bd      	mov	sp, r7
20000a66:	b002      	add	sp, #8
20000a68:	bd80      	pop	{r7, pc}
20000a6a:	46c0      	nop			; (mov r8, r8)
20000a6c:	40023800 	andmi	r3, r2, r0, lsl #16

20000a70 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
20000a70:	b580      	push	{r7, lr}
20000a72:	b082      	sub	sp, #8
20000a74:	af00      	add	r7, sp, #0
20000a76:	6078      	str	r0, [r7, #4]
20000a78:	000a      	movs	r2, r1
20000a7a:	1cfb      	adds	r3, r7, #3
20000a7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000a7e:	1cfb      	adds	r3, r7, #3
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	2b00      	cmp	r3, #0
20000a84:	d006      	beq.n	20000a94 <RCC_AHB2PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
20000a86:	4b09      	ldr	r3, [pc, #36]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a88:	6d59      	ldr	r1, [r3, #84]	; 0x54
20000a8a:	4b08      	ldr	r3, [pc, #32]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a8c:	687a      	ldr	r2, [r7, #4]
20000a8e:	430a      	orrs	r2, r1
20000a90:	655a      	str	r2, [r3, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
20000a92:	e006      	b.n	20000aa2 <RCC_AHB2PeriphClockLPModeCmd+0x32>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
20000a94:	4b05      	ldr	r3, [pc, #20]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20000a98:	687b      	ldr	r3, [r7, #4]
20000a9a:	43d9      	mvns	r1, r3
20000a9c:	4b03      	ldr	r3, [pc, #12]	; (20000aac <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
20000a9e:	400a      	ands	r2, r1
20000aa0:	655a      	str	r2, [r3, #84]	; 0x54
}
20000aa2:	46c0      	nop			; (mov r8, r8)
20000aa4:	46bd      	mov	sp, r7
20000aa6:	b002      	add	sp, #8
20000aa8:	bd80      	pop	{r7, pc}
20000aaa:	46c0      	nop			; (mov r8, r8)
20000aac:	40023800 	andmi	r3, r2, r0, lsl #16

20000ab0 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
20000ab0:	b580      	push	{r7, lr}
20000ab2:	b082      	sub	sp, #8
20000ab4:	af00      	add	r7, sp, #0
20000ab6:	6078      	str	r0, [r7, #4]
20000ab8:	000a      	movs	r2, r1
20000aba:	1cfb      	adds	r3, r7, #3
20000abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000abe:	1cfb      	adds	r3, r7, #3
20000ac0:	781b      	ldrb	r3, [r3, #0]
20000ac2:	2b00      	cmp	r3, #0
20000ac4:	d006      	beq.n	20000ad4 <RCC_AHB3PeriphClockLPModeCmd+0x24>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
20000ac6:	4b09      	ldr	r3, [pc, #36]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ac8:	6d99      	ldr	r1, [r3, #88]	; 0x58
20000aca:	4b08      	ldr	r3, [pc, #32]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000acc:	687a      	ldr	r2, [r7, #4]
20000ace:	430a      	orrs	r2, r1
20000ad0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
20000ad2:	e006      	b.n	20000ae2 <RCC_AHB3PeriphClockLPModeCmd+0x32>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
20000ad4:	4b05      	ldr	r3, [pc, #20]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ad6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20000ad8:	687b      	ldr	r3, [r7, #4]
20000ada:	43d9      	mvns	r1, r3
20000adc:	4b03      	ldr	r3, [pc, #12]	; (20000aec <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
20000ade:	400a      	ands	r2, r1
20000ae0:	659a      	str	r2, [r3, #88]	; 0x58
}
20000ae2:	46c0      	nop			; (mov r8, r8)
20000ae4:	46bd      	mov	sp, r7
20000ae6:	b002      	add	sp, #8
20000ae8:	bd80      	pop	{r7, pc}
20000aea:	46c0      	nop			; (mov r8, r8)
20000aec:	40023800 	andmi	r3, r2, r0, lsl #16

20000af0 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
20000af0:	b580      	push	{r7, lr}
20000af2:	b082      	sub	sp, #8
20000af4:	af00      	add	r7, sp, #0
20000af6:	6078      	str	r0, [r7, #4]
20000af8:	000a      	movs	r2, r1
20000afa:	1cfb      	adds	r3, r7, #3
20000afc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000afe:	1cfb      	adds	r3, r7, #3
20000b00:	781b      	ldrb	r3, [r3, #0]
20000b02:	2b00      	cmp	r3, #0
20000b04:	d006      	beq.n	20000b14 <RCC_APB1PeriphClockLPModeCmd+0x24>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
20000b06:	4b09      	ldr	r3, [pc, #36]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b08:	6e19      	ldr	r1, [r3, #96]	; 0x60
20000b0a:	4b08      	ldr	r3, [pc, #32]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b0c:	687a      	ldr	r2, [r7, #4]
20000b0e:	430a      	orrs	r2, r1
20000b10:	661a      	str	r2, [r3, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
20000b12:	e006      	b.n	20000b22 <RCC_APB1PeriphClockLPModeCmd+0x32>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
20000b14:	4b05      	ldr	r3, [pc, #20]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
20000b18:	687b      	ldr	r3, [r7, #4]
20000b1a:	43d9      	mvns	r1, r3
20000b1c:	4b03      	ldr	r3, [pc, #12]	; (20000b2c <RCC_APB1PeriphClockLPModeCmd+0x3c>)
20000b1e:	400a      	ands	r2, r1
20000b20:	661a      	str	r2, [r3, #96]	; 0x60
}
20000b22:	46c0      	nop			; (mov r8, r8)
20000b24:	46bd      	mov	sp, r7
20000b26:	b002      	add	sp, #8
20000b28:	bd80      	pop	{r7, pc}
20000b2a:	46c0      	nop			; (mov r8, r8)
20000b2c:	40023800 	andmi	r3, r2, r0, lsl #16

20000b30 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
20000b30:	b580      	push	{r7, lr}
20000b32:	b082      	sub	sp, #8
20000b34:	af00      	add	r7, sp, #0
20000b36:	6078      	str	r0, [r7, #4]
20000b38:	000a      	movs	r2, r1
20000b3a:	1cfb      	adds	r3, r7, #3
20000b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b3e:	1cfb      	adds	r3, r7, #3
20000b40:	781b      	ldrb	r3, [r3, #0]
20000b42:	2b00      	cmp	r3, #0
20000b44:	d006      	beq.n	20000b54 <RCC_APB2PeriphClockLPModeCmd+0x24>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
20000b46:	4b09      	ldr	r3, [pc, #36]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b48:	6e59      	ldr	r1, [r3, #100]	; 0x64
20000b4a:	4b08      	ldr	r3, [pc, #32]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b4c:	687a      	ldr	r2, [r7, #4]
20000b4e:	430a      	orrs	r2, r1
20000b50:	665a      	str	r2, [r3, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
20000b52:	e006      	b.n	20000b62 <RCC_APB2PeriphClockLPModeCmd+0x32>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
20000b54:	4b05      	ldr	r3, [pc, #20]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
20000b58:	687b      	ldr	r3, [r7, #4]
20000b5a:	43d9      	mvns	r1, r3
20000b5c:	4b03      	ldr	r3, [pc, #12]	; (20000b6c <RCC_APB2PeriphClockLPModeCmd+0x3c>)
20000b5e:	400a      	ands	r2, r1
20000b60:	665a      	str	r2, [r3, #100]	; 0x64
}
20000b62:	46c0      	nop			; (mov r8, r8)
20000b64:	46bd      	mov	sp, r7
20000b66:	b002      	add	sp, #8
20000b68:	bd80      	pop	{r7, pc}
20000b6a:	46c0      	nop			; (mov r8, r8)
20000b6c:	40023800 	andmi	r3, r2, r0, lsl #16

20000b70 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
20000b70:	b580      	push	{r7, lr}
20000b72:	b082      	sub	sp, #8
20000b74:	af00      	add	r7, sp, #0
20000b76:	0002      	movs	r2, r0
20000b78:	1dfb      	adds	r3, r7, #7
20000b7a:	701a      	strb	r2, [r3, #0]
20000b7c:	1dbb      	adds	r3, r7, #6
20000b7e:	1c0a      	adds	r2, r1, #0
20000b80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
20000b82:	1dbb      	adds	r3, r7, #6
20000b84:	781b      	ldrb	r3, [r3, #0]
20000b86:	2b00      	cmp	r3, #0
20000b88:	d009      	beq.n	20000b9e <RCC_ITConfig+0x2e>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
20000b8a:	4b0c      	ldr	r3, [pc, #48]	; (20000bbc <RCC_ITConfig+0x4c>)
20000b8c:	781b      	ldrb	r3, [r3, #0]
20000b8e:	b2da      	uxtb	r2, r3
20000b90:	490a      	ldr	r1, [pc, #40]	; (20000bbc <RCC_ITConfig+0x4c>)
20000b92:	1dfb      	adds	r3, r7, #7
20000b94:	781b      	ldrb	r3, [r3, #0]
20000b96:	4313      	orrs	r3, r2
20000b98:	b2db      	uxtb	r3, r3
20000b9a:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
20000b9c:	e00a      	b.n	20000bb4 <RCC_ITConfig+0x44>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
20000b9e:	4b07      	ldr	r3, [pc, #28]	; (20000bbc <RCC_ITConfig+0x4c>)
20000ba0:	781b      	ldrb	r3, [r3, #0]
20000ba2:	b2db      	uxtb	r3, r3
20000ba4:	1dfa      	adds	r2, r7, #7
20000ba6:	7812      	ldrb	r2, [r2, #0]
20000ba8:	43d2      	mvns	r2, r2
20000baa:	b2d2      	uxtb	r2, r2
20000bac:	4903      	ldr	r1, [pc, #12]	; (20000bbc <RCC_ITConfig+0x4c>)
20000bae:	4013      	ands	r3, r2
20000bb0:	b2db      	uxtb	r3, r3
20000bb2:	700b      	strb	r3, [r1, #0]
}
20000bb4:	46c0      	nop			; (mov r8, r8)
20000bb6:	46bd      	mov	sp, r7
20000bb8:	b002      	add	sp, #8
20000bba:	bd80      	pop	{r7, pc}
20000bbc:	4002380d 	andmi	r3, r2, sp, lsl #16

20000bc0 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
20000bc0:	b580      	push	{r7, lr}
20000bc2:	b086      	sub	sp, #24
20000bc4:	af00      	add	r7, sp, #0
20000bc6:	0002      	movs	r2, r0
20000bc8:	1dfb      	adds	r3, r7, #7
20000bca:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0;
20000bcc:	2300      	movs	r3, #0
20000bce:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
20000bd0:	2300      	movs	r3, #0
20000bd2:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
20000bd4:	2313      	movs	r3, #19
20000bd6:	18fb      	adds	r3, r7, r3
20000bd8:	2200      	movs	r2, #0
20000bda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
20000bdc:	1dfb      	adds	r3, r7, #7
20000bde:	781b      	ldrb	r3, [r3, #0]
20000be0:	095b      	lsrs	r3, r3, #5
20000be2:	b2db      	uxtb	r3, r3
20000be4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
20000be6:	68fb      	ldr	r3, [r7, #12]
20000be8:	2b01      	cmp	r3, #1
20000bea:	d103      	bne.n	20000bf4 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
20000bec:	4b14      	ldr	r3, [pc, #80]	; (20000c40 <RCC_GetFlagStatus+0x80>)
20000bee:	681b      	ldr	r3, [r3, #0]
20000bf0:	617b      	str	r3, [r7, #20]
20000bf2:	e009      	b.n	20000c08 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
20000bf4:	68fb      	ldr	r3, [r7, #12]
20000bf6:	2b02      	cmp	r3, #2
20000bf8:	d103      	bne.n	20000c02 <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
20000bfa:	4b11      	ldr	r3, [pc, #68]	; (20000c40 <RCC_GetFlagStatus+0x80>)
20000bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20000bfe:	617b      	str	r3, [r7, #20]
20000c00:	e002      	b.n	20000c08 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
20000c02:	4b0f      	ldr	r3, [pc, #60]	; (20000c40 <RCC_GetFlagStatus+0x80>)
20000c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20000c06:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
20000c08:	1dfb      	adds	r3, r7, #7
20000c0a:	781b      	ldrb	r3, [r3, #0]
20000c0c:	221f      	movs	r2, #31
20000c0e:	4013      	ands	r3, r2
20000c10:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
20000c12:	697a      	ldr	r2, [r7, #20]
20000c14:	68fb      	ldr	r3, [r7, #12]
20000c16:	40da      	lsrs	r2, r3
20000c18:	0013      	movs	r3, r2
20000c1a:	2201      	movs	r2, #1
20000c1c:	4013      	ands	r3, r2
20000c1e:	d004      	beq.n	20000c2a <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
20000c20:	2313      	movs	r3, #19
20000c22:	18fb      	adds	r3, r7, r3
20000c24:	2201      	movs	r2, #1
20000c26:	701a      	strb	r2, [r3, #0]
20000c28:	e003      	b.n	20000c32 <RCC_GetFlagStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
20000c2a:	2313      	movs	r3, #19
20000c2c:	18fb      	adds	r3, r7, r3
20000c2e:	2200      	movs	r2, #0
20000c30:	701a      	strb	r2, [r3, #0]
  }
  /* Return the flag status */
  return bitstatus;
20000c32:	2313      	movs	r3, #19
20000c34:	18fb      	adds	r3, r7, r3
20000c36:	781b      	ldrb	r3, [r3, #0]
}
20000c38:	0018      	movs	r0, r3
20000c3a:	46bd      	mov	sp, r7
20000c3c:	b006      	add	sp, #24
20000c3e:	bd80      	pop	{r7, pc}
20000c40:	40023800 	andmi	r3, r2, r0, lsl #16

20000c44 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
20000c44:	b580      	push	{r7, lr}
20000c46:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
20000c48:	4b04      	ldr	r3, [pc, #16]	; (20000c5c <RCC_ClearFlag+0x18>)
20000c4a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
20000c4c:	4b03      	ldr	r3, [pc, #12]	; (20000c5c <RCC_ClearFlag+0x18>)
20000c4e:	2180      	movs	r1, #128	; 0x80
20000c50:	0449      	lsls	r1, r1, #17
20000c52:	430a      	orrs	r2, r1
20000c54:	675a      	str	r2, [r3, #116]	; 0x74
}
20000c56:	46c0      	nop			; (mov r8, r8)
20000c58:	46bd      	mov	sp, r7
20000c5a:	bd80      	pop	{r7, pc}
20000c5c:	40023800 	andmi	r3, r2, r0, lsl #16

20000c60 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
20000c60:	b580      	push	{r7, lr}
20000c62:	b084      	sub	sp, #16
20000c64:	af00      	add	r7, sp, #0
20000c66:	0002      	movs	r2, r0
20000c68:	1dfb      	adds	r3, r7, #7
20000c6a:	701a      	strb	r2, [r3, #0]
  ITStatus bitstatus = RESET;
20000c6c:	230f      	movs	r3, #15
20000c6e:	18fb      	adds	r3, r7, r3
20000c70:	2200      	movs	r2, #0
20000c72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
20000c74:	4b0a      	ldr	r3, [pc, #40]	; (20000ca0 <RCC_GetITStatus+0x40>)
20000c76:	68db      	ldr	r3, [r3, #12]
20000c78:	1dfa      	adds	r2, r7, #7
20000c7a:	7812      	ldrb	r2, [r2, #0]
20000c7c:	4013      	ands	r3, r2
20000c7e:	d004      	beq.n	20000c8a <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
20000c80:	230f      	movs	r3, #15
20000c82:	18fb      	adds	r3, r7, r3
20000c84:	2201      	movs	r2, #1
20000c86:	701a      	strb	r2, [r3, #0]
20000c88:	e003      	b.n	20000c92 <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
20000c8a:	230f      	movs	r3, #15
20000c8c:	18fb      	adds	r3, r7, r3
20000c8e:	2200      	movs	r2, #0
20000c90:	701a      	strb	r2, [r3, #0]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
20000c92:	230f      	movs	r3, #15
20000c94:	18fb      	adds	r3, r7, r3
20000c96:	781b      	ldrb	r3, [r3, #0]
}
20000c98:	0018      	movs	r0, r3
20000c9a:	46bd      	mov	sp, r7
20000c9c:	b004      	add	sp, #16
20000c9e:	bd80      	pop	{r7, pc}
20000ca0:	40023800 	andmi	r3, r2, r0, lsl #16

20000ca4 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
20000ca4:	b580      	push	{r7, lr}
20000ca6:	b082      	sub	sp, #8
20000ca8:	af00      	add	r7, sp, #0
20000caa:	0002      	movs	r2, r0
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
20000cb0:	4a03      	ldr	r2, [pc, #12]	; (20000cc0 <RCC_ClearITPendingBit+0x1c>)
20000cb2:	1dfb      	adds	r3, r7, #7
20000cb4:	781b      	ldrb	r3, [r3, #0]
20000cb6:	7013      	strb	r3, [r2, #0]
}
20000cb8:	46c0      	nop			; (mov r8, r8)
20000cba:	46bd      	mov	sp, r7
20000cbc:	b002      	add	sp, #8
20000cbe:	bd80      	pop	{r7, pc}
20000cc0:	4002380e 	andmi	r3, r2, lr, lsl #16

20000cc4 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
20000cc4:	b580      	push	{r7, lr}
20000cc6:	b082      	sub	sp, #8
20000cc8:	af00      	add	r7, sp, #0
20000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
20000ccc:	687b      	ldr	r3, [r7, #4]
20000cce:	4a4e      	ldr	r2, [pc, #312]	; (20000e08 <GPIO_DeInit+0x144>)
20000cd0:	4293      	cmp	r3, r2
20000cd2:	d108      	bne.n	20000ce6 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
20000cd4:	2101      	movs	r1, #1
20000cd6:	2001      	movs	r0, #1
20000cd8:	f7ff fe0a 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
20000cdc:	2100      	movs	r1, #0
20000cde:	2001      	movs	r0, #1
20000ce0:	f7ff fe06 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
20000ce4:	e08c      	b.n	20000e00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOB)
20000ce6:	687b      	ldr	r3, [r7, #4]
20000ce8:	4a48      	ldr	r2, [pc, #288]	; (20000e0c <GPIO_DeInit+0x148>)
20000cea:	4293      	cmp	r3, r2
20000cec:	d108      	bne.n	20000d00 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
20000cee:	2101      	movs	r1, #1
20000cf0:	2002      	movs	r0, #2
20000cf2:	f7ff fdfd 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
20000cf6:	2100      	movs	r1, #0
20000cf8:	2002      	movs	r0, #2
20000cfa:	f7ff fdf9 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000cfe:	e07f      	b.n	20000e00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOC)
20000d00:	687b      	ldr	r3, [r7, #4]
20000d02:	4a43      	ldr	r2, [pc, #268]	; (20000e10 <GPIO_DeInit+0x14c>)
20000d04:	4293      	cmp	r3, r2
20000d06:	d108      	bne.n	20000d1a <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
20000d08:	2101      	movs	r1, #1
20000d0a:	2004      	movs	r0, #4
20000d0c:	f7ff fdf0 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
20000d10:	2100      	movs	r1, #0
20000d12:	2004      	movs	r0, #4
20000d14:	f7ff fdec 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d18:	e072      	b.n	20000e00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOD)
20000d1a:	687b      	ldr	r3, [r7, #4]
20000d1c:	4a3d      	ldr	r2, [pc, #244]	; (20000e14 <GPIO_DeInit+0x150>)
20000d1e:	4293      	cmp	r3, r2
20000d20:	d108      	bne.n	20000d34 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
20000d22:	2101      	movs	r1, #1
20000d24:	2008      	movs	r0, #8
20000d26:	f7ff fde3 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
20000d2a:	2100      	movs	r1, #0
20000d2c:	2008      	movs	r0, #8
20000d2e:	f7ff fddf 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d32:	e065      	b.n	20000e00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOE)
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	4a38      	ldr	r2, [pc, #224]	; (20000e18 <GPIO_DeInit+0x154>)
20000d38:	4293      	cmp	r3, r2
20000d3a:	d108      	bne.n	20000d4e <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
20000d3c:	2101      	movs	r1, #1
20000d3e:	2010      	movs	r0, #16
20000d40:	f7ff fdd6 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
20000d44:	2100      	movs	r1, #0
20000d46:	2010      	movs	r0, #16
20000d48:	f7ff fdd2 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d4c:	e058      	b.n	20000e00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOF)
20000d4e:	687b      	ldr	r3, [r7, #4]
20000d50:	4a32      	ldr	r2, [pc, #200]	; (20000e1c <GPIO_DeInit+0x158>)
20000d52:	4293      	cmp	r3, r2
20000d54:	d108      	bne.n	20000d68 <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
20000d56:	2101      	movs	r1, #1
20000d58:	2020      	movs	r0, #32
20000d5a:	f7ff fdc9 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
20000d5e:	2100      	movs	r1, #0
20000d60:	2020      	movs	r0, #32
20000d62:	f7ff fdc5 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d66:	e04b      	b.n	20000e00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOG)
20000d68:	687b      	ldr	r3, [r7, #4]
20000d6a:	4a2d      	ldr	r2, [pc, #180]	; (20000e20 <GPIO_DeInit+0x15c>)
20000d6c:	4293      	cmp	r3, r2
20000d6e:	d108      	bne.n	20000d82 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
20000d70:	2101      	movs	r1, #1
20000d72:	2040      	movs	r0, #64	; 0x40
20000d74:	f7ff fdbc 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
20000d78:	2100      	movs	r1, #0
20000d7a:	2040      	movs	r0, #64	; 0x40
20000d7c:	f7ff fdb8 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d80:	e03e      	b.n	20000e00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOH)
20000d82:	687b      	ldr	r3, [r7, #4]
20000d84:	4a27      	ldr	r2, [pc, #156]	; (20000e24 <GPIO_DeInit+0x160>)
20000d86:	4293      	cmp	r3, r2
20000d88:	d108      	bne.n	20000d9c <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
20000d8a:	2101      	movs	r1, #1
20000d8c:	2080      	movs	r0, #128	; 0x80
20000d8e:	f7ff fdaf 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
20000d92:	2100      	movs	r1, #0
20000d94:	2080      	movs	r0, #128	; 0x80
20000d96:	f7ff fdab 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000d9a:	e031      	b.n	20000e00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOI)
20000d9c:	687b      	ldr	r3, [r7, #4]
20000d9e:	4a22      	ldr	r2, [pc, #136]	; (20000e28 <GPIO_DeInit+0x164>)
20000da0:	4293      	cmp	r3, r2
20000da2:	d10c      	bne.n	20000dbe <GPIO_DeInit+0xfa>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
20000da4:	2380      	movs	r3, #128	; 0x80
20000da6:	005b      	lsls	r3, r3, #1
20000da8:	2101      	movs	r1, #1
20000daa:	0018      	movs	r0, r3
20000dac:	f7ff fda0 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
20000db0:	2380      	movs	r3, #128	; 0x80
20000db2:	005b      	lsls	r3, r3, #1
20000db4:	2100      	movs	r1, #0
20000db6:	0018      	movs	r0, r3
20000db8:	f7ff fd9a 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000dbc:	e020      	b.n	20000e00 <GPIO_DeInit+0x13c>
  else if (GPIOx == GPIOJ)
20000dbe:	687b      	ldr	r3, [r7, #4]
20000dc0:	4a1a      	ldr	r2, [pc, #104]	; (20000e2c <GPIO_DeInit+0x168>)
20000dc2:	4293      	cmp	r3, r2
20000dc4:	d10c      	bne.n	20000de0 <GPIO_DeInit+0x11c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
20000dc6:	2380      	movs	r3, #128	; 0x80
20000dc8:	009b      	lsls	r3, r3, #2
20000dca:	2101      	movs	r1, #1
20000dcc:	0018      	movs	r0, r3
20000dce:	f7ff fd8f 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
20000dd2:	2380      	movs	r3, #128	; 0x80
20000dd4:	009b      	lsls	r3, r3, #2
20000dd6:	2100      	movs	r1, #0
20000dd8:	0018      	movs	r0, r3
20000dda:	f7ff fd89 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000dde:	e00f      	b.n	20000e00 <GPIO_DeInit+0x13c>
    if (GPIOx == GPIOK)
20000de0:	687b      	ldr	r3, [r7, #4]
20000de2:	4a13      	ldr	r2, [pc, #76]	; (20000e30 <GPIO_DeInit+0x16c>)
20000de4:	4293      	cmp	r3, r2
20000de6:	d10b      	bne.n	20000e00 <GPIO_DeInit+0x13c>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
20000de8:	2380      	movs	r3, #128	; 0x80
20000dea:	00db      	lsls	r3, r3, #3
20000dec:	2101      	movs	r1, #1
20000dee:	0018      	movs	r0, r3
20000df0:	f7ff fd7e 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
20000df4:	2380      	movs	r3, #128	; 0x80
20000df6:	00db      	lsls	r3, r3, #3
20000df8:	2100      	movs	r1, #0
20000dfa:	0018      	movs	r0, r3
20000dfc:	f7ff fd78 	bl	200008f0 <RCC_AHB1PeriphResetCmd>
}
20000e00:	46c0      	nop			; (mov r8, r8)
20000e02:	46bd      	mov	sp, r7
20000e04:	b002      	add	sp, #8
20000e06:	bd80      	pop	{r7, pc}
20000e08:	40020000 	andmi	r0, r2, r0
20000e0c:	40020400 	andmi	r0, r2, r0, lsl #8
20000e10:	40020800 	andmi	r0, r2, r0, lsl #16
20000e14:	40020c00 	andmi	r0, r2, r0, lsl #24
20000e18:	40021000 	andmi	r1, r2, r0
20000e1c:	40021400 	andmi	r1, r2, r0, lsl #8
20000e20:	40021800 	andmi	r1, r2, r0, lsl #16
20000e24:	40021c00 	andmi	r1, r2, r0, lsl #24
20000e28:	40022000 	andmi	r2, r2, r0
20000e2c:	40022400 	andmi	r2, r2, r0, lsl #8
20000e30:	40022800 	andmi	r2, r2, r0, lsl #16

20000e34 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
20000e34:	b580      	push	{r7, lr}
20000e36:	b086      	sub	sp, #24
20000e38:	af00      	add	r7, sp, #0
20000e3a:	6078      	str	r0, [r7, #4]
20000e3c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
20000e3e:	2300      	movs	r3, #0
20000e40:	617b      	str	r3, [r7, #20]
20000e42:	2300      	movs	r3, #0
20000e44:	613b      	str	r3, [r7, #16]
20000e46:	2300      	movs	r3, #0
20000e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000e4a:	2300      	movs	r3, #0
20000e4c:	617b      	str	r3, [r7, #20]
20000e4e:	e076      	b.n	20000f3e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
20000e50:	2201      	movs	r2, #1
20000e52:	697b      	ldr	r3, [r7, #20]
20000e54:	409a      	lsls	r2, r3
20000e56:	0013      	movs	r3, r2
20000e58:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
20000e5a:	683b      	ldr	r3, [r7, #0]
20000e5c:	681a      	ldr	r2, [r3, #0]
20000e5e:	693b      	ldr	r3, [r7, #16]
20000e60:	4013      	ands	r3, r2
20000e62:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
20000e64:	68fa      	ldr	r2, [r7, #12]
20000e66:	693b      	ldr	r3, [r7, #16]
20000e68:	429a      	cmp	r2, r3
20000e6a:	d165      	bne.n	20000f38 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
20000e6c:	687b      	ldr	r3, [r7, #4]
20000e6e:	681b      	ldr	r3, [r3, #0]
20000e70:	697a      	ldr	r2, [r7, #20]
20000e72:	0052      	lsls	r2, r2, #1
20000e74:	2103      	movs	r1, #3
20000e76:	4091      	lsls	r1, r2
20000e78:	000a      	movs	r2, r1
20000e7a:	43d2      	mvns	r2, r2
20000e7c:	401a      	ands	r2, r3
20000e7e:	687b      	ldr	r3, [r7, #4]
20000e80:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
20000e82:	687b      	ldr	r3, [r7, #4]
20000e84:	681a      	ldr	r2, [r3, #0]
20000e86:	683b      	ldr	r3, [r7, #0]
20000e88:	791b      	ldrb	r3, [r3, #4]
20000e8a:	0019      	movs	r1, r3
20000e8c:	697b      	ldr	r3, [r7, #20]
20000e8e:	005b      	lsls	r3, r3, #1
20000e90:	4099      	lsls	r1, r3
20000e92:	000b      	movs	r3, r1
20000e94:	431a      	orrs	r2, r3
20000e96:	687b      	ldr	r3, [r7, #4]
20000e98:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
20000e9a:	683b      	ldr	r3, [r7, #0]
20000e9c:	791b      	ldrb	r3, [r3, #4]
20000e9e:	2b01      	cmp	r3, #1
20000ea0:	d003      	beq.n	20000eaa <GPIO_Init+0x76>
20000ea2:	683b      	ldr	r3, [r7, #0]
20000ea4:	791b      	ldrb	r3, [r3, #4]
20000ea6:	2b02      	cmp	r3, #2
20000ea8:	d12e      	bne.n	20000f08 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
20000eaa:	687b      	ldr	r3, [r7, #4]
20000eac:	689b      	ldr	r3, [r3, #8]
20000eae:	697a      	ldr	r2, [r7, #20]
20000eb0:	0052      	lsls	r2, r2, #1
20000eb2:	2103      	movs	r1, #3
20000eb4:	4091      	lsls	r1, r2
20000eb6:	000a      	movs	r2, r1
20000eb8:	43d2      	mvns	r2, r2
20000eba:	401a      	ands	r2, r3
20000ebc:	687b      	ldr	r3, [r7, #4]
20000ebe:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
20000ec0:	687b      	ldr	r3, [r7, #4]
20000ec2:	689a      	ldr	r2, [r3, #8]
20000ec4:	683b      	ldr	r3, [r7, #0]
20000ec6:	795b      	ldrb	r3, [r3, #5]
20000ec8:	0019      	movs	r1, r3
20000eca:	697b      	ldr	r3, [r7, #20]
20000ecc:	005b      	lsls	r3, r3, #1
20000ece:	4099      	lsls	r1, r3
20000ed0:	000b      	movs	r3, r1
20000ed2:	431a      	orrs	r2, r3
20000ed4:	687b      	ldr	r3, [r7, #4]
20000ed6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
20000ed8:	687b      	ldr	r3, [r7, #4]
20000eda:	685b      	ldr	r3, [r3, #4]
20000edc:	697a      	ldr	r2, [r7, #20]
20000ede:	b292      	uxth	r2, r2
20000ee0:	0011      	movs	r1, r2
20000ee2:	2201      	movs	r2, #1
20000ee4:	408a      	lsls	r2, r1
20000ee6:	43d2      	mvns	r2, r2
20000ee8:	401a      	ands	r2, r3
20000eea:	687b      	ldr	r3, [r7, #4]
20000eec:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
20000eee:	687b      	ldr	r3, [r7, #4]
20000ef0:	685b      	ldr	r3, [r3, #4]
20000ef2:	683a      	ldr	r2, [r7, #0]
20000ef4:	7992      	ldrb	r2, [r2, #6]
20000ef6:	0011      	movs	r1, r2
20000ef8:	697a      	ldr	r2, [r7, #20]
20000efa:	b292      	uxth	r2, r2
20000efc:	4091      	lsls	r1, r2
20000efe:	000a      	movs	r2, r1
20000f00:	b292      	uxth	r2, r2
20000f02:	431a      	orrs	r2, r3
20000f04:	687b      	ldr	r3, [r7, #4]
20000f06:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
20000f08:	687b      	ldr	r3, [r7, #4]
20000f0a:	68db      	ldr	r3, [r3, #12]
20000f0c:	697a      	ldr	r2, [r7, #20]
20000f0e:	b292      	uxth	r2, r2
20000f10:	0052      	lsls	r2, r2, #1
20000f12:	2103      	movs	r1, #3
20000f14:	4091      	lsls	r1, r2
20000f16:	000a      	movs	r2, r1
20000f18:	43d2      	mvns	r2, r2
20000f1a:	401a      	ands	r2, r3
20000f1c:	687b      	ldr	r3, [r7, #4]
20000f1e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
20000f20:	687b      	ldr	r3, [r7, #4]
20000f22:	68da      	ldr	r2, [r3, #12]
20000f24:	683b      	ldr	r3, [r7, #0]
20000f26:	79db      	ldrb	r3, [r3, #7]
20000f28:	0019      	movs	r1, r3
20000f2a:	697b      	ldr	r3, [r7, #20]
20000f2c:	005b      	lsls	r3, r3, #1
20000f2e:	4099      	lsls	r1, r3
20000f30:	000b      	movs	r3, r1
20000f32:	431a      	orrs	r2, r3
20000f34:	687b      	ldr	r3, [r7, #4]
20000f36:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
20000f38:	697b      	ldr	r3, [r7, #20]
20000f3a:	3301      	adds	r3, #1
20000f3c:	617b      	str	r3, [r7, #20]
20000f3e:	697b      	ldr	r3, [r7, #20]
20000f40:	2b0f      	cmp	r3, #15
20000f42:	d985      	bls.n	20000e50 <GPIO_Init+0x1c>
    }
  }
}
20000f44:	46c0      	nop			; (mov r8, r8)
20000f46:	46bd      	mov	sp, r7
20000f48:	b006      	add	sp, #24
20000f4a:	bd80      	pop	{r7, pc}

20000f4c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
20000f4c:	b580      	push	{r7, lr}
20000f4e:	b082      	sub	sp, #8
20000f50:	af00      	add	r7, sp, #0
20000f52:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
20000f54:	687b      	ldr	r3, [r7, #4]
20000f56:	4a09      	ldr	r2, [pc, #36]	; (20000f7c <GPIO_StructInit+0x30>)
20000f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
20000f5a:	687b      	ldr	r3, [r7, #4]
20000f5c:	2200      	movs	r2, #0
20000f5e:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
20000f60:	687b      	ldr	r3, [r7, #4]
20000f62:	2200      	movs	r2, #0
20000f64:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
20000f66:	687b      	ldr	r3, [r7, #4]
20000f68:	2200      	movs	r2, #0
20000f6a:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
20000f6c:	687b      	ldr	r3, [r7, #4]
20000f6e:	2200      	movs	r2, #0
20000f70:	71da      	strb	r2, [r3, #7]
}
20000f72:	46c0      	nop			; (mov r8, r8)
20000f74:	46bd      	mov	sp, r7
20000f76:	b002      	add	sp, #8
20000f78:	bd80      	pop	{r7, pc}
20000f7a:	46c0      	nop			; (mov r8, r8)
20000f7c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20000f80 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000f80:	b580      	push	{r7, lr}
20000f82:	b084      	sub	sp, #16
20000f84:	af00      	add	r7, sp, #0
20000f86:	6078      	str	r0, [r7, #4]
20000f88:	000a      	movs	r2, r1
20000f8a:	1cbb      	adds	r3, r7, #2
20000f8c:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = 0x00010000;
20000f8e:	2380      	movs	r3, #128	; 0x80
20000f90:	025b      	lsls	r3, r3, #9
20000f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
20000f94:	1cbb      	adds	r3, r7, #2
20000f96:	881a      	ldrh	r2, [r3, #0]
20000f98:	68fb      	ldr	r3, [r7, #12]
20000f9a:	4313      	orrs	r3, r2
20000f9c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20000f9e:	68fa      	ldr	r2, [r7, #12]
20000fa0:	687b      	ldr	r3, [r7, #4]
20000fa2:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
20000fa4:	1cbb      	adds	r3, r7, #2
20000fa6:	881a      	ldrh	r2, [r3, #0]
20000fa8:	687b      	ldr	r3, [r7, #4]
20000faa:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
20000fac:	68fa      	ldr	r2, [r7, #12]
20000fae:	687b      	ldr	r3, [r7, #4]
20000fb0:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20000fb2:	687b      	ldr	r3, [r7, #4]
20000fb4:	69db      	ldr	r3, [r3, #28]
20000fb6:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
20000fb8:	687b      	ldr	r3, [r7, #4]
20000fba:	69db      	ldr	r3, [r3, #28]
20000fbc:	60fb      	str	r3, [r7, #12]
}
20000fbe:	46c0      	nop			; (mov r8, r8)
20000fc0:	46bd      	mov	sp, r7
20000fc2:	b004      	add	sp, #16
20000fc4:	bd80      	pop	{r7, pc}

20000fc6 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20000fc6:	b580      	push	{r7, lr}
20000fc8:	b084      	sub	sp, #16
20000fca:	af00      	add	r7, sp, #0
20000fcc:	6078      	str	r0, [r7, #4]
20000fce:	000a      	movs	r2, r1
20000fd0:	1cbb      	adds	r3, r7, #2
20000fd2:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
20000fd4:	230f      	movs	r3, #15
20000fd6:	18fb      	adds	r3, r7, r3
20000fd8:	2200      	movs	r2, #0
20000fda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
20000fdc:	687b      	ldr	r3, [r7, #4]
20000fde:	691b      	ldr	r3, [r3, #16]
20000fe0:	1cba      	adds	r2, r7, #2
20000fe2:	8812      	ldrh	r2, [r2, #0]
20000fe4:	4013      	ands	r3, r2
20000fe6:	d004      	beq.n	20000ff2 <GPIO_ReadInputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20000fe8:	230f      	movs	r3, #15
20000fea:	18fb      	adds	r3, r7, r3
20000fec:	2201      	movs	r2, #1
20000fee:	701a      	strb	r2, [r3, #0]
20000ff0:	e003      	b.n	20000ffa <GPIO_ReadInputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
20000ff2:	230f      	movs	r3, #15
20000ff4:	18fb      	adds	r3, r7, r3
20000ff6:	2200      	movs	r2, #0
20000ff8:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20000ffa:	230f      	movs	r3, #15
20000ffc:	18fb      	adds	r3, r7, r3
20000ffe:	781b      	ldrb	r3, [r3, #0]
}
20001000:	0018      	movs	r0, r3
20001002:	46bd      	mov	sp, r7
20001004:	b004      	add	sp, #16
20001006:	bd80      	pop	{r7, pc}

20001008 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
20001008:	b580      	push	{r7, lr}
2000100a:	b082      	sub	sp, #8
2000100c:	af00      	add	r7, sp, #0
2000100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
20001010:	687b      	ldr	r3, [r7, #4]
20001012:	691b      	ldr	r3, [r3, #16]
20001014:	b29b      	uxth	r3, r3
}
20001016:	0018      	movs	r0, r3
20001018:	46bd      	mov	sp, r7
2000101a:	b002      	add	sp, #8
2000101c:	bd80      	pop	{r7, pc}

2000101e <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000101e:	b580      	push	{r7, lr}
20001020:	b084      	sub	sp, #16
20001022:	af00      	add	r7, sp, #0
20001024:	6078      	str	r0, [r7, #4]
20001026:	000a      	movs	r2, r1
20001028:	1cbb      	adds	r3, r7, #2
2000102a:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
2000102c:	230f      	movs	r3, #15
2000102e:	18fb      	adds	r3, r7, r3
20001030:	2200      	movs	r2, #0
20001032:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
20001034:	687b      	ldr	r3, [r7, #4]
20001036:	695b      	ldr	r3, [r3, #20]
20001038:	1cba      	adds	r2, r7, #2
2000103a:	8812      	ldrh	r2, [r2, #0]
2000103c:	4013      	ands	r3, r2
2000103e:	d004      	beq.n	2000104a <GPIO_ReadOutputDataBit+0x2c>
  {
    bitstatus = (uint8_t)Bit_SET;
20001040:	230f      	movs	r3, #15
20001042:	18fb      	adds	r3, r7, r3
20001044:	2201      	movs	r2, #1
20001046:	701a      	strb	r2, [r3, #0]
20001048:	e003      	b.n	20001052 <GPIO_ReadOutputDataBit+0x34>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
2000104a:	230f      	movs	r3, #15
2000104c:	18fb      	adds	r3, r7, r3
2000104e:	2200      	movs	r2, #0
20001050:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
20001052:	230f      	movs	r3, #15
20001054:	18fb      	adds	r3, r7, r3
20001056:	781b      	ldrb	r3, [r3, #0]
}
20001058:	0018      	movs	r0, r3
2000105a:	46bd      	mov	sp, r7
2000105c:	b004      	add	sp, #16
2000105e:	bd80      	pop	{r7, pc}

20001060 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
20001060:	b580      	push	{r7, lr}
20001062:	b082      	sub	sp, #8
20001064:	af00      	add	r7, sp, #0
20001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
20001068:	687b      	ldr	r3, [r7, #4]
2000106a:	695b      	ldr	r3, [r3, #20]
2000106c:	b29b      	uxth	r3, r3
}
2000106e:	0018      	movs	r0, r3
20001070:	46bd      	mov	sp, r7
20001072:	b002      	add	sp, #8
20001074:	bd80      	pop	{r7, pc}

20001076 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001076:	b580      	push	{r7, lr}
20001078:	b082      	sub	sp, #8
2000107a:	af00      	add	r7, sp, #0
2000107c:	6078      	str	r0, [r7, #4]
2000107e:	000a      	movs	r2, r1
20001080:	1cbb      	adds	r3, r7, #2
20001082:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
20001084:	687b      	ldr	r3, [r7, #4]
20001086:	1cba      	adds	r2, r7, #2
20001088:	8812      	ldrh	r2, [r2, #0]
2000108a:	831a      	strh	r2, [r3, #24]
}
2000108c:	46c0      	nop			; (mov r8, r8)
2000108e:	46bd      	mov	sp, r7
20001090:	b002      	add	sp, #8
20001092:	bd80      	pop	{r7, pc}

20001094 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20001094:	b580      	push	{r7, lr}
20001096:	b082      	sub	sp, #8
20001098:	af00      	add	r7, sp, #0
2000109a:	6078      	str	r0, [r7, #4]
2000109c:	000a      	movs	r2, r1
2000109e:	1cbb      	adds	r3, r7, #2
200010a0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
200010a2:	687b      	ldr	r3, [r7, #4]
200010a4:	1cba      	adds	r2, r7, #2
200010a6:	8812      	ldrh	r2, [r2, #0]
200010a8:	835a      	strh	r2, [r3, #26]
}
200010aa:	46c0      	nop			; (mov r8, r8)
200010ac:	46bd      	mov	sp, r7
200010ae:	b002      	add	sp, #8
200010b0:	bd80      	pop	{r7, pc}

200010b2 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
200010b2:	b580      	push	{r7, lr}
200010b4:	b082      	sub	sp, #8
200010b6:	af00      	add	r7, sp, #0
200010b8:	6078      	str	r0, [r7, #4]
200010ba:	0008      	movs	r0, r1
200010bc:	0011      	movs	r1, r2
200010be:	1cbb      	adds	r3, r7, #2
200010c0:	1c02      	adds	r2, r0, #0
200010c2:	801a      	strh	r2, [r3, #0]
200010c4:	1c7b      	adds	r3, r7, #1
200010c6:	1c0a      	adds	r2, r1, #0
200010c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
200010ca:	1c7b      	adds	r3, r7, #1
200010cc:	781b      	ldrb	r3, [r3, #0]
200010ce:	2b00      	cmp	r3, #0
200010d0:	d004      	beq.n	200010dc <GPIO_WriteBit+0x2a>
  {
    GPIOx->BSRRL = GPIO_Pin;
200010d2:	687b      	ldr	r3, [r7, #4]
200010d4:	1cba      	adds	r2, r7, #2
200010d6:	8812      	ldrh	r2, [r2, #0]
200010d8:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
200010da:	e003      	b.n	200010e4 <GPIO_WriteBit+0x32>
    GPIOx->BSRRH = GPIO_Pin ;
200010dc:	687b      	ldr	r3, [r7, #4]
200010de:	1cba      	adds	r2, r7, #2
200010e0:	8812      	ldrh	r2, [r2, #0]
200010e2:	835a      	strh	r2, [r3, #26]
}
200010e4:	46c0      	nop			; (mov r8, r8)
200010e6:	46bd      	mov	sp, r7
200010e8:	b002      	add	sp, #8
200010ea:	bd80      	pop	{r7, pc}

200010ec <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
200010ec:	b580      	push	{r7, lr}
200010ee:	b082      	sub	sp, #8
200010f0:	af00      	add	r7, sp, #0
200010f2:	6078      	str	r0, [r7, #4]
200010f4:	000a      	movs	r2, r1
200010f6:	1cbb      	adds	r3, r7, #2
200010f8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
200010fa:	1cbb      	adds	r3, r7, #2
200010fc:	881a      	ldrh	r2, [r3, #0]
200010fe:	687b      	ldr	r3, [r7, #4]
20001100:	615a      	str	r2, [r3, #20]
}
20001102:	46c0      	nop			; (mov r8, r8)
20001104:	46bd      	mov	sp, r7
20001106:	b002      	add	sp, #8
20001108:	bd80      	pop	{r7, pc}

2000110a <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000110a:	b580      	push	{r7, lr}
2000110c:	b082      	sub	sp, #8
2000110e:	af00      	add	r7, sp, #0
20001110:	6078      	str	r0, [r7, #4]
20001112:	000a      	movs	r2, r1
20001114:	1cbb      	adds	r3, r7, #2
20001116:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	695a      	ldr	r2, [r3, #20]
2000111c:	1cbb      	adds	r3, r7, #2
2000111e:	881b      	ldrh	r3, [r3, #0]
20001120:	405a      	eors	r2, r3
20001122:	687b      	ldr	r3, [r7, #4]
20001124:	615a      	str	r2, [r3, #20]
}
20001126:	46c0      	nop			; (mov r8, r8)
20001128:	46bd      	mov	sp, r7
2000112a:	b002      	add	sp, #8
2000112c:	bd80      	pop	{r7, pc}

2000112e <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
2000112e:	b580      	push	{r7, lr}
20001130:	b084      	sub	sp, #16
20001132:	af00      	add	r7, sp, #0
20001134:	6078      	str	r0, [r7, #4]
20001136:	0008      	movs	r0, r1
20001138:	0011      	movs	r1, r2
2000113a:	1cbb      	adds	r3, r7, #2
2000113c:	1c02      	adds	r2, r0, #0
2000113e:	801a      	strh	r2, [r3, #0]
20001140:	1c7b      	adds	r3, r7, #1
20001142:	1c0a      	adds	r2, r1, #0
20001144:	701a      	strb	r2, [r3, #0]
  uint32_t temp = 0x00;
20001146:	2300      	movs	r3, #0
20001148:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
2000114a:	2300      	movs	r3, #0
2000114c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
2000114e:	1c7b      	adds	r3, r7, #1
20001150:	781a      	ldrb	r2, [r3, #0]
20001152:	1cbb      	adds	r3, r7, #2
20001154:	881b      	ldrh	r3, [r3, #0]
20001156:	2107      	movs	r1, #7
20001158:	400b      	ands	r3, r1
2000115a:	009b      	lsls	r3, r3, #2
2000115c:	409a      	lsls	r2, r3
2000115e:	0013      	movs	r3, r2
20001160:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
20001162:	1cbb      	adds	r3, r7, #2
20001164:	881b      	ldrh	r3, [r3, #0]
20001166:	08db      	lsrs	r3, r3, #3
20001168:	b29b      	uxth	r3, r3
2000116a:	001a      	movs	r2, r3
2000116c:	687b      	ldr	r3, [r7, #4]
2000116e:	3208      	adds	r2, #8
20001170:	0092      	lsls	r2, r2, #2
20001172:	58d3      	ldr	r3, [r2, r3]
20001174:	1cba      	adds	r2, r7, #2
20001176:	8812      	ldrh	r2, [r2, #0]
20001178:	2107      	movs	r1, #7
2000117a:	400a      	ands	r2, r1
2000117c:	0092      	lsls	r2, r2, #2
2000117e:	210f      	movs	r1, #15
20001180:	4091      	lsls	r1, r2
20001182:	000a      	movs	r2, r1
20001184:	43d2      	mvns	r2, r2
20001186:	1cb9      	adds	r1, r7, #2
20001188:	8809      	ldrh	r1, [r1, #0]
2000118a:	08c9      	lsrs	r1, r1, #3
2000118c:	b289      	uxth	r1, r1
2000118e:	0008      	movs	r0, r1
20001190:	401a      	ands	r2, r3
20001192:	0011      	movs	r1, r2
20001194:	687b      	ldr	r3, [r7, #4]
20001196:	0002      	movs	r2, r0
20001198:	3208      	adds	r2, #8
2000119a:	0092      	lsls	r2, r2, #2
2000119c:	50d1      	str	r1, [r2, r3]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
2000119e:	1cbb      	adds	r3, r7, #2
200011a0:	881b      	ldrh	r3, [r3, #0]
200011a2:	08db      	lsrs	r3, r3, #3
200011a4:	b29b      	uxth	r3, r3
200011a6:	001a      	movs	r2, r3
200011a8:	687b      	ldr	r3, [r7, #4]
200011aa:	3208      	adds	r2, #8
200011ac:	0092      	lsls	r2, r2, #2
200011ae:	58d3      	ldr	r3, [r2, r3]
200011b0:	68fa      	ldr	r2, [r7, #12]
200011b2:	4313      	orrs	r3, r2
200011b4:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
200011b6:	1cbb      	adds	r3, r7, #2
200011b8:	881b      	ldrh	r3, [r3, #0]
200011ba:	08db      	lsrs	r3, r3, #3
200011bc:	b29b      	uxth	r3, r3
200011be:	001a      	movs	r2, r3
200011c0:	687b      	ldr	r3, [r7, #4]
200011c2:	3208      	adds	r2, #8
200011c4:	0092      	lsls	r2, r2, #2
200011c6:	68b9      	ldr	r1, [r7, #8]
200011c8:	50d1      	str	r1, [r2, r3]
}
200011ca:	46c0      	nop			; (mov r8, r8)
200011cc:	46bd      	mov	sp, r7
200011ce:	b004      	add	sp, #16
200011d0:	bd80      	pop	{r7, pc}
200011d2:	46c0      	nop			; (mov r8, r8)

200011d4 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
200011d4:	b580      	push	{r7, lr}
200011d6:	b082      	sub	sp, #8
200011d8:	af00      	add	r7, sp, #0
200011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
200011dc:	687b      	ldr	r3, [r7, #4]
200011de:	4a10      	ldr	r2, [pc, #64]	; (20001220 <CAN_DeInit+0x4c>)
200011e0:	4293      	cmp	r3, r2
200011e2:	d10c      	bne.n	200011fe <CAN_DeInit+0x2a>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
200011e4:	2380      	movs	r3, #128	; 0x80
200011e6:	049b      	lsls	r3, r3, #18
200011e8:	2101      	movs	r1, #1
200011ea:	0018      	movs	r0, r3
200011ec:	f7ff fbe0 	bl	200009b0 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
200011f0:	2380      	movs	r3, #128	; 0x80
200011f2:	049b      	lsls	r3, r3, #18
200011f4:	2100      	movs	r1, #0
200011f6:	0018      	movs	r0, r3
200011f8:	f7ff fbda 	bl	200009b0 <RCC_APB1PeriphResetCmd>
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
200011fc:	e00b      	b.n	20001216 <CAN_DeInit+0x42>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
200011fe:	2380      	movs	r3, #128	; 0x80
20001200:	04db      	lsls	r3, r3, #19
20001202:	2101      	movs	r1, #1
20001204:	0018      	movs	r0, r3
20001206:	f7ff fbd3 	bl	200009b0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
2000120a:	2380      	movs	r3, #128	; 0x80
2000120c:	04db      	lsls	r3, r3, #19
2000120e:	2100      	movs	r1, #0
20001210:	0018      	movs	r0, r3
20001212:	f7ff fbcd 	bl	200009b0 <RCC_APB1PeriphResetCmd>
}
20001216:	46c0      	nop			; (mov r8, r8)
20001218:	46bd      	mov	sp, r7
2000121a:	b002      	add	sp, #8
2000121c:	bd80      	pop	{r7, pc}
2000121e:	46c0      	nop			; (mov r8, r8)
20001220:	40006400 	andmi	r6, r0, r0, lsl #8

20001224 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
20001224:	b580      	push	{r7, lr}
20001226:	b084      	sub	sp, #16
20001228:	af00      	add	r7, sp, #0
2000122a:	6078      	str	r0, [r7, #4]
2000122c:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
2000122e:	230f      	movs	r3, #15
20001230:	18fb      	adds	r3, r7, r3
20001232:	2200      	movs	r2, #0
20001234:	701a      	strb	r2, [r3, #0]
  uint32_t wait_ack = 0x00000000;
20001236:	2300      	movs	r3, #0
20001238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
2000123a:	687b      	ldr	r3, [r7, #4]
2000123c:	681b      	ldr	r3, [r3, #0]
2000123e:	2202      	movs	r2, #2
20001240:	4393      	bics	r3, r2
20001242:	001a      	movs	r2, r3
20001244:	687b      	ldr	r3, [r7, #4]
20001246:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
20001248:	687b      	ldr	r3, [r7, #4]
2000124a:	681b      	ldr	r3, [r3, #0]
2000124c:	2201      	movs	r2, #1
2000124e:	431a      	orrs	r2, r3
20001250:	687b      	ldr	r3, [r7, #4]
20001252:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
20001254:	e002      	b.n	2000125c <CAN_Init+0x38>
  {
    wait_ack++;
20001256:	68bb      	ldr	r3, [r7, #8]
20001258:	3301      	adds	r3, #1
2000125a:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
2000125c:	687b      	ldr	r3, [r7, #4]
2000125e:	685b      	ldr	r3, [r3, #4]
20001260:	2201      	movs	r2, #1
20001262:	4013      	ands	r3, r2
20001264:	2b01      	cmp	r3, #1
20001266:	d003      	beq.n	20001270 <CAN_Init+0x4c>
20001268:	68bb      	ldr	r3, [r7, #8]
2000126a:	4a5e      	ldr	r2, [pc, #376]	; (200013e4 <CAN_Init+0x1c0>)
2000126c:	4293      	cmp	r3, r2
2000126e:	d1f2      	bne.n	20001256 <CAN_Init+0x32>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
20001270:	687b      	ldr	r3, [r7, #4]
20001272:	685b      	ldr	r3, [r3, #4]
20001274:	2201      	movs	r2, #1
20001276:	4013      	ands	r3, r2
20001278:	2b01      	cmp	r3, #1
2000127a:	d004      	beq.n	20001286 <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
2000127c:	230f      	movs	r3, #15
2000127e:	18fb      	adds	r3, r7, r3
20001280:	2200      	movs	r2, #0
20001282:	701a      	strb	r2, [r3, #0]
20001284:	e0a6      	b.n	200013d4 <CAN_Init+0x1b0>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
20001286:	683b      	ldr	r3, [r7, #0]
20001288:	799b      	ldrb	r3, [r3, #6]
2000128a:	2b01      	cmp	r3, #1
2000128c:	d106      	bne.n	2000129c <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
2000128e:	687b      	ldr	r3, [r7, #4]
20001290:	681b      	ldr	r3, [r3, #0]
20001292:	2280      	movs	r2, #128	; 0x80
20001294:	431a      	orrs	r2, r3
20001296:	687b      	ldr	r3, [r7, #4]
20001298:	601a      	str	r2, [r3, #0]
2000129a:	e006      	b.n	200012aa <CAN_Init+0x86>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
2000129c:	687b      	ldr	r3, [r7, #4]
2000129e:	681b      	ldr	r3, [r3, #0]
200012a0:	2280      	movs	r2, #128	; 0x80
200012a2:	4393      	bics	r3, r2
200012a4:	001a      	movs	r2, r3
200012a6:	687b      	ldr	r3, [r7, #4]
200012a8:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
200012aa:	683b      	ldr	r3, [r7, #0]
200012ac:	79db      	ldrb	r3, [r3, #7]
200012ae:	2b01      	cmp	r3, #1
200012b0:	d106      	bne.n	200012c0 <CAN_Init+0x9c>
    {
      CANx->MCR |= CAN_MCR_ABOM;
200012b2:	687b      	ldr	r3, [r7, #4]
200012b4:	681b      	ldr	r3, [r3, #0]
200012b6:	2240      	movs	r2, #64	; 0x40
200012b8:	431a      	orrs	r2, r3
200012ba:	687b      	ldr	r3, [r7, #4]
200012bc:	601a      	str	r2, [r3, #0]
200012be:	e006      	b.n	200012ce <CAN_Init+0xaa>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
200012c0:	687b      	ldr	r3, [r7, #4]
200012c2:	681b      	ldr	r3, [r3, #0]
200012c4:	2240      	movs	r2, #64	; 0x40
200012c6:	4393      	bics	r3, r2
200012c8:	001a      	movs	r2, r3
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
200012ce:	683b      	ldr	r3, [r7, #0]
200012d0:	7a1b      	ldrb	r3, [r3, #8]
200012d2:	2b01      	cmp	r3, #1
200012d4:	d106      	bne.n	200012e4 <CAN_Init+0xc0>
    {
      CANx->MCR |= CAN_MCR_AWUM;
200012d6:	687b      	ldr	r3, [r7, #4]
200012d8:	681b      	ldr	r3, [r3, #0]
200012da:	2220      	movs	r2, #32
200012dc:	431a      	orrs	r2, r3
200012de:	687b      	ldr	r3, [r7, #4]
200012e0:	601a      	str	r2, [r3, #0]
200012e2:	e006      	b.n	200012f2 <CAN_Init+0xce>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
200012e4:	687b      	ldr	r3, [r7, #4]
200012e6:	681b      	ldr	r3, [r3, #0]
200012e8:	2220      	movs	r2, #32
200012ea:	4393      	bics	r3, r2
200012ec:	001a      	movs	r2, r3
200012ee:	687b      	ldr	r3, [r7, #4]
200012f0:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
200012f2:	683b      	ldr	r3, [r7, #0]
200012f4:	7a5b      	ldrb	r3, [r3, #9]
200012f6:	2b01      	cmp	r3, #1
200012f8:	d106      	bne.n	20001308 <CAN_Init+0xe4>
    {
      CANx->MCR |= CAN_MCR_NART;
200012fa:	687b      	ldr	r3, [r7, #4]
200012fc:	681b      	ldr	r3, [r3, #0]
200012fe:	2210      	movs	r2, #16
20001300:	431a      	orrs	r2, r3
20001302:	687b      	ldr	r3, [r7, #4]
20001304:	601a      	str	r2, [r3, #0]
20001306:	e006      	b.n	20001316 <CAN_Init+0xf2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
20001308:	687b      	ldr	r3, [r7, #4]
2000130a:	681b      	ldr	r3, [r3, #0]
2000130c:	2210      	movs	r2, #16
2000130e:	4393      	bics	r3, r2
20001310:	001a      	movs	r2, r3
20001312:	687b      	ldr	r3, [r7, #4]
20001314:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
20001316:	683b      	ldr	r3, [r7, #0]
20001318:	7a9b      	ldrb	r3, [r3, #10]
2000131a:	2b01      	cmp	r3, #1
2000131c:	d106      	bne.n	2000132c <CAN_Init+0x108>
    {
      CANx->MCR |= CAN_MCR_RFLM;
2000131e:	687b      	ldr	r3, [r7, #4]
20001320:	681b      	ldr	r3, [r3, #0]
20001322:	2208      	movs	r2, #8
20001324:	431a      	orrs	r2, r3
20001326:	687b      	ldr	r3, [r7, #4]
20001328:	601a      	str	r2, [r3, #0]
2000132a:	e006      	b.n	2000133a <CAN_Init+0x116>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
2000132c:	687b      	ldr	r3, [r7, #4]
2000132e:	681b      	ldr	r3, [r3, #0]
20001330:	2208      	movs	r2, #8
20001332:	4393      	bics	r3, r2
20001334:	001a      	movs	r2, r3
20001336:	687b      	ldr	r3, [r7, #4]
20001338:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
2000133a:	683b      	ldr	r3, [r7, #0]
2000133c:	7adb      	ldrb	r3, [r3, #11]
2000133e:	2b01      	cmp	r3, #1
20001340:	d106      	bne.n	20001350 <CAN_Init+0x12c>
    {
      CANx->MCR |= CAN_MCR_TXFP;
20001342:	687b      	ldr	r3, [r7, #4]
20001344:	681b      	ldr	r3, [r3, #0]
20001346:	2204      	movs	r2, #4
20001348:	431a      	orrs	r2, r3
2000134a:	687b      	ldr	r3, [r7, #4]
2000134c:	601a      	str	r2, [r3, #0]
2000134e:	e006      	b.n	2000135e <CAN_Init+0x13a>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
20001350:	687b      	ldr	r3, [r7, #4]
20001352:	681b      	ldr	r3, [r3, #0]
20001354:	2204      	movs	r2, #4
20001356:	4393      	bics	r3, r2
20001358:	001a      	movs	r2, r3
2000135a:	687b      	ldr	r3, [r7, #4]
2000135c:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
2000135e:	683b      	ldr	r3, [r7, #0]
20001360:	789b      	ldrb	r3, [r3, #2]
20001362:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
20001364:	683b      	ldr	r3, [r7, #0]
20001366:	78db      	ldrb	r3, [r3, #3]
20001368:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
2000136a:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
2000136c:	683b      	ldr	r3, [r7, #0]
2000136e:	791b      	ldrb	r3, [r3, #4]
20001370:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
20001372:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
20001374:	683b      	ldr	r3, [r7, #0]
20001376:	795b      	ldrb	r3, [r3, #5]
20001378:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
2000137a:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
2000137c:	683b      	ldr	r3, [r7, #0]
2000137e:	881b      	ldrh	r3, [r3, #0]
20001380:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
20001382:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
20001384:	687b      	ldr	r3, [r7, #4]
20001386:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
20001388:	687b      	ldr	r3, [r7, #4]
2000138a:	681b      	ldr	r3, [r3, #0]
2000138c:	2201      	movs	r2, #1
2000138e:	4393      	bics	r3, r2
20001390:	001a      	movs	r2, r3
20001392:	687b      	ldr	r3, [r7, #4]
20001394:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
20001396:	2300      	movs	r3, #0
20001398:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
2000139a:	e002      	b.n	200013a2 <CAN_Init+0x17e>
   {
     wait_ack++;
2000139c:	68bb      	ldr	r3, [r7, #8]
2000139e:	3301      	adds	r3, #1
200013a0:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
200013a2:	687b      	ldr	r3, [r7, #4]
200013a4:	685b      	ldr	r3, [r3, #4]
200013a6:	2201      	movs	r2, #1
200013a8:	4013      	ands	r3, r2
200013aa:	2b01      	cmp	r3, #1
200013ac:	d103      	bne.n	200013b6 <CAN_Init+0x192>
200013ae:	68bb      	ldr	r3, [r7, #8]
200013b0:	4a0c      	ldr	r2, [pc, #48]	; (200013e4 <CAN_Init+0x1c0>)
200013b2:	4293      	cmp	r3, r2
200013b4:	d1f2      	bne.n	2000139c <CAN_Init+0x178>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
200013b6:	687b      	ldr	r3, [r7, #4]
200013b8:	685b      	ldr	r3, [r3, #4]
200013ba:	2201      	movs	r2, #1
200013bc:	4013      	ands	r3, r2
200013be:	2b01      	cmp	r3, #1
200013c0:	d104      	bne.n	200013cc <CAN_Init+0x1a8>
    {
      InitStatus = CAN_InitStatus_Failed;
200013c2:	230f      	movs	r3, #15
200013c4:	18fb      	adds	r3, r7, r3
200013c6:	2200      	movs	r2, #0
200013c8:	701a      	strb	r2, [r3, #0]
200013ca:	e003      	b.n	200013d4 <CAN_Init+0x1b0>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
200013cc:	230f      	movs	r3, #15
200013ce:	18fb      	adds	r3, r7, r3
200013d0:	2201      	movs	r2, #1
200013d2:	701a      	strb	r2, [r3, #0]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
200013d4:	230f      	movs	r3, #15
200013d6:	18fb      	adds	r3, r7, r3
200013d8:	781b      	ldrb	r3, [r3, #0]
}
200013da:	0018      	movs	r0, r3
200013dc:	46bd      	mov	sp, r7
200013de:	b004      	add	sp, #16
200013e0:	bd80      	pop	{r7, pc}
200013e2:	46c0      	nop			; (mov r8, r8)
200013e4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

200013e8 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
200013e8:	b590      	push	{r4, r7, lr}
200013ea:	b085      	sub	sp, #20
200013ec:	af00      	add	r7, sp, #0
200013ee:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
200013f0:	2300      	movs	r3, #0
200013f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
200013f4:	687b      	ldr	r3, [r7, #4]
200013f6:	7a9b      	ldrb	r3, [r3, #10]
200013f8:	001a      	movs	r2, r3
200013fa:	2301      	movs	r3, #1
200013fc:	4093      	lsls	r3, r2
200013fe:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
20001400:	4a64      	ldr	r2, [pc, #400]	; (20001594 <CAN_FilterInit+0x1ac>)
20001402:	2380      	movs	r3, #128	; 0x80
20001404:	009b      	lsls	r3, r3, #2
20001406:	58d3      	ldr	r3, [r2, r3]
20001408:	4962      	ldr	r1, [pc, #392]	; (20001594 <CAN_FilterInit+0x1ac>)
2000140a:	2201      	movs	r2, #1
2000140c:	431a      	orrs	r2, r3
2000140e:	2380      	movs	r3, #128	; 0x80
20001410:	009b      	lsls	r3, r3, #2
20001412:	50ca      	str	r2, [r1, r3]

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
20001414:	4a5f      	ldr	r2, [pc, #380]	; (20001594 <CAN_FilterInit+0x1ac>)
20001416:	2387      	movs	r3, #135	; 0x87
20001418:	009b      	lsls	r3, r3, #2
2000141a:	58d3      	ldr	r3, [r2, r3]
2000141c:	68fa      	ldr	r2, [r7, #12]
2000141e:	43d2      	mvns	r2, r2
20001420:	495c      	ldr	r1, [pc, #368]	; (20001594 <CAN_FilterInit+0x1ac>)
20001422:	401a      	ands	r2, r3
20001424:	2387      	movs	r3, #135	; 0x87
20001426:	009b      	lsls	r3, r3, #2
20001428:	50ca      	str	r2, [r1, r3]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
2000142a:	687b      	ldr	r3, [r7, #4]
2000142c:	7b1b      	ldrb	r3, [r3, #12]
2000142e:	2b00      	cmp	r3, #0
20001430:	d12c      	bne.n	2000148c <CAN_FilterInit+0xa4>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
20001432:	4a58      	ldr	r2, [pc, #352]	; (20001594 <CAN_FilterInit+0x1ac>)
20001434:	2383      	movs	r3, #131	; 0x83
20001436:	009b      	lsls	r3, r3, #2
20001438:	58d3      	ldr	r3, [r2, r3]
2000143a:	68fa      	ldr	r2, [r7, #12]
2000143c:	43d2      	mvns	r2, r2
2000143e:	4955      	ldr	r1, [pc, #340]	; (20001594 <CAN_FilterInit+0x1ac>)
20001440:	401a      	ands	r2, r3
20001442:	2383      	movs	r3, #131	; 0x83
20001444:	009b      	lsls	r3, r3, #2
20001446:	50ca      	str	r2, [r1, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
20001448:	687b      	ldr	r3, [r7, #4]
2000144a:	88db      	ldrh	r3, [r3, #6]
2000144c:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
2000144e:	687a      	ldr	r2, [r7, #4]
20001450:	8852      	ldrh	r2, [r2, #2]
20001452:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20001454:	494f      	ldr	r1, [pc, #316]	; (20001594 <CAN_FilterInit+0x1ac>)
20001456:	687a      	ldr	r2, [r7, #4]
20001458:	7a92      	ldrb	r2, [r2, #10]
2000145a:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
2000145c:	4323      	orrs	r3, r4
2000145e:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
20001460:	0003      	movs	r3, r0
20001462:	3348      	adds	r3, #72	; 0x48
20001464:	00db      	lsls	r3, r3, #3
20001466:	505a      	str	r2, [r3, r1]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
20001468:	687b      	ldr	r3, [r7, #4]
2000146a:	889b      	ldrh	r3, [r3, #4]
2000146c:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
2000146e:	687a      	ldr	r2, [r7, #4]
20001470:	8812      	ldrh	r2, [r2, #0]
20001472:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20001474:	4947      	ldr	r1, [pc, #284]	; (20001594 <CAN_FilterInit+0x1ac>)
20001476:	687a      	ldr	r2, [r7, #4]
20001478:	7a92      	ldrb	r2, [r2, #10]
2000147a:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
2000147c:	4323      	orrs	r3, r4
2000147e:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
20001480:	0003      	movs	r3, r0
20001482:	3348      	adds	r3, #72	; 0x48
20001484:	00db      	lsls	r3, r3, #3
20001486:	18cb      	adds	r3, r1, r3
20001488:	3304      	adds	r3, #4
2000148a:	601a      	str	r2, [r3, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
2000148c:	687b      	ldr	r3, [r7, #4]
2000148e:	7b1b      	ldrb	r3, [r3, #12]
20001490:	2b01      	cmp	r3, #1
20001492:	d12b      	bne.n	200014ec <CAN_FilterInit+0x104>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
20001494:	4a3f      	ldr	r2, [pc, #252]	; (20001594 <CAN_FilterInit+0x1ac>)
20001496:	2383      	movs	r3, #131	; 0x83
20001498:	009b      	lsls	r3, r3, #2
2000149a:	58d2      	ldr	r2, [r2, r3]
2000149c:	493d      	ldr	r1, [pc, #244]	; (20001594 <CAN_FilterInit+0x1ac>)
2000149e:	68fb      	ldr	r3, [r7, #12]
200014a0:	431a      	orrs	r2, r3
200014a2:	2383      	movs	r3, #131	; 0x83
200014a4:	009b      	lsls	r3, r3, #2
200014a6:	50ca      	str	r2, [r1, r3]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
200014a8:	687b      	ldr	r3, [r7, #4]
200014aa:	881b      	ldrh	r3, [r3, #0]
200014ac:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
200014ae:	687a      	ldr	r2, [r7, #4]
200014b0:	8852      	ldrh	r2, [r2, #2]
200014b2:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
200014b4:	4937      	ldr	r1, [pc, #220]	; (20001594 <CAN_FilterInit+0x1ac>)
200014b6:	687a      	ldr	r2, [r7, #4]
200014b8:	7a92      	ldrb	r2, [r2, #10]
200014ba:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
200014bc:	4323      	orrs	r3, r4
200014be:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
200014c0:	0003      	movs	r3, r0
200014c2:	3348      	adds	r3, #72	; 0x48
200014c4:	00db      	lsls	r3, r3, #3
200014c6:	505a      	str	r2, [r3, r1]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
200014c8:	687b      	ldr	r3, [r7, #4]
200014ca:	889b      	ldrh	r3, [r3, #4]
200014cc:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
200014ce:	687a      	ldr	r2, [r7, #4]
200014d0:	88d2      	ldrh	r2, [r2, #6]
200014d2:	0014      	movs	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
200014d4:	492f      	ldr	r1, [pc, #188]	; (20001594 <CAN_FilterInit+0x1ac>)
200014d6:	687a      	ldr	r2, [r7, #4]
200014d8:	7a92      	ldrb	r2, [r2, #10]
200014da:	0010      	movs	r0, r2
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
200014dc:	4323      	orrs	r3, r4
200014de:	001a      	movs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
200014e0:	0003      	movs	r3, r0
200014e2:	3348      	adds	r3, #72	; 0x48
200014e4:	00db      	lsls	r3, r3, #3
200014e6:	18cb      	adds	r3, r1, r3
200014e8:	3304      	adds	r3, #4
200014ea:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
200014ec:	687b      	ldr	r3, [r7, #4]
200014ee:	7adb      	ldrb	r3, [r3, #11]
200014f0:	2b00      	cmp	r3, #0
200014f2:	d10b      	bne.n	2000150c <CAN_FilterInit+0x124>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
200014f4:	4a27      	ldr	r2, [pc, #156]	; (20001594 <CAN_FilterInit+0x1ac>)
200014f6:	2381      	movs	r3, #129	; 0x81
200014f8:	009b      	lsls	r3, r3, #2
200014fa:	58d3      	ldr	r3, [r2, r3]
200014fc:	68fa      	ldr	r2, [r7, #12]
200014fe:	43d2      	mvns	r2, r2
20001500:	4924      	ldr	r1, [pc, #144]	; (20001594 <CAN_FilterInit+0x1ac>)
20001502:	401a      	ands	r2, r3
20001504:	2381      	movs	r3, #129	; 0x81
20001506:	009b      	lsls	r3, r3, #2
20001508:	50ca      	str	r2, [r1, r3]
2000150a:	e009      	b.n	20001520 <CAN_FilterInit+0x138>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
2000150c:	4a21      	ldr	r2, [pc, #132]	; (20001594 <CAN_FilterInit+0x1ac>)
2000150e:	2381      	movs	r3, #129	; 0x81
20001510:	009b      	lsls	r3, r3, #2
20001512:	58d2      	ldr	r2, [r2, r3]
20001514:	491f      	ldr	r1, [pc, #124]	; (20001594 <CAN_FilterInit+0x1ac>)
20001516:	68fb      	ldr	r3, [r7, #12]
20001518:	431a      	orrs	r2, r3
2000151a:	2381      	movs	r3, #129	; 0x81
2000151c:	009b      	lsls	r3, r3, #2
2000151e:	50ca      	str	r2, [r1, r3]
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
20001520:	687b      	ldr	r3, [r7, #4]
20001522:	891b      	ldrh	r3, [r3, #8]
20001524:	2b00      	cmp	r3, #0
20001526:	d10a      	bne.n	2000153e <CAN_FilterInit+0x156>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
20001528:	4a1a      	ldr	r2, [pc, #104]	; (20001594 <CAN_FilterInit+0x1ac>)
2000152a:	2385      	movs	r3, #133	; 0x85
2000152c:	009b      	lsls	r3, r3, #2
2000152e:	58d3      	ldr	r3, [r2, r3]
20001530:	68fa      	ldr	r2, [r7, #12]
20001532:	43d2      	mvns	r2, r2
20001534:	4917      	ldr	r1, [pc, #92]	; (20001594 <CAN_FilterInit+0x1ac>)
20001536:	401a      	ands	r2, r3
20001538:	2385      	movs	r3, #133	; 0x85
2000153a:	009b      	lsls	r3, r3, #2
2000153c:	50ca      	str	r2, [r1, r3]
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
2000153e:	687b      	ldr	r3, [r7, #4]
20001540:	891b      	ldrh	r3, [r3, #8]
20001542:	2b01      	cmp	r3, #1
20001544:	d109      	bne.n	2000155a <CAN_FilterInit+0x172>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
20001546:	4a13      	ldr	r2, [pc, #76]	; (20001594 <CAN_FilterInit+0x1ac>)
20001548:	2385      	movs	r3, #133	; 0x85
2000154a:	009b      	lsls	r3, r3, #2
2000154c:	58d2      	ldr	r2, [r2, r3]
2000154e:	4911      	ldr	r1, [pc, #68]	; (20001594 <CAN_FilterInit+0x1ac>)
20001550:	68fb      	ldr	r3, [r7, #12]
20001552:	431a      	orrs	r2, r3
20001554:	2385      	movs	r3, #133	; 0x85
20001556:	009b      	lsls	r3, r3, #2
20001558:	50ca      	str	r2, [r1, r3]
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
2000155a:	687b      	ldr	r3, [r7, #4]
2000155c:	7b5b      	ldrb	r3, [r3, #13]
2000155e:	2b01      	cmp	r3, #1
20001560:	d109      	bne.n	20001576 <CAN_FilterInit+0x18e>
  {
    CAN1->FA1R |= filter_number_bit_pos;
20001562:	4a0c      	ldr	r2, [pc, #48]	; (20001594 <CAN_FilterInit+0x1ac>)
20001564:	2387      	movs	r3, #135	; 0x87
20001566:	009b      	lsls	r3, r3, #2
20001568:	58d2      	ldr	r2, [r2, r3]
2000156a:	490a      	ldr	r1, [pc, #40]	; (20001594 <CAN_FilterInit+0x1ac>)
2000156c:	68fb      	ldr	r3, [r7, #12]
2000156e:	431a      	orrs	r2, r3
20001570:	2387      	movs	r3, #135	; 0x87
20001572:	009b      	lsls	r3, r3, #2
20001574:	50ca      	str	r2, [r1, r3]
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
20001576:	4a07      	ldr	r2, [pc, #28]	; (20001594 <CAN_FilterInit+0x1ac>)
20001578:	2380      	movs	r3, #128	; 0x80
2000157a:	009b      	lsls	r3, r3, #2
2000157c:	58d3      	ldr	r3, [r2, r3]
2000157e:	4905      	ldr	r1, [pc, #20]	; (20001594 <CAN_FilterInit+0x1ac>)
20001580:	2201      	movs	r2, #1
20001582:	4393      	bics	r3, r2
20001584:	001a      	movs	r2, r3
20001586:	2380      	movs	r3, #128	; 0x80
20001588:	009b      	lsls	r3, r3, #2
2000158a:	50ca      	str	r2, [r1, r3]
}
2000158c:	46c0      	nop			; (mov r8, r8)
2000158e:	46bd      	mov	sp, r7
20001590:	b005      	add	sp, #20
20001592:	bd90      	pop	{r4, r7, pc}
20001594:	40006400 	andmi	r6, r0, r0, lsl #8

20001598 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
20001598:	b580      	push	{r7, lr}
2000159a:	b082      	sub	sp, #8
2000159c:	af00      	add	r7, sp, #0
2000159e:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
200015a0:	687b      	ldr	r3, [r7, #4]
200015a2:	2200      	movs	r2, #0
200015a4:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
200015a6:	687b      	ldr	r3, [r7, #4]
200015a8:	2200      	movs	r2, #0
200015aa:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
200015ac:	687b      	ldr	r3, [r7, #4]
200015ae:	2200      	movs	r2, #0
200015b0:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
200015b2:	687b      	ldr	r3, [r7, #4]
200015b4:	2200      	movs	r2, #0
200015b6:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
200015b8:	687b      	ldr	r3, [r7, #4]
200015ba:	2200      	movs	r2, #0
200015bc:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
200015be:	687b      	ldr	r3, [r7, #4]
200015c0:	2200      	movs	r2, #0
200015c2:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
200015c4:	687b      	ldr	r3, [r7, #4]
200015c6:	2200      	movs	r2, #0
200015c8:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
200015ca:	687b      	ldr	r3, [r7, #4]
200015cc:	2200      	movs	r2, #0
200015ce:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
200015d0:	687b      	ldr	r3, [r7, #4]
200015d2:	2203      	movs	r2, #3
200015d4:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
200015d6:	687b      	ldr	r3, [r7, #4]
200015d8:	2202      	movs	r2, #2
200015da:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
200015dc:	687b      	ldr	r3, [r7, #4]
200015de:	2201      	movs	r2, #1
200015e0:	801a      	strh	r2, [r3, #0]
}
200015e2:	46c0      	nop			; (mov r8, r8)
200015e4:	46bd      	mov	sp, r7
200015e6:	b002      	add	sp, #8
200015e8:	bd80      	pop	{r7, pc}

200015ea <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
200015ea:	b580      	push	{r7, lr}
200015ec:	b082      	sub	sp, #8
200015ee:	af00      	add	r7, sp, #0
200015f0:	0002      	movs	r2, r0
200015f2:	1dfb      	adds	r3, r7, #7
200015f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
200015f6:	4a17      	ldr	r2, [pc, #92]	; (20001654 <CAN_SlaveStartBank+0x6a>)
200015f8:	2380      	movs	r3, #128	; 0x80
200015fa:	009b      	lsls	r3, r3, #2
200015fc:	58d3      	ldr	r3, [r2, r3]
200015fe:	4915      	ldr	r1, [pc, #84]	; (20001654 <CAN_SlaveStartBank+0x6a>)
20001600:	2201      	movs	r2, #1
20001602:	431a      	orrs	r2, r3
20001604:	2380      	movs	r3, #128	; 0x80
20001606:	009b      	lsls	r3, r3, #2
20001608:	50ca      	str	r2, [r1, r3]
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
2000160a:	4a12      	ldr	r2, [pc, #72]	; (20001654 <CAN_SlaveStartBank+0x6a>)
2000160c:	2380      	movs	r3, #128	; 0x80
2000160e:	009b      	lsls	r3, r3, #2
20001610:	58d3      	ldr	r3, [r2, r3]
20001612:	4910      	ldr	r1, [pc, #64]	; (20001654 <CAN_SlaveStartBank+0x6a>)
20001614:	4a10      	ldr	r2, [pc, #64]	; (20001658 <CAN_SlaveStartBank+0x6e>)
20001616:	401a      	ands	r2, r3
20001618:	2380      	movs	r3, #128	; 0x80
2000161a:	009b      	lsls	r3, r3, #2
2000161c:	50ca      	str	r2, [r1, r3]
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
2000161e:	4a0d      	ldr	r2, [pc, #52]	; (20001654 <CAN_SlaveStartBank+0x6a>)
20001620:	2380      	movs	r3, #128	; 0x80
20001622:	009b      	lsls	r3, r3, #2
20001624:	58d2      	ldr	r2, [r2, r3]
20001626:	1dfb      	adds	r3, r7, #7
20001628:	781b      	ldrb	r3, [r3, #0]
2000162a:	021b      	lsls	r3, r3, #8
2000162c:	4909      	ldr	r1, [pc, #36]	; (20001654 <CAN_SlaveStartBank+0x6a>)
2000162e:	431a      	orrs	r2, r3
20001630:	2380      	movs	r3, #128	; 0x80
20001632:	009b      	lsls	r3, r3, #2
20001634:	50ca      	str	r2, [r1, r3]
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
20001636:	4a07      	ldr	r2, [pc, #28]	; (20001654 <CAN_SlaveStartBank+0x6a>)
20001638:	2380      	movs	r3, #128	; 0x80
2000163a:	009b      	lsls	r3, r3, #2
2000163c:	58d3      	ldr	r3, [r2, r3]
2000163e:	4905      	ldr	r1, [pc, #20]	; (20001654 <CAN_SlaveStartBank+0x6a>)
20001640:	2201      	movs	r2, #1
20001642:	4393      	bics	r3, r2
20001644:	001a      	movs	r2, r3
20001646:	2380      	movs	r3, #128	; 0x80
20001648:	009b      	lsls	r3, r3, #2
2000164a:	50ca      	str	r2, [r1, r3]
}
2000164c:	46c0      	nop			; (mov r8, r8)
2000164e:	46bd      	mov	sp, r7
20001650:	b002      	add	sp, #8
20001652:	bd80      	pop	{r7, pc}
20001654:	40006400 	andmi	r6, r0, r0, lsl #8
20001658:	ffffc0f1 			; <UNDEFINED> instruction: 0xffffc0f1

2000165c <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
2000165c:	b580      	push	{r7, lr}
2000165e:	b082      	sub	sp, #8
20001660:	af00      	add	r7, sp, #0
20001662:	6078      	str	r0, [r7, #4]
20001664:	000a      	movs	r2, r1
20001666:	1cfb      	adds	r3, r7, #3
20001668:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
2000166a:	1cfb      	adds	r3, r7, #3
2000166c:	781b      	ldrb	r3, [r3, #0]
2000166e:	2b00      	cmp	r3, #0
20001670:	d007      	beq.n	20001682 <CAN_DBGFreeze+0x26>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
20001672:	687b      	ldr	r3, [r7, #4]
20001674:	681b      	ldr	r3, [r3, #0]
20001676:	2280      	movs	r2, #128	; 0x80
20001678:	0252      	lsls	r2, r2, #9
2000167a:	431a      	orrs	r2, r3
2000167c:	687b      	ldr	r3, [r7, #4]
2000167e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
20001680:	e005      	b.n	2000168e <CAN_DBGFreeze+0x32>
    CANx->MCR &= ~MCR_DBF;
20001682:	687b      	ldr	r3, [r7, #4]
20001684:	681b      	ldr	r3, [r3, #0]
20001686:	4a04      	ldr	r2, [pc, #16]	; (20001698 <CAN_DBGFreeze+0x3c>)
20001688:	401a      	ands	r2, r3
2000168a:	687b      	ldr	r3, [r7, #4]
2000168c:	601a      	str	r2, [r3, #0]
}
2000168e:	46c0      	nop			; (mov r8, r8)
20001690:	46bd      	mov	sp, r7
20001692:	b002      	add	sp, #8
20001694:	bd80      	pop	{r7, pc}
20001696:	46c0      	nop			; (mov r8, r8)
20001698:	fffeffff 			; <UNDEFINED> instruction: 0xfffeffff

2000169c <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
2000169c:	b580      	push	{r7, lr}
2000169e:	b082      	sub	sp, #8
200016a0:	af00      	add	r7, sp, #0
200016a2:	6078      	str	r0, [r7, #4]
200016a4:	000a      	movs	r2, r1
200016a6:	1cfb      	adds	r3, r7, #3
200016a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
200016aa:	1cfb      	adds	r3, r7, #3
200016ac:	781b      	ldrb	r3, [r3, #0]
200016ae:	2b00      	cmp	r3, #0
200016b0:	d02a      	beq.n	20001708 <CAN_TTComModeCmd+0x6c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
200016b2:	687b      	ldr	r3, [r7, #4]
200016b4:	681b      	ldr	r3, [r3, #0]
200016b6:	2280      	movs	r2, #128	; 0x80
200016b8:	431a      	orrs	r2, r3
200016ba:	687b      	ldr	r3, [r7, #4]
200016bc:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
200016be:	687a      	ldr	r2, [r7, #4]
200016c0:	23c2      	movs	r3, #194	; 0xc2
200016c2:	005b      	lsls	r3, r3, #1
200016c4:	58d3      	ldr	r3, [r2, r3]
200016c6:	2280      	movs	r2, #128	; 0x80
200016c8:	0052      	lsls	r2, r2, #1
200016ca:	431a      	orrs	r2, r3
200016cc:	0011      	movs	r1, r2
200016ce:	687a      	ldr	r2, [r7, #4]
200016d0:	23c2      	movs	r3, #194	; 0xc2
200016d2:	005b      	lsls	r3, r3, #1
200016d4:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
200016d6:	687a      	ldr	r2, [r7, #4]
200016d8:	23ca      	movs	r3, #202	; 0xca
200016da:	005b      	lsls	r3, r3, #1
200016dc:	58d3      	ldr	r3, [r2, r3]
200016de:	2280      	movs	r2, #128	; 0x80
200016e0:	0052      	lsls	r2, r2, #1
200016e2:	431a      	orrs	r2, r3
200016e4:	0011      	movs	r1, r2
200016e6:	687a      	ldr	r2, [r7, #4]
200016e8:	23ca      	movs	r3, #202	; 0xca
200016ea:	005b      	lsls	r3, r3, #1
200016ec:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
200016ee:	687a      	ldr	r2, [r7, #4]
200016f0:	23d2      	movs	r3, #210	; 0xd2
200016f2:	005b      	lsls	r3, r3, #1
200016f4:	58d3      	ldr	r3, [r2, r3]
200016f6:	2280      	movs	r2, #128	; 0x80
200016f8:	0052      	lsls	r2, r2, #1
200016fa:	431a      	orrs	r2, r3
200016fc:	0011      	movs	r1, r2
200016fe:	687a      	ldr	r2, [r7, #4]
20001700:	23d2      	movs	r3, #210	; 0xd2
20001702:	005b      	lsls	r3, r3, #1
20001704:	50d1      	str	r1, [r2, r3]
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
20001706:	e027      	b.n	20001758 <CAN_TTComModeCmd+0xbc>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
20001708:	687b      	ldr	r3, [r7, #4]
2000170a:	681b      	ldr	r3, [r3, #0]
2000170c:	2280      	movs	r2, #128	; 0x80
2000170e:	4393      	bics	r3, r2
20001710:	001a      	movs	r2, r3
20001712:	687b      	ldr	r3, [r7, #4]
20001714:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
20001716:	687a      	ldr	r2, [r7, #4]
20001718:	23c2      	movs	r3, #194	; 0xc2
2000171a:	005b      	lsls	r3, r3, #1
2000171c:	58d3      	ldr	r3, [r2, r3]
2000171e:	4a10      	ldr	r2, [pc, #64]	; (20001760 <CAN_TTComModeCmd+0xc4>)
20001720:	4013      	ands	r3, r2
20001722:	0019      	movs	r1, r3
20001724:	687a      	ldr	r2, [r7, #4]
20001726:	23c2      	movs	r3, #194	; 0xc2
20001728:	005b      	lsls	r3, r3, #1
2000172a:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
2000172c:	687a      	ldr	r2, [r7, #4]
2000172e:	23ca      	movs	r3, #202	; 0xca
20001730:	005b      	lsls	r3, r3, #1
20001732:	58d3      	ldr	r3, [r2, r3]
20001734:	4a0a      	ldr	r2, [pc, #40]	; (20001760 <CAN_TTComModeCmd+0xc4>)
20001736:	4013      	ands	r3, r2
20001738:	0019      	movs	r1, r3
2000173a:	687a      	ldr	r2, [r7, #4]
2000173c:	23ca      	movs	r3, #202	; 0xca
2000173e:	005b      	lsls	r3, r3, #1
20001740:	50d1      	str	r1, [r2, r3]
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
20001742:	687a      	ldr	r2, [r7, #4]
20001744:	23d2      	movs	r3, #210	; 0xd2
20001746:	005b      	lsls	r3, r3, #1
20001748:	58d3      	ldr	r3, [r2, r3]
2000174a:	4a05      	ldr	r2, [pc, #20]	; (20001760 <CAN_TTComModeCmd+0xc4>)
2000174c:	4013      	ands	r3, r2
2000174e:	0019      	movs	r1, r3
20001750:	687a      	ldr	r2, [r7, #4]
20001752:	23d2      	movs	r3, #210	; 0xd2
20001754:	005b      	lsls	r3, r3, #1
20001756:	50d1      	str	r1, [r2, r3]
}
20001758:	46c0      	nop			; (mov r8, r8)
2000175a:	46bd      	mov	sp, r7
2000175c:	b002      	add	sp, #8
2000175e:	bd80      	pop	{r7, pc}
20001760:	fffffeff 			; <UNDEFINED> instruction: 0xfffffeff

20001764 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
20001764:	b590      	push	{r4, r7, lr}
20001766:	b085      	sub	sp, #20
20001768:	af00      	add	r7, sp, #0
2000176a:	6078      	str	r0, [r7, #4]
2000176c:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
2000176e:	230f      	movs	r3, #15
20001770:	18fb      	adds	r3, r7, r3
20001772:	2200      	movs	r2, #0
20001774:	701a      	strb	r2, [r3, #0]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
20001776:	687b      	ldr	r3, [r7, #4]
20001778:	689a      	ldr	r2, [r3, #8]
2000177a:	2380      	movs	r3, #128	; 0x80
2000177c:	04db      	lsls	r3, r3, #19
2000177e:	401a      	ands	r2, r3
20001780:	2380      	movs	r3, #128	; 0x80
20001782:	04db      	lsls	r3, r3, #19
20001784:	429a      	cmp	r2, r3
20001786:	d104      	bne.n	20001792 <CAN_Transmit+0x2e>
  {
    transmit_mailbox = 0;
20001788:	230f      	movs	r3, #15
2000178a:	18fb      	adds	r3, r7, r3
2000178c:	2200      	movs	r2, #0
2000178e:	701a      	strb	r2, [r3, #0]
20001790:	e01f      	b.n	200017d2 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
20001792:	687b      	ldr	r3, [r7, #4]
20001794:	689a      	ldr	r2, [r3, #8]
20001796:	2380      	movs	r3, #128	; 0x80
20001798:	051b      	lsls	r3, r3, #20
2000179a:	401a      	ands	r2, r3
2000179c:	2380      	movs	r3, #128	; 0x80
2000179e:	051b      	lsls	r3, r3, #20
200017a0:	429a      	cmp	r2, r3
200017a2:	d104      	bne.n	200017ae <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 1;
200017a4:	230f      	movs	r3, #15
200017a6:	18fb      	adds	r3, r7, r3
200017a8:	2201      	movs	r2, #1
200017aa:	701a      	strb	r2, [r3, #0]
200017ac:	e011      	b.n	200017d2 <CAN_Transmit+0x6e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
200017ae:	687b      	ldr	r3, [r7, #4]
200017b0:	689a      	ldr	r2, [r3, #8]
200017b2:	2380      	movs	r3, #128	; 0x80
200017b4:	055b      	lsls	r3, r3, #21
200017b6:	401a      	ands	r2, r3
200017b8:	2380      	movs	r3, #128	; 0x80
200017ba:	055b      	lsls	r3, r3, #21
200017bc:	429a      	cmp	r2, r3
200017be:	d104      	bne.n	200017ca <CAN_Transmit+0x66>
  {
    transmit_mailbox = 2;
200017c0:	230f      	movs	r3, #15
200017c2:	18fb      	adds	r3, r7, r3
200017c4:	2202      	movs	r2, #2
200017c6:	701a      	strb	r2, [r3, #0]
200017c8:	e003      	b.n	200017d2 <CAN_Transmit+0x6e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
200017ca:	230f      	movs	r3, #15
200017cc:	18fb      	adds	r3, r7, r3
200017ce:	2204      	movs	r2, #4
200017d0:	701a      	strb	r2, [r3, #0]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
200017d2:	230f      	movs	r3, #15
200017d4:	18fb      	adds	r3, r7, r3
200017d6:	781b      	ldrb	r3, [r3, #0]
200017d8:	2b04      	cmp	r3, #4
200017da:	d100      	bne.n	200017de <CAN_Transmit+0x7a>
200017dc:	e0ac      	b.n	20001938 <CAN_Transmit+0x1d4>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
200017de:	210f      	movs	r1, #15
200017e0:	187b      	adds	r3, r7, r1
200017e2:	781a      	ldrb	r2, [r3, #0]
200017e4:	687b      	ldr	r3, [r7, #4]
200017e6:	3218      	adds	r2, #24
200017e8:	0112      	lsls	r2, r2, #4
200017ea:	58d3      	ldr	r3, [r2, r3]
200017ec:	187a      	adds	r2, r7, r1
200017ee:	7812      	ldrb	r2, [r2, #0]
200017f0:	2101      	movs	r1, #1
200017f2:	4019      	ands	r1, r3
200017f4:	687b      	ldr	r3, [r7, #4]
200017f6:	3218      	adds	r2, #24
200017f8:	0112      	lsls	r2, r2, #4
200017fa:	50d1      	str	r1, [r2, r3]
    if (TxMessage->IDE == CAN_Id_Standard)
200017fc:	683b      	ldr	r3, [r7, #0]
200017fe:	7a1b      	ldrb	r3, [r3, #8]
20001800:	2b00      	cmp	r3, #0
20001802:	d114      	bne.n	2000182e <CAN_Transmit+0xca>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
20001804:	200f      	movs	r0, #15
20001806:	183b      	adds	r3, r7, r0
20001808:	781a      	ldrb	r2, [r3, #0]
2000180a:	687b      	ldr	r3, [r7, #4]
2000180c:	3218      	adds	r2, #24
2000180e:	0112      	lsls	r2, r2, #4
20001810:	58d1      	ldr	r1, [r2, r3]
20001812:	683b      	ldr	r3, [r7, #0]
20001814:	681b      	ldr	r3, [r3, #0]
20001816:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
20001818:	683a      	ldr	r2, [r7, #0]
2000181a:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
2000181c:	4313      	orrs	r3, r2
2000181e:	183a      	adds	r2, r7, r0
20001820:	7812      	ldrb	r2, [r2, #0]
20001822:	4319      	orrs	r1, r3
20001824:	687b      	ldr	r3, [r7, #4]
20001826:	3218      	adds	r2, #24
20001828:	0112      	lsls	r2, r2, #4
2000182a:	50d1      	str	r1, [r2, r3]
2000182c:	e016      	b.n	2000185c <CAN_Transmit+0xf8>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
2000182e:	200f      	movs	r0, #15
20001830:	183b      	adds	r3, r7, r0
20001832:	781a      	ldrb	r2, [r3, #0]
20001834:	687b      	ldr	r3, [r7, #4]
20001836:	3218      	adds	r2, #24
20001838:	0112      	lsls	r2, r2, #4
2000183a:	58d1      	ldr	r1, [r2, r3]
2000183c:	683b      	ldr	r3, [r7, #0]
2000183e:	685b      	ldr	r3, [r3, #4]
20001840:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
20001842:	683a      	ldr	r2, [r7, #0]
20001844:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
20001846:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
20001848:	683a      	ldr	r2, [r7, #0]
2000184a:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
2000184c:	4313      	orrs	r3, r2
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
2000184e:	183a      	adds	r2, r7, r0
20001850:	7812      	ldrb	r2, [r2, #0]
20001852:	4319      	orrs	r1, r3
20001854:	687b      	ldr	r3, [r7, #4]
20001856:	3218      	adds	r2, #24
20001858:	0112      	lsls	r2, r2, #4
2000185a:	50d1      	str	r1, [r2, r3]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
2000185c:	683b      	ldr	r3, [r7, #0]
2000185e:	7a9b      	ldrb	r3, [r3, #10]
20001860:	220f      	movs	r2, #15
20001862:	4013      	ands	r3, r2
20001864:	b2da      	uxtb	r2, r3
20001866:	683b      	ldr	r3, [r7, #0]
20001868:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
2000186a:	240f      	movs	r4, #15
2000186c:	193b      	adds	r3, r7, r4
2000186e:	781b      	ldrb	r3, [r3, #0]
20001870:	687a      	ldr	r2, [r7, #4]
20001872:	3318      	adds	r3, #24
20001874:	011b      	lsls	r3, r3, #4
20001876:	18d3      	adds	r3, r2, r3
20001878:	3304      	adds	r3, #4
2000187a:	681a      	ldr	r2, [r3, #0]
2000187c:	193b      	adds	r3, r7, r4
2000187e:	781b      	ldrb	r3, [r3, #0]
20001880:	210f      	movs	r1, #15
20001882:	438a      	bics	r2, r1
20001884:	6879      	ldr	r1, [r7, #4]
20001886:	3318      	adds	r3, #24
20001888:	011b      	lsls	r3, r3, #4
2000188a:	18cb      	adds	r3, r1, r3
2000188c:	3304      	adds	r3, #4
2000188e:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
20001890:	193b      	adds	r3, r7, r4
20001892:	781b      	ldrb	r3, [r3, #0]
20001894:	687a      	ldr	r2, [r7, #4]
20001896:	3318      	adds	r3, #24
20001898:	011b      	lsls	r3, r3, #4
2000189a:	18d3      	adds	r3, r2, r3
2000189c:	3304      	adds	r3, #4
2000189e:	681a      	ldr	r2, [r3, #0]
200018a0:	683b      	ldr	r3, [r7, #0]
200018a2:	7a9b      	ldrb	r3, [r3, #10]
200018a4:	0019      	movs	r1, r3
200018a6:	193b      	adds	r3, r7, r4
200018a8:	781b      	ldrb	r3, [r3, #0]
200018aa:	430a      	orrs	r2, r1
200018ac:	6879      	ldr	r1, [r7, #4]
200018ae:	3318      	adds	r3, #24
200018b0:	011b      	lsls	r3, r3, #4
200018b2:	18cb      	adds	r3, r1, r3
200018b4:	3304      	adds	r3, #4
200018b6:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
200018b8:	683b      	ldr	r3, [r7, #0]
200018ba:	7b9b      	ldrb	r3, [r3, #14]
200018bc:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
200018be:	683b      	ldr	r3, [r7, #0]
200018c0:	7b5b      	ldrb	r3, [r3, #13]
200018c2:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
200018c4:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
200018c6:	683b      	ldr	r3, [r7, #0]
200018c8:	7b1b      	ldrb	r3, [r3, #12]
200018ca:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
200018cc:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[0]));
200018ce:	683a      	ldr	r2, [r7, #0]
200018d0:	7ad2      	ldrb	r2, [r2, #11]
200018d2:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
200018d4:	193a      	adds	r2, r7, r4
200018d6:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
200018d8:	4303      	orrs	r3, r0
200018da:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
200018dc:	6878      	ldr	r0, [r7, #4]
200018de:	23c4      	movs	r3, #196	; 0xc4
200018e0:	005b      	lsls	r3, r3, #1
200018e2:	0109      	lsls	r1, r1, #4
200018e4:	1841      	adds	r1, r0, r1
200018e6:	18cb      	adds	r3, r1, r3
200018e8:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
200018ea:	683b      	ldr	r3, [r7, #0]
200018ec:	7c9b      	ldrb	r3, [r3, #18]
200018ee:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
200018f0:	683b      	ldr	r3, [r7, #0]
200018f2:	7c5b      	ldrb	r3, [r3, #17]
200018f4:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
200018f6:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
200018f8:	683b      	ldr	r3, [r7, #0]
200018fa:	7c1b      	ldrb	r3, [r3, #16]
200018fc:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
200018fe:	4313      	orrs	r3, r2
                                             ((uint32_t)TxMessage->Data[4]));
20001900:	683a      	ldr	r2, [r7, #0]
20001902:	7bd2      	ldrb	r2, [r2, #15]
20001904:	0010      	movs	r0, r2
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
20001906:	193a      	adds	r2, r7, r4
20001908:	7811      	ldrb	r1, [r2, #0]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
2000190a:	4303      	orrs	r3, r0
2000190c:	001a      	movs	r2, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
2000190e:	6878      	ldr	r0, [r7, #4]
20001910:	23c6      	movs	r3, #198	; 0xc6
20001912:	005b      	lsls	r3, r3, #1
20001914:	0109      	lsls	r1, r1, #4
20001916:	1841      	adds	r1, r0, r1
20001918:	18cb      	adds	r3, r1, r3
2000191a:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
2000191c:	193b      	adds	r3, r7, r4
2000191e:	781a      	ldrb	r2, [r3, #0]
20001920:	687b      	ldr	r3, [r7, #4]
20001922:	3218      	adds	r2, #24
20001924:	0112      	lsls	r2, r2, #4
20001926:	58d3      	ldr	r3, [r2, r3]
20001928:	193a      	adds	r2, r7, r4
2000192a:	7812      	ldrb	r2, [r2, #0]
2000192c:	2101      	movs	r1, #1
2000192e:	4319      	orrs	r1, r3
20001930:	687b      	ldr	r3, [r7, #4]
20001932:	3218      	adds	r2, #24
20001934:	0112      	lsls	r2, r2, #4
20001936:	50d1      	str	r1, [r2, r3]
  }
  return transmit_mailbox;
20001938:	230f      	movs	r3, #15
2000193a:	18fb      	adds	r3, r7, r3
2000193c:	781b      	ldrb	r3, [r3, #0]
}
2000193e:	0018      	movs	r0, r3
20001940:	46bd      	mov	sp, r7
20001942:	b005      	add	sp, #20
20001944:	bd90      	pop	{r4, r7, pc}

20001946 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
20001946:	b580      	push	{r7, lr}
20001948:	b084      	sub	sp, #16
2000194a:	af00      	add	r7, sp, #0
2000194c:	6078      	str	r0, [r7, #4]
2000194e:	000a      	movs	r2, r1
20001950:	1cfb      	adds	r3, r7, #3
20001952:	701a      	strb	r2, [r3, #0]
  uint32_t state = 0;
20001954:	2300      	movs	r3, #0
20001956:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
20001958:	1cfb      	adds	r3, r7, #3
2000195a:	781b      	ldrb	r3, [r3, #0]
2000195c:	2b01      	cmp	r3, #1
2000195e:	d009      	beq.n	20001974 <CAN_TransmitStatus+0x2e>
20001960:	2b02      	cmp	r3, #2
20001962:	d00d      	beq.n	20001980 <CAN_TransmitStatus+0x3a>
20001964:	2b00      	cmp	r3, #0
20001966:	d111      	bne.n	2000198c <CAN_TransmitStatus+0x46>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
20001968:	687b      	ldr	r3, [r7, #4]
2000196a:	689b      	ldr	r3, [r3, #8]
2000196c:	4a25      	ldr	r2, [pc, #148]	; (20001a04 <CAN_TransmitStatus+0xbe>)
2000196e:	4013      	ands	r3, r2
20001970:	60fb      	str	r3, [r7, #12]
      break;
20001972:	e00e      	b.n	20001992 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
20001974:	687b      	ldr	r3, [r7, #4]
20001976:	689b      	ldr	r3, [r3, #8]
20001978:	4a23      	ldr	r2, [pc, #140]	; (20001a08 <CAN_TransmitStatus+0xc2>)
2000197a:	4013      	ands	r3, r2
2000197c:	60fb      	str	r3, [r7, #12]
      break;
2000197e:	e008      	b.n	20001992 <CAN_TransmitStatus+0x4c>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
20001980:	687b      	ldr	r3, [r7, #4]
20001982:	689b      	ldr	r3, [r3, #8]
20001984:	4a21      	ldr	r2, [pc, #132]	; (20001a0c <CAN_TransmitStatus+0xc6>)
20001986:	4013      	ands	r3, r2
20001988:	60fb      	str	r3, [r7, #12]
      break;
2000198a:	e002      	b.n	20001992 <CAN_TransmitStatus+0x4c>
    default:
      state = CAN_TxStatus_Failed;
2000198c:	2300      	movs	r3, #0
2000198e:	60fb      	str	r3, [r7, #12]
      break;
20001990:	46c0      	nop			; (mov r8, r8)
  }
  switch (state)
20001992:	68fb      	ldr	r3, [r7, #12]
20001994:	4a1e      	ldr	r2, [pc, #120]	; (20001a10 <CAN_TransmitStatus+0xca>)
20001996:	4293      	cmp	r3, r2
20001998:	d01b      	beq.n	200019d2 <CAN_TransmitStatus+0x8c>
2000199a:	4a1d      	ldr	r2, [pc, #116]	; (20001a10 <CAN_TransmitStatus+0xca>)
2000199c:	4293      	cmp	r3, r2
2000199e:	d808      	bhi.n	200019b2 <CAN_TransmitStatus+0x6c>
200019a0:	4a1c      	ldr	r2, [pc, #112]	; (20001a14 <CAN_TransmitStatus+0xce>)
200019a2:	4293      	cmp	r3, r2
200019a4:	d012      	beq.n	200019cc <CAN_TransmitStatus+0x86>
200019a6:	4a17      	ldr	r2, [pc, #92]	; (20001a04 <CAN_TransmitStatus+0xbe>)
200019a8:	4293      	cmp	r3, r2
200019aa:	d018      	beq.n	200019de <CAN_TransmitStatus+0x98>
200019ac:	2b00      	cmp	r3, #0
200019ae:	d00a      	beq.n	200019c6 <CAN_TransmitStatus+0x80>
200019b0:	e01e      	b.n	200019f0 <CAN_TransmitStatus+0xaa>
200019b2:	4a19      	ldr	r2, [pc, #100]	; (20001a18 <CAN_TransmitStatus+0xd2>)
200019b4:	4293      	cmp	r3, r2
200019b6:	d00f      	beq.n	200019d8 <CAN_TransmitStatus+0x92>
200019b8:	4a14      	ldr	r2, [pc, #80]	; (20001a0c <CAN_TransmitStatus+0xc6>)
200019ba:	4293      	cmp	r3, r2
200019bc:	d015      	beq.n	200019ea <CAN_TransmitStatus+0xa4>
200019be:	4a12      	ldr	r2, [pc, #72]	; (20001a08 <CAN_TransmitStatus+0xc2>)
200019c0:	4293      	cmp	r3, r2
200019c2:	d00f      	beq.n	200019e4 <CAN_TransmitStatus+0x9e>
200019c4:	e014      	b.n	200019f0 <CAN_TransmitStatus+0xaa>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
200019c6:	2302      	movs	r3, #2
200019c8:	60fb      	str	r3, [r7, #12]
      break;
200019ca:	e014      	b.n	200019f6 <CAN_TransmitStatus+0xb0>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
200019cc:	2300      	movs	r3, #0
200019ce:	60fb      	str	r3, [r7, #12]
      break;
200019d0:	e011      	b.n	200019f6 <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
200019d2:	2300      	movs	r3, #0
200019d4:	60fb      	str	r3, [r7, #12]
      break;
200019d6:	e00e      	b.n	200019f6 <CAN_TransmitStatus+0xb0>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
200019d8:	2300      	movs	r3, #0
200019da:	60fb      	str	r3, [r7, #12]
      break;
200019dc:	e00b      	b.n	200019f6 <CAN_TransmitStatus+0xb0>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
200019de:	2301      	movs	r3, #1
200019e0:	60fb      	str	r3, [r7, #12]
      break;
200019e2:	e008      	b.n	200019f6 <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
200019e4:	2301      	movs	r3, #1
200019e6:	60fb      	str	r3, [r7, #12]
      break;
200019e8:	e005      	b.n	200019f6 <CAN_TransmitStatus+0xb0>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
200019ea:	2301      	movs	r3, #1
200019ec:	60fb      	str	r3, [r7, #12]
      break;
200019ee:	e002      	b.n	200019f6 <CAN_TransmitStatus+0xb0>
    default: state = CAN_TxStatus_Failed;
200019f0:	2300      	movs	r3, #0
200019f2:	60fb      	str	r3, [r7, #12]
      break;
200019f4:	46c0      	nop			; (mov r8, r8)
  }
  return (uint8_t) state;
200019f6:	68fb      	ldr	r3, [r7, #12]
200019f8:	b2db      	uxtb	r3, r3
}
200019fa:	0018      	movs	r0, r3
200019fc:	46bd      	mov	sp, r7
200019fe:	b004      	add	sp, #16
20001a00:	bd80      	pop	{r7, pc}
20001a02:	46c0      	nop			; (mov r8, r8)
20001a04:	04000003 	streq	r0, [r0], #-3
20001a08:	08000300 	stmdaeq	r0, {r8, r9}
20001a0c:	10030000 	andne	r0, r3, r0
20001a10:	08000100 	stmdaeq	r0, {r8}
20001a14:	04000001 	streq	r0, [r0], #-1
20001a18:	10010000 	andne	r0, r1, r0

20001a1c <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
20001a1c:	b580      	push	{r7, lr}
20001a1e:	b082      	sub	sp, #8
20001a20:	af00      	add	r7, sp, #0
20001a22:	6078      	str	r0, [r7, #4]
20001a24:	000a      	movs	r2, r1
20001a26:	1cfb      	adds	r3, r7, #3
20001a28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
20001a2a:	1cfb      	adds	r3, r7, #3
20001a2c:	781b      	ldrb	r3, [r3, #0]
20001a2e:	2b01      	cmp	r3, #1
20001a30:	d00b      	beq.n	20001a4a <CAN_CancelTransmit+0x2e>
20001a32:	2b02      	cmp	r3, #2
20001a34:	d011      	beq.n	20001a5a <CAN_CancelTransmit+0x3e>
20001a36:	2b00      	cmp	r3, #0
20001a38:	d000      	beq.n	20001a3c <CAN_CancelTransmit+0x20>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
20001a3a:	e016      	b.n	20001a6a <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
20001a3c:	687b      	ldr	r3, [r7, #4]
20001a3e:	689b      	ldr	r3, [r3, #8]
20001a40:	2280      	movs	r2, #128	; 0x80
20001a42:	431a      	orrs	r2, r3
20001a44:	687b      	ldr	r3, [r7, #4]
20001a46:	609a      	str	r2, [r3, #8]
      break;
20001a48:	e00f      	b.n	20001a6a <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
20001a4a:	687b      	ldr	r3, [r7, #4]
20001a4c:	689b      	ldr	r3, [r3, #8]
20001a4e:	2280      	movs	r2, #128	; 0x80
20001a50:	0212      	lsls	r2, r2, #8
20001a52:	431a      	orrs	r2, r3
20001a54:	687b      	ldr	r3, [r7, #4]
20001a56:	609a      	str	r2, [r3, #8]
      break;
20001a58:	e007      	b.n	20001a6a <CAN_CancelTransmit+0x4e>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
20001a5a:	687b      	ldr	r3, [r7, #4]
20001a5c:	689b      	ldr	r3, [r3, #8]
20001a5e:	2280      	movs	r2, #128	; 0x80
20001a60:	0412      	lsls	r2, r2, #16
20001a62:	431a      	orrs	r2, r3
20001a64:	687b      	ldr	r3, [r7, #4]
20001a66:	609a      	str	r2, [r3, #8]
      break;
20001a68:	46c0      	nop			; (mov r8, r8)
  }
}
20001a6a:	46c0      	nop			; (mov r8, r8)
20001a6c:	46bd      	mov	sp, r7
20001a6e:	b002      	add	sp, #8
20001a70:	bd80      	pop	{r7, pc}

20001a72 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
20001a72:	b580      	push	{r7, lr}
20001a74:	b084      	sub	sp, #16
20001a76:	af00      	add	r7, sp, #0
20001a78:	60f8      	str	r0, [r7, #12]
20001a7a:	607a      	str	r2, [r7, #4]
20001a7c:	200b      	movs	r0, #11
20001a7e:	183b      	adds	r3, r7, r0
20001a80:	1c0a      	adds	r2, r1, #0
20001a82:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
20001a84:	183b      	adds	r3, r7, r0
20001a86:	781a      	ldrb	r2, [r3, #0]
20001a88:	68fb      	ldr	r3, [r7, #12]
20001a8a:	321b      	adds	r2, #27
20001a8c:	0112      	lsls	r2, r2, #4
20001a8e:	58d3      	ldr	r3, [r2, r3]
20001a90:	b2db      	uxtb	r3, r3
20001a92:	2204      	movs	r2, #4
20001a94:	4013      	ands	r3, r2
20001a96:	b2da      	uxtb	r2, r3
20001a98:	687b      	ldr	r3, [r7, #4]
20001a9a:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
20001a9c:	687b      	ldr	r3, [r7, #4]
20001a9e:	7a1b      	ldrb	r3, [r3, #8]
20001aa0:	2b00      	cmp	r3, #0
20001aa2:	d10c      	bne.n	20001abe <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
20001aa4:	230b      	movs	r3, #11
20001aa6:	18fb      	adds	r3, r7, r3
20001aa8:	781a      	ldrb	r2, [r3, #0]
20001aaa:	68fb      	ldr	r3, [r7, #12]
20001aac:	321b      	adds	r2, #27
20001aae:	0112      	lsls	r2, r2, #4
20001ab0:	58d3      	ldr	r3, [r2, r3]
20001ab2:	0d5b      	lsrs	r3, r3, #21
20001ab4:	055b      	lsls	r3, r3, #21
20001ab6:	0d5a      	lsrs	r2, r3, #21
20001ab8:	687b      	ldr	r3, [r7, #4]
20001aba:	601a      	str	r2, [r3, #0]
20001abc:	e00b      	b.n	20001ad6 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
20001abe:	230b      	movs	r3, #11
20001ac0:	18fb      	adds	r3, r7, r3
20001ac2:	781a      	ldrb	r2, [r3, #0]
20001ac4:	68fb      	ldr	r3, [r7, #12]
20001ac6:	321b      	adds	r2, #27
20001ac8:	0112      	lsls	r2, r2, #4
20001aca:	58d3      	ldr	r3, [r2, r3]
20001acc:	08db      	lsrs	r3, r3, #3
20001ace:	00db      	lsls	r3, r3, #3
20001ad0:	08da      	lsrs	r2, r3, #3
20001ad2:	687b      	ldr	r3, [r7, #4]
20001ad4:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
20001ad6:	210b      	movs	r1, #11
20001ad8:	187b      	adds	r3, r7, r1
20001ada:	781a      	ldrb	r2, [r3, #0]
20001adc:	68fb      	ldr	r3, [r7, #12]
20001ade:	321b      	adds	r2, #27
20001ae0:	0112      	lsls	r2, r2, #4
20001ae2:	58d3      	ldr	r3, [r2, r3]
20001ae4:	b2db      	uxtb	r3, r3
20001ae6:	2202      	movs	r2, #2
20001ae8:	4013      	ands	r3, r2
20001aea:	b2da      	uxtb	r2, r3
20001aec:	687b      	ldr	r3, [r7, #4]
20001aee:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
20001af0:	187b      	adds	r3, r7, r1
20001af2:	781b      	ldrb	r3, [r3, #0]
20001af4:	68fa      	ldr	r2, [r7, #12]
20001af6:	331b      	adds	r3, #27
20001af8:	011b      	lsls	r3, r3, #4
20001afa:	18d3      	adds	r3, r2, r3
20001afc:	3304      	adds	r3, #4
20001afe:	681b      	ldr	r3, [r3, #0]
20001b00:	b2db      	uxtb	r3, r3
20001b02:	220f      	movs	r2, #15
20001b04:	4013      	ands	r3, r2
20001b06:	b2da      	uxtb	r2, r3
20001b08:	687b      	ldr	r3, [r7, #4]
20001b0a:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
20001b0c:	0008      	movs	r0, r1
20001b0e:	183b      	adds	r3, r7, r0
20001b10:	781b      	ldrb	r3, [r3, #0]
20001b12:	68fa      	ldr	r2, [r7, #12]
20001b14:	331b      	adds	r3, #27
20001b16:	011b      	lsls	r3, r3, #4
20001b18:	18d3      	adds	r3, r2, r3
20001b1a:	3304      	adds	r3, #4
20001b1c:	681b      	ldr	r3, [r3, #0]
20001b1e:	0a1b      	lsrs	r3, r3, #8
20001b20:	b2da      	uxtb	r2, r3
20001b22:	687b      	ldr	r3, [r7, #4]
20001b24:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
20001b26:	183b      	adds	r3, r7, r0
20001b28:	781a      	ldrb	r2, [r3, #0]
20001b2a:	68f9      	ldr	r1, [r7, #12]
20001b2c:	23dc      	movs	r3, #220	; 0xdc
20001b2e:	005b      	lsls	r3, r3, #1
20001b30:	0112      	lsls	r2, r2, #4
20001b32:	188a      	adds	r2, r1, r2
20001b34:	18d3      	adds	r3, r2, r3
20001b36:	681b      	ldr	r3, [r3, #0]
20001b38:	b2da      	uxtb	r2, r3
20001b3a:	687b      	ldr	r3, [r7, #4]
20001b3c:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
20001b3e:	183b      	adds	r3, r7, r0
20001b40:	781a      	ldrb	r2, [r3, #0]
20001b42:	68f9      	ldr	r1, [r7, #12]
20001b44:	23dc      	movs	r3, #220	; 0xdc
20001b46:	005b      	lsls	r3, r3, #1
20001b48:	0112      	lsls	r2, r2, #4
20001b4a:	188a      	adds	r2, r1, r2
20001b4c:	18d3      	adds	r3, r2, r3
20001b4e:	681b      	ldr	r3, [r3, #0]
20001b50:	0a1b      	lsrs	r3, r3, #8
20001b52:	b2da      	uxtb	r2, r3
20001b54:	687b      	ldr	r3, [r7, #4]
20001b56:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
20001b58:	183b      	adds	r3, r7, r0
20001b5a:	781a      	ldrb	r2, [r3, #0]
20001b5c:	68f9      	ldr	r1, [r7, #12]
20001b5e:	23dc      	movs	r3, #220	; 0xdc
20001b60:	005b      	lsls	r3, r3, #1
20001b62:	0112      	lsls	r2, r2, #4
20001b64:	188a      	adds	r2, r1, r2
20001b66:	18d3      	adds	r3, r2, r3
20001b68:	681b      	ldr	r3, [r3, #0]
20001b6a:	0c1b      	lsrs	r3, r3, #16
20001b6c:	b2da      	uxtb	r2, r3
20001b6e:	687b      	ldr	r3, [r7, #4]
20001b70:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
20001b72:	183b      	adds	r3, r7, r0
20001b74:	781a      	ldrb	r2, [r3, #0]
20001b76:	68f9      	ldr	r1, [r7, #12]
20001b78:	23dc      	movs	r3, #220	; 0xdc
20001b7a:	005b      	lsls	r3, r3, #1
20001b7c:	0112      	lsls	r2, r2, #4
20001b7e:	188a      	adds	r2, r1, r2
20001b80:	18d3      	adds	r3, r2, r3
20001b82:	681b      	ldr	r3, [r3, #0]
20001b84:	0e1b      	lsrs	r3, r3, #24
20001b86:	b2da      	uxtb	r2, r3
20001b88:	687b      	ldr	r3, [r7, #4]
20001b8a:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
20001b8c:	183b      	adds	r3, r7, r0
20001b8e:	781a      	ldrb	r2, [r3, #0]
20001b90:	68f9      	ldr	r1, [r7, #12]
20001b92:	23de      	movs	r3, #222	; 0xde
20001b94:	005b      	lsls	r3, r3, #1
20001b96:	0112      	lsls	r2, r2, #4
20001b98:	188a      	adds	r2, r1, r2
20001b9a:	18d3      	adds	r3, r2, r3
20001b9c:	681b      	ldr	r3, [r3, #0]
20001b9e:	b2da      	uxtb	r2, r3
20001ba0:	687b      	ldr	r3, [r7, #4]
20001ba2:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
20001ba4:	183b      	adds	r3, r7, r0
20001ba6:	781a      	ldrb	r2, [r3, #0]
20001ba8:	68f9      	ldr	r1, [r7, #12]
20001baa:	23de      	movs	r3, #222	; 0xde
20001bac:	005b      	lsls	r3, r3, #1
20001bae:	0112      	lsls	r2, r2, #4
20001bb0:	188a      	adds	r2, r1, r2
20001bb2:	18d3      	adds	r3, r2, r3
20001bb4:	681b      	ldr	r3, [r3, #0]
20001bb6:	0a1b      	lsrs	r3, r3, #8
20001bb8:	b2da      	uxtb	r2, r3
20001bba:	687b      	ldr	r3, [r7, #4]
20001bbc:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
20001bbe:	183b      	adds	r3, r7, r0
20001bc0:	781a      	ldrb	r2, [r3, #0]
20001bc2:	68f9      	ldr	r1, [r7, #12]
20001bc4:	23de      	movs	r3, #222	; 0xde
20001bc6:	005b      	lsls	r3, r3, #1
20001bc8:	0112      	lsls	r2, r2, #4
20001bca:	188a      	adds	r2, r1, r2
20001bcc:	18d3      	adds	r3, r2, r3
20001bce:	681b      	ldr	r3, [r3, #0]
20001bd0:	0c1b      	lsrs	r3, r3, #16
20001bd2:	b2da      	uxtb	r2, r3
20001bd4:	687b      	ldr	r3, [r7, #4]
20001bd6:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
20001bd8:	183b      	adds	r3, r7, r0
20001bda:	781a      	ldrb	r2, [r3, #0]
20001bdc:	68f9      	ldr	r1, [r7, #12]
20001bde:	23de      	movs	r3, #222	; 0xde
20001be0:	005b      	lsls	r3, r3, #1
20001be2:	0112      	lsls	r2, r2, #4
20001be4:	188a      	adds	r2, r1, r2
20001be6:	18d3      	adds	r3, r2, r3
20001be8:	681b      	ldr	r3, [r3, #0]
20001bea:	0e1b      	lsrs	r3, r3, #24
20001bec:	b2da      	uxtb	r2, r3
20001bee:	687b      	ldr	r3, [r7, #4]
20001bf0:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
20001bf2:	183b      	adds	r3, r7, r0
20001bf4:	781b      	ldrb	r3, [r3, #0]
20001bf6:	2b00      	cmp	r3, #0
20001bf8:	d106      	bne.n	20001c08 <CAN_Receive+0x196>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
20001bfa:	68fb      	ldr	r3, [r7, #12]
20001bfc:	68db      	ldr	r3, [r3, #12]
20001bfe:	2220      	movs	r2, #32
20001c00:	431a      	orrs	r2, r3
20001c02:	68fb      	ldr	r3, [r7, #12]
20001c04:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
20001c06:	e005      	b.n	20001c14 <CAN_Receive+0x1a2>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20001c08:	68fb      	ldr	r3, [r7, #12]
20001c0a:	691b      	ldr	r3, [r3, #16]
20001c0c:	2220      	movs	r2, #32
20001c0e:	431a      	orrs	r2, r3
20001c10:	68fb      	ldr	r3, [r7, #12]
20001c12:	611a      	str	r2, [r3, #16]
}
20001c14:	46c0      	nop			; (mov r8, r8)
20001c16:	46bd      	mov	sp, r7
20001c18:	b004      	add	sp, #16
20001c1a:	bd80      	pop	{r7, pc}

20001c1c <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
20001c1c:	b580      	push	{r7, lr}
20001c1e:	b082      	sub	sp, #8
20001c20:	af00      	add	r7, sp, #0
20001c22:	6078      	str	r0, [r7, #4]
20001c24:	000a      	movs	r2, r1
20001c26:	1cfb      	adds	r3, r7, #3
20001c28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
20001c2a:	1cfb      	adds	r3, r7, #3
20001c2c:	781b      	ldrb	r3, [r3, #0]
20001c2e:	2b00      	cmp	r3, #0
20001c30:	d106      	bne.n	20001c40 <CAN_FIFORelease+0x24>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
20001c32:	687b      	ldr	r3, [r7, #4]
20001c34:	68db      	ldr	r3, [r3, #12]
20001c36:	2220      	movs	r2, #32
20001c38:	431a      	orrs	r2, r3
20001c3a:	687b      	ldr	r3, [r7, #4]
20001c3c:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
20001c3e:	e005      	b.n	20001c4c <CAN_FIFORelease+0x30>
    CANx->RF1R |= CAN_RF1R_RFOM1;
20001c40:	687b      	ldr	r3, [r7, #4]
20001c42:	691b      	ldr	r3, [r3, #16]
20001c44:	2220      	movs	r2, #32
20001c46:	431a      	orrs	r2, r3
20001c48:	687b      	ldr	r3, [r7, #4]
20001c4a:	611a      	str	r2, [r3, #16]
}
20001c4c:	46c0      	nop			; (mov r8, r8)
20001c4e:	46bd      	mov	sp, r7
20001c50:	b002      	add	sp, #8
20001c52:	bd80      	pop	{r7, pc}

20001c54 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
20001c54:	b580      	push	{r7, lr}
20001c56:	b084      	sub	sp, #16
20001c58:	af00      	add	r7, sp, #0
20001c5a:	6078      	str	r0, [r7, #4]
20001c5c:	000a      	movs	r2, r1
20001c5e:	1cfb      	adds	r3, r7, #3
20001c60:	701a      	strb	r2, [r3, #0]
  uint8_t message_pending=0;
20001c62:	230f      	movs	r3, #15
20001c64:	18fb      	adds	r3, r7, r3
20001c66:	2200      	movs	r2, #0
20001c68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
20001c6a:	1cfb      	adds	r3, r7, #3
20001c6c:	781b      	ldrb	r3, [r3, #0]
20001c6e:	2b00      	cmp	r3, #0
20001c70:	d108      	bne.n	20001c84 <CAN_MessagePending+0x30>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
20001c72:	687b      	ldr	r3, [r7, #4]
20001c74:	68db      	ldr	r3, [r3, #12]
20001c76:	b2da      	uxtb	r2, r3
20001c78:	230f      	movs	r3, #15
20001c7a:	18fb      	adds	r3, r7, r3
20001c7c:	2103      	movs	r1, #3
20001c7e:	400a      	ands	r2, r1
20001c80:	701a      	strb	r2, [r3, #0]
20001c82:	e010      	b.n	20001ca6 <CAN_MessagePending+0x52>
  }
  else if (FIFONumber == CAN_FIFO1)
20001c84:	1cfb      	adds	r3, r7, #3
20001c86:	781b      	ldrb	r3, [r3, #0]
20001c88:	2b01      	cmp	r3, #1
20001c8a:	d108      	bne.n	20001c9e <CAN_MessagePending+0x4a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
20001c8c:	687b      	ldr	r3, [r7, #4]
20001c8e:	691b      	ldr	r3, [r3, #16]
20001c90:	b2da      	uxtb	r2, r3
20001c92:	230f      	movs	r3, #15
20001c94:	18fb      	adds	r3, r7, r3
20001c96:	2103      	movs	r1, #3
20001c98:	400a      	ands	r2, r1
20001c9a:	701a      	strb	r2, [r3, #0]
20001c9c:	e003      	b.n	20001ca6 <CAN_MessagePending+0x52>
  }
  else
  {
    message_pending = 0;
20001c9e:	230f      	movs	r3, #15
20001ca0:	18fb      	adds	r3, r7, r3
20001ca2:	2200      	movs	r2, #0
20001ca4:	701a      	strb	r2, [r3, #0]
  }
  return message_pending;
20001ca6:	230f      	movs	r3, #15
20001ca8:	18fb      	adds	r3, r7, r3
20001caa:	781b      	ldrb	r3, [r3, #0]
}
20001cac:	0018      	movs	r0, r3
20001cae:	46bd      	mov	sp, r7
20001cb0:	b004      	add	sp, #16
20001cb2:	bd80      	pop	{r7, pc}

20001cb4 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
20001cb4:	b580      	push	{r7, lr}
20001cb6:	b084      	sub	sp, #16
20001cb8:	af00      	add	r7, sp, #0
20001cba:	6078      	str	r0, [r7, #4]
20001cbc:	000a      	movs	r2, r1
20001cbe:	1cfb      	adds	r3, r7, #3
20001cc0:	701a      	strb	r2, [r3, #0]
  uint8_t status = CAN_ModeStatus_Failed;
20001cc2:	230f      	movs	r3, #15
20001cc4:	18fb      	adds	r3, r7, r3
20001cc6:	2200      	movs	r2, #0
20001cc8:	701a      	strb	r2, [r3, #0]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
20001cca:	4b42      	ldr	r3, [pc, #264]	; (20001dd4 <CAN_OperatingModeRequest+0x120>)
20001ccc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
20001cce:	1cfb      	adds	r3, r7, #3
20001cd0:	781b      	ldrb	r3, [r3, #0]
20001cd2:	2b00      	cmp	r3, #0
20001cd4:	d124      	bne.n	20001d20 <CAN_OperatingModeRequest+0x6c>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
20001cd6:	687b      	ldr	r3, [r7, #4]
20001cd8:	681b      	ldr	r3, [r3, #0]
20001cda:	2203      	movs	r2, #3
20001cdc:	4393      	bics	r3, r2
20001cde:	2201      	movs	r2, #1
20001ce0:	431a      	orrs	r2, r3
20001ce2:	687b      	ldr	r3, [r7, #4]
20001ce4:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
20001ce6:	e002      	b.n	20001cee <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
20001ce8:	68bb      	ldr	r3, [r7, #8]
20001cea:	3b01      	subs	r3, #1
20001cec:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
20001cee:	687b      	ldr	r3, [r7, #4]
20001cf0:	685b      	ldr	r3, [r3, #4]
20001cf2:	2203      	movs	r2, #3
20001cf4:	4013      	ands	r3, r2
20001cf6:	2b01      	cmp	r3, #1
20001cf8:	d002      	beq.n	20001d00 <CAN_OperatingModeRequest+0x4c>
20001cfa:	68bb      	ldr	r3, [r7, #8]
20001cfc:	2b00      	cmp	r3, #0
20001cfe:	d1f3      	bne.n	20001ce8 <CAN_OperatingModeRequest+0x34>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
20001d00:	687b      	ldr	r3, [r7, #4]
20001d02:	685b      	ldr	r3, [r3, #4]
20001d04:	2203      	movs	r2, #3
20001d06:	4013      	ands	r3, r2
20001d08:	2b01      	cmp	r3, #1
20001d0a:	d004      	beq.n	20001d16 <CAN_OperatingModeRequest+0x62>
    {
      status = CAN_ModeStatus_Failed;
20001d0c:	230f      	movs	r3, #15
20001d0e:	18fb      	adds	r3, r7, r3
20001d10:	2200      	movs	r2, #0
20001d12:	701a      	strb	r2, [r3, #0]
20001d14:	e057      	b.n	20001dc6 <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001d16:	230f      	movs	r3, #15
20001d18:	18fb      	adds	r3, r7, r3
20001d1a:	2201      	movs	r2, #1
20001d1c:	701a      	strb	r2, [r3, #0]
20001d1e:	e052      	b.n	20001dc6 <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
20001d20:	1cfb      	adds	r3, r7, #3
20001d22:	781b      	ldrb	r3, [r3, #0]
20001d24:	2b01      	cmp	r3, #1
20001d26:	d121      	bne.n	20001d6c <CAN_OperatingModeRequest+0xb8>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
20001d28:	687b      	ldr	r3, [r7, #4]
20001d2a:	681b      	ldr	r3, [r3, #0]
20001d2c:	2203      	movs	r2, #3
20001d2e:	4393      	bics	r3, r2
20001d30:	001a      	movs	r2, r3
20001d32:	687b      	ldr	r3, [r7, #4]
20001d34:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
20001d36:	e002      	b.n	20001d3e <CAN_OperatingModeRequest+0x8a>
    {
      timeout--;
20001d38:	68bb      	ldr	r3, [r7, #8]
20001d3a:	3b01      	subs	r3, #1
20001d3c:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
20001d3e:	687b      	ldr	r3, [r7, #4]
20001d40:	685b      	ldr	r3, [r3, #4]
20001d42:	2203      	movs	r2, #3
20001d44:	4013      	ands	r3, r2
20001d46:	d002      	beq.n	20001d4e <CAN_OperatingModeRequest+0x9a>
20001d48:	68bb      	ldr	r3, [r7, #8]
20001d4a:	2b00      	cmp	r3, #0
20001d4c:	d1f4      	bne.n	20001d38 <CAN_OperatingModeRequest+0x84>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
20001d4e:	687b      	ldr	r3, [r7, #4]
20001d50:	685b      	ldr	r3, [r3, #4]
20001d52:	2203      	movs	r2, #3
20001d54:	4013      	ands	r3, r2
20001d56:	d004      	beq.n	20001d62 <CAN_OperatingModeRequest+0xae>
    {
      status = CAN_ModeStatus_Failed;
20001d58:	230f      	movs	r3, #15
20001d5a:	18fb      	adds	r3, r7, r3
20001d5c:	2200      	movs	r2, #0
20001d5e:	701a      	strb	r2, [r3, #0]
20001d60:	e031      	b.n	20001dc6 <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001d62:	230f      	movs	r3, #15
20001d64:	18fb      	adds	r3, r7, r3
20001d66:	2201      	movs	r2, #1
20001d68:	701a      	strb	r2, [r3, #0]
20001d6a:	e02c      	b.n	20001dc6 <CAN_OperatingModeRequest+0x112>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
20001d6c:	1cfb      	adds	r3, r7, #3
20001d6e:	781b      	ldrb	r3, [r3, #0]
20001d70:	2b02      	cmp	r3, #2
20001d72:	d124      	bne.n	20001dbe <CAN_OperatingModeRequest+0x10a>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20001d74:	687b      	ldr	r3, [r7, #4]
20001d76:	681b      	ldr	r3, [r3, #0]
20001d78:	2203      	movs	r2, #3
20001d7a:	4393      	bics	r3, r2
20001d7c:	2202      	movs	r2, #2
20001d7e:	431a      	orrs	r2, r3
20001d80:	687b      	ldr	r3, [r7, #4]
20001d82:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20001d84:	e002      	b.n	20001d8c <CAN_OperatingModeRequest+0xd8>
    {
      timeout--;
20001d86:	68bb      	ldr	r3, [r7, #8]
20001d88:	3b01      	subs	r3, #1
20001d8a:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
20001d8c:	687b      	ldr	r3, [r7, #4]
20001d8e:	685b      	ldr	r3, [r3, #4]
20001d90:	2203      	movs	r2, #3
20001d92:	4013      	ands	r3, r2
20001d94:	2b02      	cmp	r3, #2
20001d96:	d002      	beq.n	20001d9e <CAN_OperatingModeRequest+0xea>
20001d98:	68bb      	ldr	r3, [r7, #8]
20001d9a:	2b00      	cmp	r3, #0
20001d9c:	d1f3      	bne.n	20001d86 <CAN_OperatingModeRequest+0xd2>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
20001d9e:	687b      	ldr	r3, [r7, #4]
20001da0:	685b      	ldr	r3, [r3, #4]
20001da2:	2203      	movs	r2, #3
20001da4:	4013      	ands	r3, r2
20001da6:	2b02      	cmp	r3, #2
20001da8:	d004      	beq.n	20001db4 <CAN_OperatingModeRequest+0x100>
    {
      status = CAN_ModeStatus_Failed;
20001daa:	230f      	movs	r3, #15
20001dac:	18fb      	adds	r3, r7, r3
20001dae:	2200      	movs	r2, #0
20001db0:	701a      	strb	r2, [r3, #0]
20001db2:	e008      	b.n	20001dc6 <CAN_OperatingModeRequest+0x112>
    }
    else
    {
      status = CAN_ModeStatus_Success;
20001db4:	230f      	movs	r3, #15
20001db6:	18fb      	adds	r3, r7, r3
20001db8:	2201      	movs	r2, #1
20001dba:	701a      	strb	r2, [r3, #0]
20001dbc:	e003      	b.n	20001dc6 <CAN_OperatingModeRequest+0x112>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
20001dbe:	230f      	movs	r3, #15
20001dc0:	18fb      	adds	r3, r7, r3
20001dc2:	2200      	movs	r2, #0
20001dc4:	701a      	strb	r2, [r3, #0]
  }

  return  (uint8_t) status;
20001dc6:	230f      	movs	r3, #15
20001dc8:	18fb      	adds	r3, r7, r3
20001dca:	781b      	ldrb	r3, [r3, #0]
}
20001dcc:	0018      	movs	r0, r3
20001dce:	46bd      	mov	sp, r7
20001dd0:	b004      	add	sp, #16
20001dd2:	bd80      	pop	{r7, pc}
20001dd4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001dd8 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
20001dd8:	b580      	push	{r7, lr}
20001dda:	b084      	sub	sp, #16
20001ddc:	af00      	add	r7, sp, #0
20001dde:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
20001de0:	230f      	movs	r3, #15
20001de2:	18fb      	adds	r3, r7, r3
20001de4:	2200      	movs	r2, #0
20001de6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
20001de8:	687b      	ldr	r3, [r7, #4]
20001dea:	681b      	ldr	r3, [r3, #0]
20001dec:	2203      	movs	r2, #3
20001dee:	4393      	bics	r3, r2
20001df0:	2202      	movs	r2, #2
20001df2:	431a      	orrs	r2, r3
20001df4:	687b      	ldr	r3, [r7, #4]
20001df6:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
20001df8:	687b      	ldr	r3, [r7, #4]
20001dfa:	685b      	ldr	r3, [r3, #4]
20001dfc:	2203      	movs	r2, #3
20001dfe:	4013      	ands	r3, r2
20001e00:	2b02      	cmp	r3, #2
20001e02:	d103      	bne.n	20001e0c <CAN_Sleep+0x34>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
20001e04:	230f      	movs	r3, #15
20001e06:	18fb      	adds	r3, r7, r3
20001e08:	2201      	movs	r2, #1
20001e0a:	701a      	strb	r2, [r3, #0]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
20001e0c:	230f      	movs	r3, #15
20001e0e:	18fb      	adds	r3, r7, r3
20001e10:	781b      	ldrb	r3, [r3, #0]
}
20001e12:	0018      	movs	r0, r3
20001e14:	46bd      	mov	sp, r7
20001e16:	b004      	add	sp, #16
20001e18:	bd80      	pop	{r7, pc}

20001e1a <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
20001e1a:	b580      	push	{r7, lr}
20001e1c:	b084      	sub	sp, #16
20001e1e:	af00      	add	r7, sp, #0
20001e20:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
20001e22:	4b15      	ldr	r3, [pc, #84]	; (20001e78 <CAN_WakeUp+0x5e>)
20001e24:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
20001e26:	230b      	movs	r3, #11
20001e28:	18fb      	adds	r3, r7, r3
20001e2a:	2200      	movs	r2, #0
20001e2c:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
20001e2e:	687b      	ldr	r3, [r7, #4]
20001e30:	681b      	ldr	r3, [r3, #0]
20001e32:	2202      	movs	r2, #2
20001e34:	4393      	bics	r3, r2
20001e36:	001a      	movs	r2, r3
20001e38:	687b      	ldr	r3, [r7, #4]
20001e3a:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20001e3c:	e002      	b.n	20001e44 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
20001e3e:	68fb      	ldr	r3, [r7, #12]
20001e40:	3b01      	subs	r3, #1
20001e42:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
20001e44:	687b      	ldr	r3, [r7, #4]
20001e46:	685b      	ldr	r3, [r3, #4]
20001e48:	2202      	movs	r2, #2
20001e4a:	4013      	ands	r3, r2
20001e4c:	2b02      	cmp	r3, #2
20001e4e:	d102      	bne.n	20001e56 <CAN_WakeUp+0x3c>
20001e50:	68fb      	ldr	r3, [r7, #12]
20001e52:	2b00      	cmp	r3, #0
20001e54:	d1f3      	bne.n	20001e3e <CAN_WakeUp+0x24>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
20001e56:	687b      	ldr	r3, [r7, #4]
20001e58:	685b      	ldr	r3, [r3, #4]
20001e5a:	2202      	movs	r2, #2
20001e5c:	4013      	ands	r3, r2
20001e5e:	2b02      	cmp	r3, #2
20001e60:	d003      	beq.n	20001e6a <CAN_WakeUp+0x50>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
20001e62:	230b      	movs	r3, #11
20001e64:	18fb      	adds	r3, r7, r3
20001e66:	2201      	movs	r2, #1
20001e68:	701a      	strb	r2, [r3, #0]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
20001e6a:	230b      	movs	r3, #11
20001e6c:	18fb      	adds	r3, r7, r3
20001e6e:	781b      	ldrb	r3, [r3, #0]
}
20001e70:	0018      	movs	r0, r3
20001e72:	46bd      	mov	sp, r7
20001e74:	b004      	add	sp, #16
20001e76:	bd80      	pop	{r7, pc}
20001e78:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

20001e7c <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
20001e7c:	b580      	push	{r7, lr}
20001e7e:	b084      	sub	sp, #16
20001e80:	af00      	add	r7, sp, #0
20001e82:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
20001e84:	210f      	movs	r1, #15
20001e86:	187b      	adds	r3, r7, r1
20001e88:	2200      	movs	r2, #0
20001e8a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
20001e8c:	687b      	ldr	r3, [r7, #4]
20001e8e:	699b      	ldr	r3, [r3, #24]
20001e90:	b2da      	uxtb	r2, r3
20001e92:	0008      	movs	r0, r1
20001e94:	187b      	adds	r3, r7, r1
20001e96:	2170      	movs	r1, #112	; 0x70
20001e98:	400a      	ands	r2, r1
20001e9a:	701a      	strb	r2, [r3, #0]
  
  /* Return the error code*/
  return errorcode;
20001e9c:	0001      	movs	r1, r0
20001e9e:	187b      	adds	r3, r7, r1
20001ea0:	781b      	ldrb	r3, [r3, #0]
}
20001ea2:	0018      	movs	r0, r3
20001ea4:	46bd      	mov	sp, r7
20001ea6:	b004      	add	sp, #16
20001ea8:	bd80      	pop	{r7, pc}

20001eaa <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
20001eaa:	b580      	push	{r7, lr}
20001eac:	b084      	sub	sp, #16
20001eae:	af00      	add	r7, sp, #0
20001eb0:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
20001eb2:	210f      	movs	r1, #15
20001eb4:	187b      	adds	r3, r7, r1
20001eb6:	2200      	movs	r2, #0
20001eb8:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
20001eba:	687b      	ldr	r3, [r7, #4]
20001ebc:	699b      	ldr	r3, [r3, #24]
20001ebe:	0e1a      	lsrs	r2, r3, #24
20001ec0:	187b      	adds	r3, r7, r1
20001ec2:	701a      	strb	r2, [r3, #0]
  
  /* Return the Receive Error Counter*/
  return counter;
20001ec4:	187b      	adds	r3, r7, r1
20001ec6:	781b      	ldrb	r3, [r3, #0]
}
20001ec8:	0018      	movs	r0, r3
20001eca:	46bd      	mov	sp, r7
20001ecc:	b004      	add	sp, #16
20001ece:	bd80      	pop	{r7, pc}

20001ed0 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
20001ed0:	b580      	push	{r7, lr}
20001ed2:	b084      	sub	sp, #16
20001ed4:	af00      	add	r7, sp, #0
20001ed6:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
20001ed8:	210f      	movs	r1, #15
20001eda:	187b      	adds	r3, r7, r1
20001edc:	2200      	movs	r2, #0
20001ede:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
20001ee0:	687b      	ldr	r3, [r7, #4]
20001ee2:	699b      	ldr	r3, [r3, #24]
20001ee4:	0c1a      	lsrs	r2, r3, #16
20001ee6:	187b      	adds	r3, r7, r1
20001ee8:	701a      	strb	r2, [r3, #0]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
20001eea:	187b      	adds	r3, r7, r1
20001eec:	781b      	ldrb	r3, [r3, #0]
}
20001eee:	0018      	movs	r0, r3
20001ef0:	46bd      	mov	sp, r7
20001ef2:	b004      	add	sp, #16
20001ef4:	bd80      	pop	{r7, pc}

20001ef6 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
20001ef6:	b580      	push	{r7, lr}
20001ef8:	b084      	sub	sp, #16
20001efa:	af00      	add	r7, sp, #0
20001efc:	60f8      	str	r0, [r7, #12]
20001efe:	60b9      	str	r1, [r7, #8]
20001f00:	1dfb      	adds	r3, r7, #7
20001f02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
20001f04:	1dfb      	adds	r3, r7, #7
20001f06:	781b      	ldrb	r3, [r3, #0]
20001f08:	2b00      	cmp	r3, #0
20001f0a:	d006      	beq.n	20001f1a <CAN_ITConfig+0x24>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
20001f0c:	68fb      	ldr	r3, [r7, #12]
20001f0e:	695a      	ldr	r2, [r3, #20]
20001f10:	68bb      	ldr	r3, [r7, #8]
20001f12:	431a      	orrs	r2, r3
20001f14:	68fb      	ldr	r3, [r7, #12]
20001f16:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
20001f18:	e006      	b.n	20001f28 <CAN_ITConfig+0x32>
    CANx->IER &= ~CAN_IT;
20001f1a:	68fb      	ldr	r3, [r7, #12]
20001f1c:	695b      	ldr	r3, [r3, #20]
20001f1e:	68ba      	ldr	r2, [r7, #8]
20001f20:	43d2      	mvns	r2, r2
20001f22:	401a      	ands	r2, r3
20001f24:	68fb      	ldr	r3, [r7, #12]
20001f26:	615a      	str	r2, [r3, #20]
}
20001f28:	46c0      	nop			; (mov r8, r8)
20001f2a:	46bd      	mov	sp, r7
20001f2c:	b004      	add	sp, #16
20001f2e:	bd80      	pop	{r7, pc}

20001f30 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
20001f30:	b580      	push	{r7, lr}
20001f32:	b084      	sub	sp, #16
20001f34:	af00      	add	r7, sp, #0
20001f36:	6078      	str	r0, [r7, #4]
20001f38:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
20001f3a:	230f      	movs	r3, #15
20001f3c:	18fb      	adds	r3, r7, r3
20001f3e:	2200      	movs	r2, #0
20001f40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
20001f42:	683a      	ldr	r2, [r7, #0]
20001f44:	23f0      	movs	r3, #240	; 0xf0
20001f46:	041b      	lsls	r3, r3, #16
20001f48:	4013      	ands	r3, r2
20001f4a:	d010      	beq.n	20001f6e <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001f4c:	687b      	ldr	r3, [r7, #4]
20001f4e:	699b      	ldr	r3, [r3, #24]
20001f50:	683a      	ldr	r2, [r7, #0]
20001f52:	4013      	ands	r3, r2
20001f54:	031b      	lsls	r3, r3, #12
20001f56:	0b1b      	lsrs	r3, r3, #12
20001f58:	d004      	beq.n	20001f64 <CAN_GetFlagStatus+0x34>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001f5a:	230f      	movs	r3, #15
20001f5c:	18fb      	adds	r3, r7, r3
20001f5e:	2201      	movs	r2, #1
20001f60:	701a      	strb	r2, [r3, #0]
20001f62:	e056      	b.n	20002012 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001f64:	230f      	movs	r3, #15
20001f66:	18fb      	adds	r3, r7, r3
20001f68:	2200      	movs	r2, #0
20001f6a:	701a      	strb	r2, [r3, #0]
20001f6c:	e051      	b.n	20002012 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
20001f6e:	683a      	ldr	r2, [r7, #0]
20001f70:	2380      	movs	r3, #128	; 0x80
20001f72:	045b      	lsls	r3, r3, #17
20001f74:	4013      	ands	r3, r2
20001f76:	d010      	beq.n	20001f9a <CAN_GetFlagStatus+0x6a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001f78:	687b      	ldr	r3, [r7, #4]
20001f7a:	685b      	ldr	r3, [r3, #4]
20001f7c:	683a      	ldr	r2, [r7, #0]
20001f7e:	4013      	ands	r3, r2
20001f80:	031b      	lsls	r3, r3, #12
20001f82:	0b1b      	lsrs	r3, r3, #12
20001f84:	d004      	beq.n	20001f90 <CAN_GetFlagStatus+0x60>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001f86:	230f      	movs	r3, #15
20001f88:	18fb      	adds	r3, r7, r3
20001f8a:	2201      	movs	r2, #1
20001f8c:	701a      	strb	r2, [r3, #0]
20001f8e:	e040      	b.n	20002012 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001f90:	230f      	movs	r3, #15
20001f92:	18fb      	adds	r3, r7, r3
20001f94:	2200      	movs	r2, #0
20001f96:	701a      	strb	r2, [r3, #0]
20001f98:	e03b      	b.n	20002012 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
20001f9a:	683a      	ldr	r2, [r7, #0]
20001f9c:	2380      	movs	r3, #128	; 0x80
20001f9e:	051b      	lsls	r3, r3, #20
20001fa0:	4013      	ands	r3, r2
20001fa2:	d010      	beq.n	20001fc6 <CAN_GetFlagStatus+0x96>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001fa4:	687b      	ldr	r3, [r7, #4]
20001fa6:	689b      	ldr	r3, [r3, #8]
20001fa8:	683a      	ldr	r2, [r7, #0]
20001faa:	4013      	ands	r3, r2
20001fac:	031b      	lsls	r3, r3, #12
20001fae:	0b1b      	lsrs	r3, r3, #12
20001fb0:	d004      	beq.n	20001fbc <CAN_GetFlagStatus+0x8c>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001fb2:	230f      	movs	r3, #15
20001fb4:	18fb      	adds	r3, r7, r3
20001fb6:	2201      	movs	r2, #1
20001fb8:	701a      	strb	r2, [r3, #0]
20001fba:	e02a      	b.n	20002012 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001fbc:	230f      	movs	r3, #15
20001fbe:	18fb      	adds	r3, r7, r3
20001fc0:	2200      	movs	r2, #0
20001fc2:	701a      	strb	r2, [r3, #0]
20001fc4:	e025      	b.n	20002012 <CAN_GetFlagStatus+0xe2>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
20001fc6:	683a      	ldr	r2, [r7, #0]
20001fc8:	2380      	movs	r3, #128	; 0x80
20001fca:	049b      	lsls	r3, r3, #18
20001fcc:	4013      	ands	r3, r2
20001fce:	d010      	beq.n	20001ff2 <CAN_GetFlagStatus+0xc2>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001fd0:	687b      	ldr	r3, [r7, #4]
20001fd2:	68db      	ldr	r3, [r3, #12]
20001fd4:	683a      	ldr	r2, [r7, #0]
20001fd6:	4013      	ands	r3, r2
20001fd8:	031b      	lsls	r3, r3, #12
20001fda:	0b1b      	lsrs	r3, r3, #12
20001fdc:	d004      	beq.n	20001fe8 <CAN_GetFlagStatus+0xb8>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20001fde:	230f      	movs	r3, #15
20001fe0:	18fb      	adds	r3, r7, r3
20001fe2:	2201      	movs	r2, #1
20001fe4:	701a      	strb	r2, [r3, #0]
20001fe6:	e014      	b.n	20002012 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
20001fe8:	230f      	movs	r3, #15
20001fea:	18fb      	adds	r3, r7, r3
20001fec:	2200      	movs	r2, #0
20001fee:	701a      	strb	r2, [r3, #0]
20001ff0:	e00f      	b.n	20002012 <CAN_GetFlagStatus+0xe2>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
20001ff2:	687b      	ldr	r3, [r7, #4]
20001ff4:	691b      	ldr	r3, [r3, #16]
20001ff6:	683a      	ldr	r2, [r7, #0]
20001ff8:	4013      	ands	r3, r2
20001ffa:	031b      	lsls	r3, r3, #12
20001ffc:	0b1b      	lsrs	r3, r3, #12
20001ffe:	d004      	beq.n	2000200a <CAN_GetFlagStatus+0xda>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
20002000:	230f      	movs	r3, #15
20002002:	18fb      	adds	r3, r7, r3
20002004:	2201      	movs	r2, #1
20002006:	701a      	strb	r2, [r3, #0]
20002008:	e003      	b.n	20002012 <CAN_GetFlagStatus+0xe2>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
2000200a:	230f      	movs	r3, #15
2000200c:	18fb      	adds	r3, r7, r3
2000200e:	2200      	movs	r2, #0
20002010:	701a      	strb	r2, [r3, #0]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
20002012:	230f      	movs	r3, #15
20002014:	18fb      	adds	r3, r7, r3
20002016:	781b      	ldrb	r3, [r3, #0]
}
20002018:	0018      	movs	r0, r3
2000201a:	46bd      	mov	sp, r7
2000201c:	b004      	add	sp, #16
2000201e:	bd80      	pop	{r7, pc}

20002020 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
20002020:	b580      	push	{r7, lr}
20002022:	b084      	sub	sp, #16
20002024:	af00      	add	r7, sp, #0
20002026:	6078      	str	r0, [r7, #4]
20002028:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
2000202a:	2300      	movs	r3, #0
2000202c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
2000202e:	683b      	ldr	r3, [r7, #0]
20002030:	4a16      	ldr	r2, [pc, #88]	; (2000208c <CAN_ClearFlag+0x6c>)
20002032:	4293      	cmp	r3, r2
20002034:	d103      	bne.n	2000203e <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
20002036:	687b      	ldr	r3, [r7, #4]
20002038:	2200      	movs	r2, #0
2000203a:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
2000203c:	e021      	b.n	20002082 <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
2000203e:	683b      	ldr	r3, [r7, #0]
20002040:	031b      	lsls	r3, r3, #12
20002042:	0b1b      	lsrs	r3, r3, #12
20002044:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
20002046:	683a      	ldr	r2, [r7, #0]
20002048:	2380      	movs	r3, #128	; 0x80
2000204a:	049b      	lsls	r3, r3, #18
2000204c:	4013      	ands	r3, r2
2000204e:	d003      	beq.n	20002058 <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
20002050:	687b      	ldr	r3, [r7, #4]
20002052:	68fa      	ldr	r2, [r7, #12]
20002054:	60da      	str	r2, [r3, #12]
}
20002056:	e014      	b.n	20002082 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
20002058:	683a      	ldr	r2, [r7, #0]
2000205a:	2380      	movs	r3, #128	; 0x80
2000205c:	04db      	lsls	r3, r3, #19
2000205e:	4013      	ands	r3, r2
20002060:	d003      	beq.n	2000206a <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
20002062:	687b      	ldr	r3, [r7, #4]
20002064:	68fa      	ldr	r2, [r7, #12]
20002066:	611a      	str	r2, [r3, #16]
}
20002068:	e00b      	b.n	20002082 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
2000206a:	683a      	ldr	r2, [r7, #0]
2000206c:	2380      	movs	r3, #128	; 0x80
2000206e:	051b      	lsls	r3, r3, #20
20002070:	4013      	ands	r3, r2
20002072:	d003      	beq.n	2000207c <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
20002074:	687b      	ldr	r3, [r7, #4]
20002076:	68fa      	ldr	r2, [r7, #12]
20002078:	609a      	str	r2, [r3, #8]
}
2000207a:	e002      	b.n	20002082 <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
2000207c:	687b      	ldr	r3, [r7, #4]
2000207e:	68fa      	ldr	r2, [r7, #12]
20002080:	605a      	str	r2, [r3, #4]
}
20002082:	46c0      	nop			; (mov r8, r8)
20002084:	46bd      	mov	sp, r7
20002086:	b004      	add	sp, #16
20002088:	bd80      	pop	{r7, pc}
2000208a:	46c0      	nop			; (mov r8, r8)
2000208c:	30f00070 	rscscc	r0, r0, r0, ror r0

20002090 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
20002090:	b590      	push	{r4, r7, lr}
20002092:	b085      	sub	sp, #20
20002094:	af00      	add	r7, sp, #0
20002096:	6078      	str	r0, [r7, #4]
20002098:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
2000209a:	230f      	movs	r3, #15
2000209c:	18fb      	adds	r3, r7, r3
2000209e:	2200      	movs	r2, #0
200020a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
200020a2:	687b      	ldr	r3, [r7, #4]
200020a4:	695b      	ldr	r3, [r3, #20]
200020a6:	683a      	ldr	r2, [r7, #0]
200020a8:	4013      	ands	r3, r2
200020aa:	d100      	bne.n	200020ae <CAN_GetITStatus+0x1e>
200020ac:	e0db      	b.n	20002266 <CAN_GetITStatus+0x1d6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
200020ae:	683b      	ldr	r3, [r7, #0]
200020b0:	2b40      	cmp	r3, #64	; 0x40
200020b2:	d100      	bne.n	200020b6 <CAN_GetITStatus+0x26>
200020b4:	e079      	b.n	200021aa <CAN_GetITStatus+0x11a>
200020b6:	d80e      	bhi.n	200020d6 <CAN_GetITStatus+0x46>
200020b8:	2b04      	cmp	r3, #4
200020ba:	d04a      	beq.n	20002152 <CAN_GetITStatus+0xc2>
200020bc:	d804      	bhi.n	200020c8 <CAN_GetITStatus+0x38>
200020be:	2b01      	cmp	r3, #1
200020c0:	d030      	beq.n	20002124 <CAN_GetITStatus+0x94>
200020c2:	2b02      	cmp	r3, #2
200020c4:	d03a      	beq.n	2000213c <CAN_GetITStatus+0xac>
200020c6:	e0c8      	b.n	2000225a <CAN_GetITStatus+0x1ca>
200020c8:	2b10      	cmp	r3, #16
200020ca:	d058      	beq.n	2000217e <CAN_GetITStatus+0xee>
200020cc:	2b20      	cmp	r3, #32
200020ce:	d061      	beq.n	20002194 <CAN_GetITStatus+0x104>
200020d0:	2b08      	cmp	r3, #8
200020d2:	d049      	beq.n	20002168 <CAN_GetITStatus+0xd8>
200020d4:	e0c1      	b.n	2000225a <CAN_GetITStatus+0x1ca>
200020d6:	2280      	movs	r2, #128	; 0x80
200020d8:	0112      	lsls	r2, r2, #4
200020da:	4293      	cmp	r3, r2
200020dc:	d100      	bne.n	200020e0 <CAN_GetITStatus+0x50>
200020de:	e0a6      	b.n	2000222e <CAN_GetITStatus+0x19e>
200020e0:	2280      	movs	r2, #128	; 0x80
200020e2:	0112      	lsls	r2, r2, #4
200020e4:	4293      	cmp	r3, r2
200020e6:	d80f      	bhi.n	20002108 <CAN_GetITStatus+0x78>
200020e8:	2280      	movs	r2, #128	; 0x80
200020ea:	0092      	lsls	r2, r2, #2
200020ec:	4293      	cmp	r3, r2
200020ee:	d100      	bne.n	200020f2 <CAN_GetITStatus+0x62>
200020f0:	e087      	b.n	20002202 <CAN_GetITStatus+0x172>
200020f2:	2280      	movs	r2, #128	; 0x80
200020f4:	00d2      	lsls	r2, r2, #3
200020f6:	4293      	cmp	r3, r2
200020f8:	d100      	bne.n	200020fc <CAN_GetITStatus+0x6c>
200020fa:	e08d      	b.n	20002218 <CAN_GetITStatus+0x188>
200020fc:	2280      	movs	r2, #128	; 0x80
200020fe:	0052      	lsls	r2, r2, #1
20002100:	4293      	cmp	r3, r2
20002102:	d100      	bne.n	20002106 <CAN_GetITStatus+0x76>
20002104:	e072      	b.n	200021ec <CAN_GetITStatus+0x15c>
20002106:	e0a8      	b.n	2000225a <CAN_GetITStatus+0x1ca>
20002108:	2280      	movs	r2, #128	; 0x80
2000210a:	0252      	lsls	r2, r2, #9
2000210c:	4293      	cmp	r3, r2
2000210e:	d057      	beq.n	200021c0 <CAN_GetITStatus+0x130>
20002110:	2280      	movs	r2, #128	; 0x80
20002112:	0292      	lsls	r2, r2, #10
20002114:	4293      	cmp	r3, r2
20002116:	d05e      	beq.n	200021d6 <CAN_GetITStatus+0x146>
20002118:	2280      	movs	r2, #128	; 0x80
2000211a:	0212      	lsls	r2, r2, #8
2000211c:	4293      	cmp	r3, r2
2000211e:	d100      	bne.n	20002122 <CAN_GetITStatus+0x92>
20002120:	e090      	b.n	20002244 <CAN_GetITStatus+0x1b4>
20002122:	e09a      	b.n	2000225a <CAN_GetITStatus+0x1ca>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
20002124:	687b      	ldr	r3, [r7, #4]
20002126:	689b      	ldr	r3, [r3, #8]
20002128:	220f      	movs	r2, #15
2000212a:	18bc      	adds	r4, r7, r2
2000212c:	4a53      	ldr	r2, [pc, #332]	; (2000227c <CAN_GetITStatus+0x1ec>)
2000212e:	0011      	movs	r1, r2
20002130:	0018      	movs	r0, r3
20002132:	f000 f91b 	bl	2000236c <CheckITStatus>
20002136:	0003      	movs	r3, r0
20002138:	7023      	strb	r3, [r4, #0]
        break;
2000213a:	e098      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
2000213c:	687b      	ldr	r3, [r7, #4]
2000213e:	68db      	ldr	r3, [r3, #12]
20002140:	220f      	movs	r2, #15
20002142:	18bc      	adds	r4, r7, r2
20002144:	2103      	movs	r1, #3
20002146:	0018      	movs	r0, r3
20002148:	f000 f910 	bl	2000236c <CheckITStatus>
2000214c:	0003      	movs	r3, r0
2000214e:	7023      	strb	r3, [r4, #0]
        break;
20002150:	e08d      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
20002152:	687b      	ldr	r3, [r7, #4]
20002154:	68db      	ldr	r3, [r3, #12]
20002156:	220f      	movs	r2, #15
20002158:	18bc      	adds	r4, r7, r2
2000215a:	2108      	movs	r1, #8
2000215c:	0018      	movs	r0, r3
2000215e:	f000 f905 	bl	2000236c <CheckITStatus>
20002162:	0003      	movs	r3, r0
20002164:	7023      	strb	r3, [r4, #0]
        break;
20002166:	e082      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
20002168:	687b      	ldr	r3, [r7, #4]
2000216a:	68db      	ldr	r3, [r3, #12]
2000216c:	220f      	movs	r2, #15
2000216e:	18bc      	adds	r4, r7, r2
20002170:	2110      	movs	r1, #16
20002172:	0018      	movs	r0, r3
20002174:	f000 f8fa 	bl	2000236c <CheckITStatus>
20002178:	0003      	movs	r3, r0
2000217a:	7023      	strb	r3, [r4, #0]
        break;
2000217c:	e077      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
2000217e:	687b      	ldr	r3, [r7, #4]
20002180:	691b      	ldr	r3, [r3, #16]
20002182:	220f      	movs	r2, #15
20002184:	18bc      	adds	r4, r7, r2
20002186:	2103      	movs	r1, #3
20002188:	0018      	movs	r0, r3
2000218a:	f000 f8ef 	bl	2000236c <CheckITStatus>
2000218e:	0003      	movs	r3, r0
20002190:	7023      	strb	r3, [r4, #0]
        break;
20002192:	e06c      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
20002194:	687b      	ldr	r3, [r7, #4]
20002196:	691b      	ldr	r3, [r3, #16]
20002198:	220f      	movs	r2, #15
2000219a:	18bc      	adds	r4, r7, r2
2000219c:	2108      	movs	r1, #8
2000219e:	0018      	movs	r0, r3
200021a0:	f000 f8e4 	bl	2000236c <CheckITStatus>
200021a4:	0003      	movs	r3, r0
200021a6:	7023      	strb	r3, [r4, #0]
        break;
200021a8:	e061      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
200021aa:	687b      	ldr	r3, [r7, #4]
200021ac:	691b      	ldr	r3, [r3, #16]
200021ae:	220f      	movs	r2, #15
200021b0:	18bc      	adds	r4, r7, r2
200021b2:	2110      	movs	r1, #16
200021b4:	0018      	movs	r0, r3
200021b6:	f000 f8d9 	bl	2000236c <CheckITStatus>
200021ba:	0003      	movs	r3, r0
200021bc:	7023      	strb	r3, [r4, #0]
        break;
200021be:	e056      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
200021c0:	687b      	ldr	r3, [r7, #4]
200021c2:	685b      	ldr	r3, [r3, #4]
200021c4:	220f      	movs	r2, #15
200021c6:	18bc      	adds	r4, r7, r2
200021c8:	2108      	movs	r1, #8
200021ca:	0018      	movs	r0, r3
200021cc:	f000 f8ce 	bl	2000236c <CheckITStatus>
200021d0:	0003      	movs	r3, r0
200021d2:	7023      	strb	r3, [r4, #0]
        break;
200021d4:	e04b      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
200021d6:	687b      	ldr	r3, [r7, #4]
200021d8:	685b      	ldr	r3, [r3, #4]
200021da:	220f      	movs	r2, #15
200021dc:	18bc      	adds	r4, r7, r2
200021de:	2110      	movs	r1, #16
200021e0:	0018      	movs	r0, r3
200021e2:	f000 f8c3 	bl	2000236c <CheckITStatus>
200021e6:	0003      	movs	r3, r0
200021e8:	7023      	strb	r3, [r4, #0]
        break;
200021ea:	e040      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
200021ec:	687b      	ldr	r3, [r7, #4]
200021ee:	699b      	ldr	r3, [r3, #24]
200021f0:	220f      	movs	r2, #15
200021f2:	18bc      	adds	r4, r7, r2
200021f4:	2101      	movs	r1, #1
200021f6:	0018      	movs	r0, r3
200021f8:	f000 f8b8 	bl	2000236c <CheckITStatus>
200021fc:	0003      	movs	r3, r0
200021fe:	7023      	strb	r3, [r4, #0]
        break;
20002200:	e035      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
20002202:	687b      	ldr	r3, [r7, #4]
20002204:	699b      	ldr	r3, [r3, #24]
20002206:	220f      	movs	r2, #15
20002208:	18bc      	adds	r4, r7, r2
2000220a:	2102      	movs	r1, #2
2000220c:	0018      	movs	r0, r3
2000220e:	f000 f8ad 	bl	2000236c <CheckITStatus>
20002212:	0003      	movs	r3, r0
20002214:	7023      	strb	r3, [r4, #0]
        break;
20002216:	e02a      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
20002218:	687b      	ldr	r3, [r7, #4]
2000221a:	699b      	ldr	r3, [r3, #24]
2000221c:	220f      	movs	r2, #15
2000221e:	18bc      	adds	r4, r7, r2
20002220:	2104      	movs	r1, #4
20002222:	0018      	movs	r0, r3
20002224:	f000 f8a2 	bl	2000236c <CheckITStatus>
20002228:	0003      	movs	r3, r0
2000222a:	7023      	strb	r3, [r4, #0]
        break;
2000222c:	e01f      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
2000222e:	687b      	ldr	r3, [r7, #4]
20002230:	699b      	ldr	r3, [r3, #24]
20002232:	220f      	movs	r2, #15
20002234:	18bc      	adds	r4, r7, r2
20002236:	2170      	movs	r1, #112	; 0x70
20002238:	0018      	movs	r0, r3
2000223a:	f000 f897 	bl	2000236c <CheckITStatus>
2000223e:	0003      	movs	r3, r0
20002240:	7023      	strb	r3, [r4, #0]
        break;
20002242:	e014      	b.n	2000226e <CAN_GetITStatus+0x1de>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
20002244:	687b      	ldr	r3, [r7, #4]
20002246:	685b      	ldr	r3, [r3, #4]
20002248:	220f      	movs	r2, #15
2000224a:	18bc      	adds	r4, r7, r2
2000224c:	2104      	movs	r1, #4
2000224e:	0018      	movs	r0, r3
20002250:	f000 f88c 	bl	2000236c <CheckITStatus>
20002254:	0003      	movs	r3, r0
20002256:	7023      	strb	r3, [r4, #0]
        break;
20002258:	e009      	b.n	2000226e <CAN_GetITStatus+0x1de>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
2000225a:	230f      	movs	r3, #15
2000225c:	18fb      	adds	r3, r7, r3
2000225e:	2200      	movs	r2, #0
20002260:	701a      	strb	r2, [r3, #0]
        break;
20002262:	46c0      	nop			; (mov r8, r8)
20002264:	e003      	b.n	2000226e <CAN_GetITStatus+0x1de>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
20002266:	230f      	movs	r3, #15
20002268:	18fb      	adds	r3, r7, r3
2000226a:	2200      	movs	r2, #0
2000226c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
2000226e:	230f      	movs	r3, #15
20002270:	18fb      	adds	r3, r7, r3
20002272:	781b      	ldrb	r3, [r3, #0]
}
20002274:	0018      	movs	r0, r3
20002276:	46bd      	mov	sp, r7
20002278:	b005      	add	sp, #20
2000227a:	bd90      	pop	{r4, r7, pc}
2000227c:	00010101 	andeq	r0, r1, r1, lsl #2

20002280 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
20002280:	b580      	push	{r7, lr}
20002282:	b082      	sub	sp, #8
20002284:	af00      	add	r7, sp, #0
20002286:	6078      	str	r0, [r7, #4]
20002288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
2000228a:	683b      	ldr	r3, [r7, #0]
2000228c:	2280      	movs	r2, #128	; 0x80
2000228e:	0052      	lsls	r2, r2, #1
20002290:	4293      	cmp	r3, r2
20002292:	d04a      	beq.n	2000232a <CAN_ClearITPendingBit+0xaa>
20002294:	2280      	movs	r2, #128	; 0x80
20002296:	0052      	lsls	r2, r2, #1
20002298:	4293      	cmp	r3, r2
2000229a:	d80c      	bhi.n	200022b6 <CAN_ClearITPendingBit+0x36>
2000229c:	2b08      	cmp	r3, #8
2000229e:	d030      	beq.n	20002302 <CAN_ClearITPendingBit+0x82>
200022a0:	d804      	bhi.n	200022ac <CAN_ClearITPendingBit+0x2c>
200022a2:	2b01      	cmp	r3, #1
200022a4:	d025      	beq.n	200022f2 <CAN_ClearITPendingBit+0x72>
200022a6:	2b04      	cmp	r3, #4
200022a8:	d027      	beq.n	200022fa <CAN_ClearITPendingBit+0x7a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
200022aa:	e058      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
200022ac:	2b20      	cmp	r3, #32
200022ae:	d02c      	beq.n	2000230a <CAN_ClearITPendingBit+0x8a>
200022b0:	2b40      	cmp	r3, #64	; 0x40
200022b2:	d02e      	beq.n	20002312 <CAN_ClearITPendingBit+0x92>
       break;
200022b4:	e053      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
200022b6:	2280      	movs	r2, #128	; 0x80
200022b8:	0112      	lsls	r2, r2, #4
200022ba:	4293      	cmp	r3, r2
200022bc:	d041      	beq.n	20002342 <CAN_ClearITPendingBit+0xc2>
200022be:	2280      	movs	r2, #128	; 0x80
200022c0:	0112      	lsls	r2, r2, #4
200022c2:	4293      	cmp	r3, r2
200022c4:	d808      	bhi.n	200022d8 <CAN_ClearITPendingBit+0x58>
200022c6:	2280      	movs	r2, #128	; 0x80
200022c8:	0092      	lsls	r2, r2, #2
200022ca:	4293      	cmp	r3, r2
200022cc:	d031      	beq.n	20002332 <CAN_ClearITPendingBit+0xb2>
200022ce:	2280      	movs	r2, #128	; 0x80
200022d0:	00d2      	lsls	r2, r2, #3
200022d2:	4293      	cmp	r3, r2
200022d4:	d031      	beq.n	2000233a <CAN_ClearITPendingBit+0xba>
       break;
200022d6:	e042      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
  switch (CAN_IT)
200022d8:	2280      	movs	r2, #128	; 0x80
200022da:	0252      	lsls	r2, r2, #9
200022dc:	4293      	cmp	r3, r2
200022de:	d01c      	beq.n	2000231a <CAN_ClearITPendingBit+0x9a>
200022e0:	2280      	movs	r2, #128	; 0x80
200022e2:	0292      	lsls	r2, r2, #10
200022e4:	4293      	cmp	r3, r2
200022e6:	d01c      	beq.n	20002322 <CAN_ClearITPendingBit+0xa2>
200022e8:	2280      	movs	r2, #128	; 0x80
200022ea:	0212      	lsls	r2, r2, #8
200022ec:	4293      	cmp	r3, r2
200022ee:	d02f      	beq.n	20002350 <CAN_ClearITPendingBit+0xd0>
       break;
200022f0:	e035      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
200022f2:	687b      	ldr	r3, [r7, #4]
200022f4:	4a1c      	ldr	r2, [pc, #112]	; (20002368 <CAN_ClearITPendingBit+0xe8>)
200022f6:	609a      	str	r2, [r3, #8]
      break;
200022f8:	e031      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FULL0; 
200022fa:	687b      	ldr	r3, [r7, #4]
200022fc:	2208      	movs	r2, #8
200022fe:	60da      	str	r2, [r3, #12]
      break;
20002300:	e02d      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->RF0R = CAN_RF0R_FOVR0; 
20002302:	687b      	ldr	r3, [r7, #4]
20002304:	2210      	movs	r2, #16
20002306:	60da      	str	r2, [r3, #12]
      break;
20002308:	e029      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FULL1;  
2000230a:	687b      	ldr	r3, [r7, #4]
2000230c:	2208      	movs	r2, #8
2000230e:	611a      	str	r2, [r3, #16]
      break;
20002310:	e025      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->RF1R = CAN_RF1R_FOVR1; 
20002312:	687b      	ldr	r3, [r7, #4]
20002314:	2210      	movs	r2, #16
20002316:	611a      	str	r2, [r3, #16]
      break;
20002318:	e021      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_WKUI;  
2000231a:	687b      	ldr	r3, [r7, #4]
2000231c:	2208      	movs	r2, #8
2000231e:	605a      	str	r2, [r3, #4]
      break;
20002320:	e01d      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_SLAKI;   
20002322:	687b      	ldr	r3, [r7, #4]
20002324:	2210      	movs	r2, #16
20002326:	605a      	str	r2, [r3, #4]
      break;
20002328:	e019      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI;
2000232a:	687b      	ldr	r3, [r7, #4]
2000232c:	2204      	movs	r2, #4
2000232e:	605a      	str	r2, [r3, #4]
      break;
20002330:	e015      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
20002332:	687b      	ldr	r3, [r7, #4]
20002334:	2204      	movs	r2, #4
20002336:	605a      	str	r2, [r3, #4]
      break;
20002338:	e011      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->MSR = CAN_MSR_ERRI; 
2000233a:	687b      	ldr	r3, [r7, #4]
2000233c:	2204      	movs	r2, #4
2000233e:	605a      	str	r2, [r3, #4]
       break;
20002340:	e00d      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
20002342:	687b      	ldr	r3, [r7, #4]
20002344:	2200      	movs	r2, #0
20002346:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
20002348:	687b      	ldr	r3, [r7, #4]
2000234a:	2204      	movs	r2, #4
2000234c:	605a      	str	r2, [r3, #4]
      break;
2000234e:	e006      	b.n	2000235e <CAN_ClearITPendingBit+0xde>
      CANx->ESR = RESET; 
20002350:	687b      	ldr	r3, [r7, #4]
20002352:	2200      	movs	r2, #0
20002354:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
20002356:	687b      	ldr	r3, [r7, #4]
20002358:	2204      	movs	r2, #4
2000235a:	605a      	str	r2, [r3, #4]
       break;
2000235c:	46c0      	nop			; (mov r8, r8)
   }
}
2000235e:	46c0      	nop			; (mov r8, r8)
20002360:	46bd      	mov	sp, r7
20002362:	b002      	add	sp, #8
20002364:	bd80      	pop	{r7, pc}
20002366:	46c0      	nop			; (mov r8, r8)
20002368:	00010101 	andeq	r0, r1, r1, lsl #2

2000236c <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
2000236c:	b580      	push	{r7, lr}
2000236e:	b084      	sub	sp, #16
20002370:	af00      	add	r7, sp, #0
20002372:	6078      	str	r0, [r7, #4]
20002374:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
20002376:	230f      	movs	r3, #15
20002378:	18fb      	adds	r3, r7, r3
2000237a:	2200      	movs	r2, #0
2000237c:	701a      	strb	r2, [r3, #0]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
2000237e:	687b      	ldr	r3, [r7, #4]
20002380:	683a      	ldr	r2, [r7, #0]
20002382:	4013      	ands	r3, r2
20002384:	d004      	beq.n	20002390 <CheckITStatus+0x24>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
20002386:	230f      	movs	r3, #15
20002388:	18fb      	adds	r3, r7, r3
2000238a:	2201      	movs	r2, #1
2000238c:	701a      	strb	r2, [r3, #0]
2000238e:	e003      	b.n	20002398 <CheckITStatus+0x2c>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
20002390:	230f      	movs	r3, #15
20002392:	18fb      	adds	r3, r7, r3
20002394:	2200      	movs	r2, #0
20002396:	701a      	strb	r2, [r3, #0]
  }
  return pendingbitstatus;
20002398:	230f      	movs	r3, #15
2000239a:	18fb      	adds	r3, r7, r3
2000239c:	781b      	ldrb	r3, [r3, #0]
}
2000239e:	0018      	movs	r0, r3
200023a0:	46bd      	mov	sp, r7
200023a2:	b004      	add	sp, #16
200023a4:	bd80      	pop	{r7, pc}
200023a6:	46c0      	nop			; (mov r8, r8)

200023a8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200023a8:	b580      	push	{r7, lr}
200023aa:	b082      	sub	sp, #8
200023ac:	af00      	add	r7, sp, #0
200023ae:	0002      	movs	r2, r0
200023b0:	1dfb      	adds	r3, r7, #7
200023b2:	701a      	strb	r2, [r3, #0]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
200023b4:	1dfb      	adds	r3, r7, #7
200023b6:	781b      	ldrb	r3, [r3, #0]
200023b8:	001a      	movs	r2, r3
200023ba:	231f      	movs	r3, #31
200023bc:	4013      	ands	r3, r2
200023be:	2201      	movs	r2, #1
200023c0:	409a      	lsls	r2, r3
200023c2:	0011      	movs	r1, r2
200023c4:	4a05      	ldr	r2, [pc, #20]	; (200023dc <NVIC_EnableIRQ+0x34>)
200023c6:	1dfb      	adds	r3, r7, #7
200023c8:	781b      	ldrb	r3, [r3, #0]
200023ca:	b25b      	sxtb	r3, r3
200023cc:	095b      	lsrs	r3, r3, #5
200023ce:	009b      	lsls	r3, r3, #2
200023d0:	5099      	str	r1, [r3, r2]
}
200023d2:	46c0      	nop			; (mov r8, r8)
200023d4:	46bd      	mov	sp, r7
200023d6:	b002      	add	sp, #8
200023d8:	bd80      	pop	{r7, pc}
200023da:	46c0      	nop			; (mov r8, r8)
200023dc:	e000e100 	and	lr, r0, r0, lsl #2

200023e0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200023e0:	b580      	push	{r7, lr}
200023e2:	b082      	sub	sp, #8
200023e4:	af00      	add	r7, sp, #0
200023e6:	0002      	movs	r2, r0
200023e8:	6039      	str	r1, [r7, #0]
200023ea:	1dfb      	adds	r3, r7, #7
200023ec:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
200023ee:	1dfb      	adds	r3, r7, #7
200023f0:	781b      	ldrb	r3, [r3, #0]
200023f2:	2b7f      	cmp	r3, #127	; 0x7f
200023f4:	d90d      	bls.n	20002412 <NVIC_SetPriority+0x32>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
200023f6:	683b      	ldr	r3, [r7, #0]
200023f8:	b2da      	uxtb	r2, r3
200023fa:	490f      	ldr	r1, [pc, #60]	; (20002438 <NVIC_SetPriority+0x58>)
200023fc:	1dfb      	adds	r3, r7, #7
200023fe:	781b      	ldrb	r3, [r3, #0]
20002400:	0018      	movs	r0, r3
20002402:	230f      	movs	r3, #15
20002404:	4003      	ands	r3, r0
20002406:	3b04      	subs	r3, #4
20002408:	0112      	lsls	r2, r2, #4
2000240a:	b2d2      	uxtb	r2, r2
2000240c:	18cb      	adds	r3, r1, r3
2000240e:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
20002410:	e00d      	b.n	2000242e <NVIC_SetPriority+0x4e>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
20002412:	683b      	ldr	r3, [r7, #0]
20002414:	b2db      	uxtb	r3, r3
20002416:	4909      	ldr	r1, [pc, #36]	; (2000243c <NVIC_SetPriority+0x5c>)
20002418:	1dfa      	adds	r2, r7, #7
2000241a:	7812      	ldrb	r2, [r2, #0]
2000241c:	b252      	sxtb	r2, r2
2000241e:	011b      	lsls	r3, r3, #4
20002420:	b2d8      	uxtb	r0, r3
20002422:	23c0      	movs	r3, #192	; 0xc0
20002424:	009b      	lsls	r3, r3, #2
20002426:	188a      	adds	r2, r1, r2
20002428:	18d3      	adds	r3, r2, r3
2000242a:	1c02      	adds	r2, r0, #0
2000242c:	701a      	strb	r2, [r3, #0]
}
2000242e:	46c0      	nop			; (mov r8, r8)
20002430:	46bd      	mov	sp, r7
20002432:	b002      	add	sp, #8
20002434:	bd80      	pop	{r7, pc}
20002436:	46c0      	nop			; (mov r8, r8)
20002438:	e000ed00 	and	lr, r0, r0, lsl #26
2000243c:	e000e100 	and	lr, r0, r0, lsl #2

20002440 <can1_init>:

//
// Initialize CAN controller for CAN1
// interrupt is called each time a message is ready to be received
//
void can1_init(VoidFunction interrupt) {
20002440:	b590      	push	{r4, r7, lr}
20002442:	b08d      	sub	sp, #52	; 0x34
20002444:	af00      	add	r7, sp, #0
20002446:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    CAN_FilterInitTypeDef  CAN_FilterInitStructure;

    GPIO_StructInit( &GPIO_InitStructure );
20002448:	2424      	movs	r4, #36	; 0x24
2000244a:	193b      	adds	r3, r7, r4
2000244c:	0018      	movs	r0, r3
2000244e:	f7fe fd7d 	bl	20000f4c <GPIO_StructInit>

    GPIO_DeInit( GPIOB );
20002452:	4b73      	ldr	r3, [pc, #460]	; (20002620 <can1_init+0x1e0>)
20002454:	0018      	movs	r0, r3
20002456:	f7fe fc35 	bl	20000cc4 <GPIO_DeInit>
    CAN_DeInit( CAN1 );
2000245a:	4b72      	ldr	r3, [pc, #456]	; (20002624 <can1_init+0x1e4>)
2000245c:	0018      	movs	r0, r3
2000245e:	f7fe feb9 	bl	200011d4 <CAN_DeInit>
    RCC_APB1PeriphClockCmd( RCC_APB1Periph_CAN1, ENABLE );
20002462:	2380      	movs	r3, #128	; 0x80
20002464:	049b      	lsls	r3, r3, #18
20002466:	2101      	movs	r1, #1
20002468:	0018      	movs	r0, r3
2000246a:	f7fe fa01 	bl	20000870 <RCC_APB1PeriphClockCmd>
    RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOB, ENABLE);
2000246e:	2101      	movs	r1, #1
20002470:	2002      	movs	r0, #2
20002472:	f7fe f99d 	bl	200007b0 <RCC_AHB1PeriphClockCmd>

    /* Connect CAN1 pins to AF */
    /* PB9 - CAN1 TX */
    /* PB8 - CAN1 RX  */
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_CAN1);  	
20002476:	4b6a      	ldr	r3, [pc, #424]	; (20002620 <can1_init+0x1e0>)
20002478:	2209      	movs	r2, #9
2000247a:	2109      	movs	r1, #9
2000247c:	0018      	movs	r0, r3
2000247e:	f7fe fe56 	bl	2000112e <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_CAN1);  
20002482:	4b67      	ldr	r3, [pc, #412]	; (20002620 <can1_init+0x1e0>)
20002484:	2209      	movs	r2, #9
20002486:	2108      	movs	r1, #8
20002488:	0018      	movs	r0, r3
2000248a:	f7fe fe50 	bl	2000112e <GPIO_PinAFConfig>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
2000248e:	0021      	movs	r1, r4
20002490:	187b      	adds	r3, r7, r1
20002492:	2280      	movs	r2, #128	; 0x80
20002494:	0092      	lsls	r2, r2, #2
20002496:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20002498:	187b      	adds	r3, r7, r1
2000249a:	2202      	movs	r2, #2
2000249c:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
2000249e:	187b      	adds	r3, r7, r1
200024a0:	2200      	movs	r2, #0
200024a2:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
200024a4:	187b      	adds	r3, r7, r1
200024a6:	2200      	movs	r2, #0
200024a8:	71da      	strb	r2, [r3, #7]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200024aa:	187b      	adds	r3, r7, r1
200024ac:	2202      	movs	r2, #2
200024ae:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
200024b0:	000c      	movs	r4, r1
200024b2:	187b      	adds	r3, r7, r1
200024b4:	4a5a      	ldr	r2, [pc, #360]	; (20002620 <can1_init+0x1e0>)
200024b6:	0019      	movs	r1, r3
200024b8:	0010      	movs	r0, r2
200024ba:	f7fe fcbb 	bl	20000e34 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;	
200024be:	0021      	movs	r1, r4
200024c0:	187b      	adds	r3, r7, r1
200024c2:	2280      	movs	r2, #128	; 0x80
200024c4:	0052      	lsls	r2, r2, #1
200024c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200024c8:	187b      	adds	r3, r7, r1
200024ca:	2202      	movs	r2, #2
200024cc:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
200024ce:	187b      	adds	r3, r7, r1
200024d0:	2200      	movs	r2, #0
200024d2:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
200024d4:	187b      	adds	r3, r7, r1
200024d6:	2201      	movs	r2, #1
200024d8:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
200024da:	187b      	adds	r3, r7, r1
200024dc:	2202      	movs	r2, #2
200024de:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
200024e0:	000c      	movs	r4, r1
200024e2:	187b      	adds	r3, r7, r1
200024e4:	4a4e      	ldr	r2, [pc, #312]	; (20002620 <can1_init+0x1e0>)
200024e6:	0019      	movs	r1, r3
200024e8:	0010      	movs	r0, r2
200024ea:	f7fe fca3 	bl	20000e34 <GPIO_Init>
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
200024ee:	0021      	movs	r1, r4
200024f0:	187b      	adds	r3, r7, r1
200024f2:	2240      	movs	r2, #64	; 0x40
200024f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
200024f6:	187b      	adds	r3, r7, r1
200024f8:	2202      	movs	r2, #2
200024fa:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
200024fc:	187b      	adds	r3, r7, r1
200024fe:	2200      	movs	r2, #0
20002500:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
20002502:	187b      	adds	r3, r7, r1
20002504:	2200      	movs	r2, #0
20002506:	71da      	strb	r2, [r3, #7]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
20002508:	187b      	adds	r3, r7, r1
2000250a:	2202      	movs	r2, #2
2000250c:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);	
2000250e:	000c      	movs	r4, r1
20002510:	187b      	adds	r3, r7, r1
20002512:	4a43      	ldr	r2, [pc, #268]	; (20002620 <can1_init+0x1e0>)
20002514:	0019      	movs	r1, r3
20002516:	0010      	movs	r0, r2
20002518:	f7fe fc8c 	bl	20000e34 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;	
2000251c:	0021      	movs	r1, r4
2000251e:	187b      	adds	r3, r7, r1
20002520:	2220      	movs	r2, #32
20002522:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
20002524:	187b      	adds	r3, r7, r1
20002526:	2202      	movs	r2, #2
20002528:	711a      	strb	r2, [r3, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_Mode_IN;
2000252a:	187b      	adds	r3, r7, r1
2000252c:	2200      	movs	r2, #0
2000252e:	719a      	strb	r2, [r3, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	
20002530:	187b      	adds	r3, r7, r1
20002532:	2201      	movs	r2, #1
20002534:	71da      	strb	r2, [r3, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
20002536:	187b      	adds	r3, r7, r1
20002538:	2202      	movs	r2, #2
2000253a:	715a      	strb	r2, [r3, #5]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
2000253c:	187b      	adds	r3, r7, r1
2000253e:	4a38      	ldr	r2, [pc, #224]	; (20002620 <can1_init+0x1e0>)
20002540:	0019      	movs	r1, r3
20002542:	0010      	movs	r0, r2
20002544:	f7fe fc76 	bl	20000e34 <GPIO_Init>
    
    
    /* CAN filter init */
    CAN_FilterInitStructure.CAN_FilterNumber = CAN_Filter_FIFO0;
20002548:	2114      	movs	r1, #20
2000254a:	187b      	adds	r3, r7, r1
2000254c:	2200      	movs	r2, #0
2000254e:	729a      	strb	r2, [r3, #10]
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
20002550:	187b      	adds	r3, r7, r1
20002552:	2200      	movs	r2, #0
20002554:	72da      	strb	r2, [r3, #11]
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
20002556:	187b      	adds	r3, r7, r1
20002558:	2201      	movs	r2, #1
2000255a:	731a      	strb	r2, [r3, #12]
    CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;
2000255c:	187b      	adds	r3, r7, r1
2000255e:	2200      	movs	r2, #0
20002560:	801a      	strh	r2, [r3, #0]
    CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;
20002562:	187b      	adds	r3, r7, r1
20002564:	2200      	movs	r2, #0
20002566:	805a      	strh	r2, [r3, #2]
    CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000; // 0 in a position means ignore that bit
20002568:	187b      	adds	r3, r7, r1
2000256a:	2200      	movs	r2, #0
2000256c:	809a      	strh	r2, [r3, #4]
    CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;
2000256e:	187b      	adds	r3, r7, r1
20002570:	2200      	movs	r2, #0
20002572:	80da      	strh	r2, [r3, #6]
    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
20002574:	187b      	adds	r3, r7, r1
20002576:	2200      	movs	r2, #0
20002578:	811a      	strh	r2, [r3, #8]
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
2000257a:	187b      	adds	r3, r7, r1
2000257c:	2201      	movs	r2, #1
2000257e:	735a      	strb	r2, [r3, #13]
    CAN_FilterInit(&CAN_FilterInitStructure);
20002580:	187b      	adds	r3, r7, r1
20002582:	0018      	movs	r0, r3
20002584:	f7fe ff30 	bl	200013e8 <CAN_FilterInit>
    
    CAN_InitTypeDef CAN_InitStructure;
    CAN_InitStructure.CAN_TTCM = DISABLE; // time-triggered communication mode = DISABLED
20002588:	2108      	movs	r1, #8
2000258a:	187b      	adds	r3, r7, r1
2000258c:	2200      	movs	r2, #0
2000258e:	719a      	strb	r2, [r3, #6]
    CAN_InitStructure.CAN_ABOM = DISABLE; // automatic bus-off management mode = DISABLED
20002590:	187b      	adds	r3, r7, r1
20002592:	2200      	movs	r2, #0
20002594:	71da      	strb	r2, [r3, #7]
    CAN_InitStructure.CAN_AWUM = DISABLE; // automatic wake-up mode = DISABLED
20002596:	187b      	adds	r3, r7, r1
20002598:	2200      	movs	r2, #0
2000259a:	721a      	strb	r2, [r3, #8]
    CAN_InitStructure.CAN_NART = DISABLE; // non-automatic retransmission mode = DISABLED
2000259c:	187b      	adds	r3, r7, r1
2000259e:	2200      	movs	r2, #0
200025a0:	725a      	strb	r2, [r3, #9]
    CAN_InitStructure.CAN_RFLM = DISABLE; // receive FIFO locked mode = DISABLED
200025a2:	187b      	adds	r3, r7, r1
200025a4:	2200      	movs	r2, #0
200025a6:	729a      	strb	r2, [r3, #10]
    CAN_InitStructure.CAN_TXFP = DISABLE; // transmit FIFO priority = DISABLED
200025a8:	187b      	adds	r3, r7, r1
200025aa:	2200      	movs	r2, #0
200025ac:	72da      	strb	r2, [r3, #11]
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal; // normal CAN mode
200025ae:	187b      	adds	r3, r7, r1
200025b0:	2200      	movs	r2, #0
200025b2:	709a      	strb	r2, [r3, #2]
    // 42 MHz clock on APB1
    // Prescaler = 7 => time quanta tq = 1/6 us
    // Bit time = tq*(SJW + BS1 + BS2)
    // See figure 346 in F407 - Reference Manual.pdf
    // 
    CAN_InitStructure.CAN_SJW = CAN_SJW_1tq; // synchronization jump width = 1
200025b4:	187b      	adds	r3, r7, r1
200025b6:	2200      	movs	r2, #0
200025b8:	70da      	strb	r2, [r3, #3]
    CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq; 
200025ba:	187b      	adds	r3, r7, r1
200025bc:	2202      	movs	r2, #2
200025be:	711a      	strb	r2, [r3, #4]
    CAN_InitStructure.CAN_BS2 = CAN_BS2_4tq; 
200025c0:	187b      	adds	r3, r7, r1
200025c2:	2203      	movs	r2, #3
200025c4:	715a      	strb	r2, [r3, #5]
    CAN_InitStructure.CAN_Prescaler = 7; // baudrate 750kbps
200025c6:	187b      	adds	r3, r7, r1
200025c8:	2207      	movs	r2, #7
200025ca:	801a      	strh	r2, [r3, #0]

    if (CAN_Init(CAN1, &CAN_InitStructure) == CAN_InitStatus_Failed)
200025cc:	187b      	adds	r3, r7, r1
200025ce:	4a15      	ldr	r2, [pc, #84]	; (20002624 <can1_init+0x1e4>)
200025d0:	0019      	movs	r1, r3
200025d2:	0010      	movs	r0, r2
200025d4:	f7fe fe26 	bl	20001224 <CAN_Init>
200025d8:	1e03      	subs	r3, r0, #0
200025da:	d104      	bne.n	200025e6 <can1_init+0x1a6>
        DUMP("CAN #1 Init failed!");
200025dc:	4b12      	ldr	r3, [pc, #72]	; (20002628 <can1_init+0x1e8>)
200025de:	0018      	movs	r0, r3
200025e0:	f000 f93e 	bl	20002860 <DUMP>
200025e4:	e003      	b.n	200025ee <can1_init+0x1ae>
    else
        DUMP("CAN #1 Init successful!");
200025e6:	4b11      	ldr	r3, [pc, #68]	; (2000262c <can1_init+0x1ec>)
200025e8:	0018      	movs	r0, r3
200025ea:	f000 f939 	bl	20002860 <DUMP>

    *((void (**)(void) ) CAN1_IRQ_VECTOR ) = interrupt;
200025ee:	4b10      	ldr	r3, [pc, #64]	; (20002630 <can1_init+0x1f0>)
200025f0:	687a      	ldr	r2, [r7, #4]
200025f2:	601a      	str	r2, [r3, #0]
200025f4:	2330      	movs	r3, #48	; 0x30
200025f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
200025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200025fa:	f383 8811 	msr	BASEPRI, r3
    
    __set_BASEPRI(__ENABLED_PRIORITY << (8 - __NVIC_PRIO_BITS));
    NVIC_SetPriority( CAN1_RX0_IRQn, __IRQ_PRIORITY);
200025fe:	2102      	movs	r1, #2
20002600:	2014      	movs	r0, #20
20002602:	f7ff feed 	bl	200023e0 <NVIC_SetPriority>
    NVIC_EnableIRQ( CAN1_RX0_IRQn);
20002606:	2014      	movs	r0, #20
20002608:	f7ff fece 	bl	200023a8 <NVIC_EnableIRQ>
    CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
2000260c:	4b05      	ldr	r3, [pc, #20]	; (20002624 <can1_init+0x1e4>)
2000260e:	2201      	movs	r2, #1
20002610:	2102      	movs	r1, #2
20002612:	0018      	movs	r0, r3
20002614:	f7ff fc6f 	bl	20001ef6 <CAN_ITConfig>
}
20002618:	46c0      	nop			; (mov r8, r8)
2000261a:	46bd      	mov	sp, r7
2000261c:	b00d      	add	sp, #52	; 0x34
2000261e:	bd90      	pop	{r4, r7, pc}
20002620:	40020400 	andmi	r0, r2, r0, lsl #8
20002624:	40006400 	andmi	r6, r0, r0, lsl #8
20002628:	20002ac8 	andcs	r2, r0, r8, asr #21
2000262c:	20002adc 	ldrdcs	r2, [r0], -ip
20002630:	2001c090 	mulcs	r1, r0, r0

20002634 <can_receive>:

//
// Read a message from the CAN bus and copy it to the supplied message data structure
//
int can_receive(CANMsg *msg){
20002634:	b590      	push	{r4, r7, lr}
20002636:	b089      	sub	sp, #36	; 0x24
20002638:	af00      	add	r7, sp, #0
2000263a:	6078      	str	r0, [r7, #4]
    uchar index;
    CanRxMsg RxMessage;

    if (CAN_GetFlagStatus( CAN1, CAN_FLAG_FMP0) != SET)  // Data received in FIFO0
2000263c:	4a27      	ldr	r2, [pc, #156]	; (200026dc <can_receive+0xa8>)
2000263e:	4b28      	ldr	r3, [pc, #160]	; (200026e0 <can_receive+0xac>)
20002640:	0011      	movs	r1, r2
20002642:	0018      	movs	r0, r3
20002644:	f7ff fc74 	bl	20001f30 <CAN_GetFlagStatus>
20002648:	0003      	movs	r3, r0
2000264a:	2b01      	cmp	r3, #1
2000264c:	d001      	beq.n	20002652 <can_receive+0x1e>
        return 0;
2000264e:	2300      	movs	r3, #0
20002650:	e03f      	b.n	200026d2 <can_receive+0x9e>


    CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
20002652:	2108      	movs	r1, #8
20002654:	000c      	movs	r4, r1
20002656:	187b      	adds	r3, r7, r1
20002658:	4821      	ldr	r0, [pc, #132]	; (200026e0 <can_receive+0xac>)
2000265a:	001a      	movs	r2, r3
2000265c:	2100      	movs	r1, #0
2000265e:	f7ff fa08 	bl	20001a72 <CAN_Receive>

    msg->msgId  = (RxMessage.StdId >> 4) & 0x7F;
20002662:	0021      	movs	r1, r4
20002664:	187b      	adds	r3, r7, r1
20002666:	681b      	ldr	r3, [r3, #0]
20002668:	091b      	lsrs	r3, r3, #4
2000266a:	b2db      	uxtb	r3, r3
2000266c:	227f      	movs	r2, #127	; 0x7f
2000266e:	4013      	ands	r3, r2
20002670:	b2da      	uxtb	r2, r3
20002672:	687b      	ldr	r3, [r7, #4]
20002674:	701a      	strb	r2, [r3, #0]
    msg->nodeId = RxMessage.StdId & 0x0F;
20002676:	187b      	adds	r3, r7, r1
20002678:	681b      	ldr	r3, [r3, #0]
2000267a:	b2db      	uxtb	r3, r3
2000267c:	220f      	movs	r2, #15
2000267e:	4013      	ands	r3, r2
20002680:	b2da      	uxtb	r2, r3
20002682:	687b      	ldr	r3, [r7, #4]
20002684:	705a      	strb	r2, [r3, #1]
    msg->length = (RxMessage.DLC & 0x0F);
20002686:	187b      	adds	r3, r7, r1
20002688:	7a9b      	ldrb	r3, [r3, #10]
2000268a:	220f      	movs	r2, #15
2000268c:	4013      	ands	r3, r2
2000268e:	b2da      	uxtb	r2, r3
20002690:	687b      	ldr	r3, [r7, #4]
20002692:	709a      	strb	r2, [r3, #2]

    for (index = 0; index < msg->length; index++) {
20002694:	231f      	movs	r3, #31
20002696:	18fb      	adds	r3, r7, r3
20002698:	2200      	movs	r2, #0
2000269a:	701a      	strb	r2, [r3, #0]
2000269c:	e011      	b.n	200026c2 <can_receive+0x8e>
        // Get received data
        msg->buff[index] = RxMessage.Data[index];
2000269e:	201f      	movs	r0, #31
200026a0:	183b      	adds	r3, r7, r0
200026a2:	781a      	ldrb	r2, [r3, #0]
200026a4:	183b      	adds	r3, r7, r0
200026a6:	781b      	ldrb	r3, [r3, #0]
200026a8:	2108      	movs	r1, #8
200026aa:	1879      	adds	r1, r7, r1
200026ac:	188a      	adds	r2, r1, r2
200026ae:	7ad1      	ldrb	r1, [r2, #11]
200026b0:	687a      	ldr	r2, [r7, #4]
200026b2:	18d3      	adds	r3, r2, r3
200026b4:	1c0a      	adds	r2, r1, #0
200026b6:	70da      	strb	r2, [r3, #3]
    for (index = 0; index < msg->length; index++) {
200026b8:	183b      	adds	r3, r7, r0
200026ba:	781a      	ldrb	r2, [r3, #0]
200026bc:	183b      	adds	r3, r7, r0
200026be:	3201      	adds	r2, #1
200026c0:	701a      	strb	r2, [r3, #0]
200026c2:	687b      	ldr	r3, [r7, #4]
200026c4:	789b      	ldrb	r3, [r3, #2]
200026c6:	221f      	movs	r2, #31
200026c8:	18ba      	adds	r2, r7, r2
200026ca:	7812      	ldrb	r2, [r2, #0]
200026cc:	429a      	cmp	r2, r3
200026ce:	d3e6      	bcc.n	2000269e <can_receive+0x6a>
    }
    return 1;
200026d0:	2301      	movs	r3, #1
}
200026d2:	0018      	movs	r0, r3
200026d4:	46bd      	mov	sp, r7
200026d6:	b009      	add	sp, #36	; 0x24
200026d8:	bd90      	pop	{r4, r7, pc}
200026da:	46c0      	nop			; (mov r8, r8)
200026dc:	12000003 	andne	r0, r0, #3
200026e0:	40006400 	andmi	r6, r0, r0, lsl #8

200026e4 <can_send>:

//
// Copy the given message to a transmit buffer and send the message
//
int can_send(CANMsg *msg){
200026e4:	b5b0      	push	{r4, r5, r7, lr}
200026e6:	b08a      	sub	sp, #40	; 0x28
200026e8:	af00      	add	r7, sp, #0
200026ea:	6078      	str	r0, [r7, #4]
    uchar index;
    CAN_TypeDef* canport = CAN1;
200026ec:	4b2c      	ldr	r3, [pc, #176]	; (200027a0 <can_send+0xbc>)
200026ee:	623b      	str	r3, [r7, #32]
    CanTxMsg TxMessage;
    uint8_t TransmitMailbox = 0;
200026f0:	231f      	movs	r3, #31
200026f2:	18fb      	adds	r3, r7, r3
200026f4:	2200      	movs	r2, #0
200026f6:	701a      	strb	r2, [r3, #0]
    
    //set the transmit ID, standard identifiers are used, combine IDs
    TxMessage.StdId = (msg->msgId<<4) + msg->nodeId;
200026f8:	687b      	ldr	r3, [r7, #4]
200026fa:	781b      	ldrb	r3, [r3, #0]
200026fc:	011b      	lsls	r3, r3, #4
200026fe:	687a      	ldr	r2, [r7, #4]
20002700:	7852      	ldrb	r2, [r2, #1]
20002702:	189b      	adds	r3, r3, r2
20002704:	001a      	movs	r2, r3
20002706:	2108      	movs	r1, #8
20002708:	187b      	adds	r3, r7, r1
2000270a:	601a      	str	r2, [r3, #0]
    TxMessage.RTR = CAN_RTR_Data;
2000270c:	187b      	adds	r3, r7, r1
2000270e:	2200      	movs	r2, #0
20002710:	725a      	strb	r2, [r3, #9]
    TxMessage.IDE = CAN_Id_Standard;
20002712:	187b      	adds	r3, r7, r1
20002714:	2200      	movs	r2, #0
20002716:	721a      	strb	r2, [r3, #8]
    if (msg->length > 8) 
20002718:	687b      	ldr	r3, [r7, #4]
2000271a:	789b      	ldrb	r3, [r3, #2]
2000271c:	2b08      	cmp	r3, #8
2000271e:	d902      	bls.n	20002726 <can_send+0x42>
        msg->length = 8; 
20002720:	687b      	ldr	r3, [r7, #4]
20002722:	2208      	movs	r2, #8
20002724:	709a      	strb	r2, [r3, #2]
    TxMessage.DLC = msg->length; // set number of bytes to send
20002726:	687b      	ldr	r3, [r7, #4]
20002728:	789a      	ldrb	r2, [r3, #2]
2000272a:	2308      	movs	r3, #8
2000272c:	18fb      	adds	r3, r7, r3
2000272e:	729a      	strb	r2, [r3, #10]
    
    for (index = 0; index < msg->length; index++) {
20002730:	2327      	movs	r3, #39	; 0x27
20002732:	18fb      	adds	r3, r7, r3
20002734:	2200      	movs	r2, #0
20002736:	701a      	strb	r2, [r3, #0]
20002738:	e011      	b.n	2000275e <can_send+0x7a>
        TxMessage.Data[index] = msg->buff[index]; //copy data to buffer
2000273a:	2027      	movs	r0, #39	; 0x27
2000273c:	183b      	adds	r3, r7, r0
2000273e:	781a      	ldrb	r2, [r3, #0]
20002740:	183b      	adds	r3, r7, r0
20002742:	781b      	ldrb	r3, [r3, #0]
20002744:	6879      	ldr	r1, [r7, #4]
20002746:	188a      	adds	r2, r1, r2
20002748:	78d1      	ldrb	r1, [r2, #3]
2000274a:	2208      	movs	r2, #8
2000274c:	18ba      	adds	r2, r7, r2
2000274e:	18d3      	adds	r3, r2, r3
20002750:	1c0a      	adds	r2, r1, #0
20002752:	72da      	strb	r2, [r3, #11]
    for (index = 0; index < msg->length; index++) {
20002754:	183b      	adds	r3, r7, r0
20002756:	781a      	ldrb	r2, [r3, #0]
20002758:	183b      	adds	r3, r7, r0
2000275a:	3201      	adds	r2, #1
2000275c:	701a      	strb	r2, [r3, #0]
2000275e:	687b      	ldr	r3, [r7, #4]
20002760:	789b      	ldrb	r3, [r3, #2]
20002762:	2227      	movs	r2, #39	; 0x27
20002764:	18ba      	adds	r2, r7, r2
20002766:	7812      	ldrb	r2, [r2, #0]
20002768:	429a      	cmp	r2, r3
2000276a:	d3e6      	bcc.n	2000273a <can_send+0x56>
    }

    TransmitMailbox = CAN_Transmit(canport, &TxMessage);
2000276c:	251f      	movs	r5, #31
2000276e:	197c      	adds	r4, r7, r5
20002770:	2308      	movs	r3, #8
20002772:	18fa      	adds	r2, r7, r3
20002774:	6a3b      	ldr	r3, [r7, #32]
20002776:	0011      	movs	r1, r2
20002778:	0018      	movs	r0, r3
2000277a:	f7fe fff3 	bl	20001764 <CAN_Transmit>
2000277e:	0003      	movs	r3, r0
20002780:	7023      	strb	r3, [r4, #0]

    if (TransmitMailbox == CAN_TxStatus_NoMailBox) {
20002782:	197b      	adds	r3, r7, r5
20002784:	781b      	ldrb	r3, [r3, #0]
20002786:	2b04      	cmp	r3, #4
20002788:	d105      	bne.n	20002796 <can_send+0xb2>
        DUMP("CAN TxBuf full!\n\r");
2000278a:	4b06      	ldr	r3, [pc, #24]	; (200027a4 <can_send+0xc0>)
2000278c:	0018      	movs	r0, r3
2000278e:	f000 f867 	bl	20002860 <DUMP>
        return 1;
20002792:	2301      	movs	r3, #1
20002794:	e000      	b.n	20002798 <can_send+0xb4>
        DUMP("CAN Tx fail!\n\r");
        return 1;
    }
#endif
    
    return 0;
20002796:	2300      	movs	r3, #0
}
20002798:	0018      	movs	r0, r3
2000279a:	46bd      	mov	sp, r7
2000279c:	b00a      	add	sp, #40	; 0x28
2000279e:	bdb0      	pop	{r4, r5, r7, pc}
200027a0:	40006400 	andmi	r6, r0, r0, lsl #8
200027a4:	20002af4 	strdcs	r2, [r0], -r4

200027a8 <_outchar>:
    volatile unsigned short gtpr;
} USART;

#define USART1  ((USART *) 0x40011000) 

void _outchar( char c ) {
200027a8:	b580      	push	{r7, lr}
200027aa:	b082      	sub	sp, #8
200027ac:	af00      	add	r7, sp, #0
200027ae:	0002      	movs	r2, r0
200027b0:	1dfb      	adds	r3, r7, #7
200027b2:	701a      	strb	r2, [r3, #0]
    /* write character to usart1 */
    while (( USART1->sr & 0x80)==0);
200027b4:	46c0      	nop			; (mov r8, r8)
200027b6:	4b0b      	ldr	r3, [pc, #44]	; (200027e4 <_outchar+0x3c>)
200027b8:	881b      	ldrh	r3, [r3, #0]
200027ba:	b29b      	uxth	r3, r3
200027bc:	001a      	movs	r2, r3
200027be:	2380      	movs	r3, #128	; 0x80
200027c0:	4013      	ands	r3, r2
200027c2:	d0f8      	beq.n	200027b6 <_outchar+0xe>
    USART1->dr = (unsigned short) c;
200027c4:	4a07      	ldr	r2, [pc, #28]	; (200027e4 <_outchar+0x3c>)
200027c6:	1dfb      	adds	r3, r7, #7
200027c8:	781b      	ldrb	r3, [r3, #0]
200027ca:	b29b      	uxth	r3, r3
200027cc:	8093      	strh	r3, [r2, #4]
    if( c == '\n')
200027ce:	1dfb      	adds	r3, r7, #7
200027d0:	781b      	ldrb	r3, [r3, #0]
200027d2:	2b0a      	cmp	r3, #10
200027d4:	d102      	bne.n	200027dc <_outchar+0x34>
            _outchar('\r');
200027d6:	200d      	movs	r0, #13
200027d8:	f7ff ffe6 	bl	200027a8 <_outchar>
}
200027dc:	46c0      	nop			; (mov r8, r8)
200027de:	46bd      	mov	sp, r7
200027e0:	b002      	add	sp, #8
200027e2:	bd80      	pop	{r7, pc}
200027e4:	40011000 	andmi	r1, r1, r0

200027e8 <_tstchar>:

char _tstchar(void) {
200027e8:	b580      	push	{r7, lr}
200027ea:	af00      	add	r7, sp, #0
    /* see if character arrived at usart1,
        if not, return 0
        else return character
        */
    if( (USART1->sr & 0x20)==0)
200027ec:	4b07      	ldr	r3, [pc, #28]	; (2000280c <_tstchar+0x24>)
200027ee:	881b      	ldrh	r3, [r3, #0]
200027f0:	b29b      	uxth	r3, r3
200027f2:	001a      	movs	r2, r3
200027f4:	2320      	movs	r3, #32
200027f6:	4013      	ands	r3, r2
200027f8:	d101      	bne.n	200027fe <_tstchar+0x16>
        return 0;
200027fa:	2300      	movs	r3, #0
200027fc:	e003      	b.n	20002806 <_tstchar+0x1e>
    return (char) USART1->dr;
200027fe:	4b03      	ldr	r3, [pc, #12]	; (2000280c <_tstchar+0x24>)
20002800:	889b      	ldrh	r3, [r3, #4]
20002802:	b29b      	uxth	r3, r3
20002804:	b2db      	uxtb	r3, r3
}
20002806:	0018      	movs	r0, r3
20002808:	46bd      	mov	sp, r7
2000280a:	bd80      	pop	{r7, pc}
2000280c:	40011000 	andmi	r1, r1, r0

20002810 <_getchar>:

char _getchar(void) {
20002810:	b580      	push	{r7, lr}
20002812:	af00      	add	r7, sp, #0
    /* wait until character arrived at usart1,
        return character
        */
    while( (USART1->sr & 0x20)==0)
20002814:	46c0      	nop			; (mov r8, r8)
20002816:	4b07      	ldr	r3, [pc, #28]	; (20002834 <_getchar+0x24>)
20002818:	881b      	ldrh	r3, [r3, #0]
2000281a:	b29b      	uxth	r3, r3
2000281c:	001a      	movs	r2, r3
2000281e:	2320      	movs	r3, #32
20002820:	4013      	ands	r3, r2
20002822:	d0f8      	beq.n	20002816 <_getchar+0x6>
        ;
    return (char) USART1->dr;
20002824:	4b03      	ldr	r3, [pc, #12]	; (20002834 <_getchar+0x24>)
20002826:	889b      	ldrh	r3, [r3, #4]
20002828:	b29b      	uxth	r3, r3
2000282a:	b2db      	uxtb	r3, r3
}
2000282c:	0018      	movs	r0, r3
2000282e:	46bd      	mov	sp, r7
20002830:	bd80      	pop	{r7, pc}
20002832:	46c0      	nop			; (mov r8, r8)
20002834:	40011000 	andmi	r1, r1, r0

20002838 <usart_send>:

void usart_send(char* s){
20002838:	b580      	push	{r7, lr}
2000283a:	b082      	sub	sp, #8
2000283c:	af00      	add	r7, sp, #0
2000283e:	6078      	str	r0, [r7, #4]
   while (*s != '\0')
20002840:	e006      	b.n	20002850 <usart_send+0x18>
       _outchar(*(s++));
20002842:	687b      	ldr	r3, [r7, #4]
20002844:	1c5a      	adds	r2, r3, #1
20002846:	607a      	str	r2, [r7, #4]
20002848:	781b      	ldrb	r3, [r3, #0]
2000284a:	0018      	movs	r0, r3
2000284c:	f7ff ffac 	bl	200027a8 <_outchar>
   while (*s != '\0')
20002850:	687b      	ldr	r3, [r7, #4]
20002852:	781b      	ldrb	r3, [r3, #0]
20002854:	2b00      	cmp	r3, #0
20002856:	d1f4      	bne.n	20002842 <usart_send+0xa>
}
20002858:	46c0      	nop			; (mov r8, r8)
2000285a:	46bd      	mov	sp, r7
2000285c:	b002      	add	sp, #8
2000285e:	bd80      	pop	{r7, pc}

20002860 <DUMP>:

void DUMP(char *s) {
20002860:	b580      	push	{r7, lr}
20002862:	b082      	sub	sp, #8
20002864:	af00      	add	r7, sp, #0
20002866:	6078      	str	r0, [r7, #4]
#ifdef __DUMP_ENABLED
   usart_send(s);
20002868:	687b      	ldr	r3, [r7, #4]
2000286a:	0018      	movs	r0, r3
2000286c:	f7ff ffe4 	bl	20002838 <usart_send>
   _outchar('\n');
20002870:	200a      	movs	r0, #10
20002872:	f7ff ff99 	bl	200027a8 <_outchar>
#endif
}
20002876:	46c0      	nop			; (mov r8, r8)
20002878:	46bd      	mov	sp, r7
2000287a:	b002      	add	sp, #8
2000287c:	bd80      	pop	{r7, pc}
2000287e:	46c0      	nop			; (mov r8, r8)

20002880 <receiver>:
void receiver(void) {
20002880:	b580      	push	{r7, lr}
20002882:	b084      	sub	sp, #16
20002884:	af00      	add	r7, sp, #0
	DUMP("CAN message received: ");
20002886:	4b0c      	ldr	r3, [pc, #48]	; (200028b8 <receiver+0x38>)
20002888:	0018      	movs	r0, r3
2000288a:	f7ff ffe9 	bl	20002860 <DUMP>
    if (can_receive(&msg))
2000288e:	1d3b      	adds	r3, r7, #4
20002890:	0018      	movs	r0, r3
20002892:	f7ff fecf 	bl	20002634 <can_receive>
20002896:	1e03      	subs	r3, r0, #0
20002898:	d005      	beq.n	200028a6 <receiver+0x26>
	    DUMP((char*)msg.buff);
2000289a:	1d3b      	adds	r3, r7, #4
2000289c:	3303      	adds	r3, #3
2000289e:	0018      	movs	r0, r3
200028a0:	f7ff ffde 	bl	20002860 <DUMP>
}
200028a4:	e003      	b.n	200028ae <receiver+0x2e>
        DUMP("***Error: Something went wrong :(");
200028a6:	4b05      	ldr	r3, [pc, #20]	; (200028bc <receiver+0x3c>)
200028a8:	0018      	movs	r0, r3
200028aa:	f7ff ffd9 	bl	20002860 <DUMP>
}
200028ae:	46c0      	nop			; (mov r8, r8)
200028b0:	46bd      	mov	sp, r7
200028b2:	b004      	add	sp, #16
200028b4:	bd80      	pop	{r7, pc}
200028b6:	46c0      	nop			; (mov r8, r8)
200028b8:	20002b08 	andcs	r2, r0, r8, lsl #22
200028bc:	20002b20 	andcs	r2, r0, r0, lsr #22

200028c0 <main>:
void main() {
200028c0:	b580      	push	{r7, lr}
200028c2:	b084      	sub	sp, #16
200028c4:	af00      	add	r7, sp, #0
	DUMP("\nStarting application");
200028c6:	4b2f      	ldr	r3, [pc, #188]	; (20002984 <main+0xc4>)
200028c8:	0018      	movs	r0, r3
200028ca:	f7ff ffc9 	bl	20002860 <DUMP>
    can1_init(receiver);
200028ce:	4b2e      	ldr	r3, [pc, #184]	; (20002988 <main+0xc8>)
200028d0:	0018      	movs	r0, r3
200028d2:	f7ff fdb5 	bl	20002440 <can1_init>
	DUMP("CAN initated");
200028d6:	4b2d      	ldr	r3, [pc, #180]	; (2000298c <main+0xcc>)
200028d8:	0018      	movs	r0, r3
200028da:	f7ff ffc1 	bl	20002860 <DUMP>
    msg.msgId = 1;
200028de:	003b      	movs	r3, r7
200028e0:	2201      	movs	r2, #1
200028e2:	701a      	strb	r2, [r3, #0]
    msg.nodeId = 1;
200028e4:	003b      	movs	r3, r7
200028e6:	2201      	movs	r2, #1
200028e8:	705a      	strb	r2, [r3, #1]
    msg.length = 6;
200028ea:	003b      	movs	r3, r7
200028ec:	2206      	movs	r2, #6
200028ee:	709a      	strb	r2, [r3, #2]
    msg.buff[0] = 'H';
200028f0:	003b      	movs	r3, r7
200028f2:	2248      	movs	r2, #72	; 0x48
200028f4:	70da      	strb	r2, [r3, #3]
    msg.buff[1] = 'e';
200028f6:	003b      	movs	r3, r7
200028f8:	2265      	movs	r2, #101	; 0x65
200028fa:	711a      	strb	r2, [r3, #4]
    msg.buff[2] = 'l';
200028fc:	003b      	movs	r3, r7
200028fe:	226c      	movs	r2, #108	; 0x6c
20002900:	715a      	strb	r2, [r3, #5]
    msg.buff[3] = 'l';
20002902:	003b      	movs	r3, r7
20002904:	226c      	movs	r2, #108	; 0x6c
20002906:	719a      	strb	r2, [r3, #6]
    msg.buff[4] = 'o';
20002908:	003b      	movs	r3, r7
2000290a:	226f      	movs	r2, #111	; 0x6f
2000290c:	71da      	strb	r2, [r3, #7]
    msg.buff[5] = 0;
2000290e:	003b      	movs	r3, r7
20002910:	2200      	movs	r2, #0
20002912:	721a      	strb	r2, [r3, #8]
    can_send(&msg);
20002914:	003b      	movs	r3, r7
20002916:	0018      	movs	r0, r3
20002918:	f7ff fee4 	bl	200026e4 <can_send>
	DUMP("Hello message sent");
2000291c:	4b1c      	ldr	r3, [pc, #112]	; (20002990 <main+0xd0>)
2000291e:	0018      	movs	r0, r3
20002920:	f7ff ff9e 	bl	20002860 <DUMP>
      usart_send("Enter a seven letter message\n");
20002924:	4b1b      	ldr	r3, [pc, #108]	; (20002994 <main+0xd4>)
20002926:	0018      	movs	r0, r3
20002928:	f7ff ff86 	bl	20002838 <usart_send>
      for(int i = 0; i < 7; i++)
2000292c:	2300      	movs	r3, #0
2000292e:	60fb      	str	r3, [r7, #12]
20002930:	e00c      	b.n	2000294c <main+0x8c>
          msg.buff[i] = _getchar();
20002932:	f7ff ff6d 	bl	20002810 <_getchar>
20002936:	0003      	movs	r3, r0
20002938:	0019      	movs	r1, r3
2000293a:	003a      	movs	r2, r7
2000293c:	68fb      	ldr	r3, [r7, #12]
2000293e:	18d3      	adds	r3, r2, r3
20002940:	3303      	adds	r3, #3
20002942:	1c0a      	adds	r2, r1, #0
20002944:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < 7; i++)
20002946:	68fb      	ldr	r3, [r7, #12]
20002948:	3301      	adds	r3, #1
2000294a:	60fb      	str	r3, [r7, #12]
2000294c:	68fb      	ldr	r3, [r7, #12]
2000294e:	2b06      	cmp	r3, #6
20002950:	ddef      	ble.n	20002932 <main+0x72>
      msg.buff[7] = '\0';
20002952:	003b      	movs	r3, r7
20002954:	2200      	movs	r2, #0
20002956:	729a      	strb	r2, [r3, #10]
      msg.length=8;
20002958:	003b      	movs	r3, r7
2000295a:	2208      	movs	r2, #8
2000295c:	709a      	strb	r2, [r3, #2]
      can_send(&msg);
2000295e:	003b      	movs	r3, r7
20002960:	0018      	movs	r0, r3
20002962:	f7ff febf 	bl	200026e4 <can_send>
      usart_send("Message sent: ");
20002966:	4b0c      	ldr	r3, [pc, #48]	; (20002998 <main+0xd8>)
20002968:	0018      	movs	r0, r3
2000296a:	f7ff ff65 	bl	20002838 <usart_send>
      usart_send(msg.buff);
2000296e:	003b      	movs	r3, r7
20002970:	3303      	adds	r3, #3
20002972:	0018      	movs	r0, r3
20002974:	f7ff ff60 	bl	20002838 <usart_send>
      usart_send("\n");
20002978:	4b08      	ldr	r3, [pc, #32]	; (2000299c <main+0xdc>)
2000297a:	0018      	movs	r0, r3
2000297c:	f7ff ff5c 	bl	20002838 <usart_send>
      usart_send("Enter a seven letter message\n");
20002980:	e7d0      	b.n	20002924 <main+0x64>
20002982:	46c0      	nop			; (mov r8, r8)
20002984:	20002b44 	andcs	r2, r0, r4, asr #22
20002988:	20002881 	andcs	r2, r0, r1, lsl #17
2000298c:	20002b5c 	andcs	r2, r0, ip, asr fp
20002990:	20002b6c 	andcs	r2, r0, ip, ror #22
20002994:	20002b80 	andcs	r2, r0, r0, lsl #23
20002998:	20002ba0 	andcs	r2, r0, r0, lsr #23
2000299c:	20002bb0 			; <UNDEFINED> instruction: 0x20002bb0

200029a0 <__udivsi3>:
200029a0:	2200      	movs	r2, #0
200029a2:	0843      	lsrs	r3, r0, #1
200029a4:	428b      	cmp	r3, r1
200029a6:	d374      	bcc.n	20002a92 <__udivsi3+0xf2>
200029a8:	0903      	lsrs	r3, r0, #4
200029aa:	428b      	cmp	r3, r1
200029ac:	d35f      	bcc.n	20002a6e <__udivsi3+0xce>
200029ae:	0a03      	lsrs	r3, r0, #8
200029b0:	428b      	cmp	r3, r1
200029b2:	d344      	bcc.n	20002a3e <__udivsi3+0x9e>
200029b4:	0b03      	lsrs	r3, r0, #12
200029b6:	428b      	cmp	r3, r1
200029b8:	d328      	bcc.n	20002a0c <__udivsi3+0x6c>
200029ba:	0c03      	lsrs	r3, r0, #16
200029bc:	428b      	cmp	r3, r1
200029be:	d30d      	bcc.n	200029dc <__udivsi3+0x3c>
200029c0:	22ff      	movs	r2, #255	; 0xff
200029c2:	0209      	lsls	r1, r1, #8
200029c4:	ba12      	rev	r2, r2
200029c6:	0c03      	lsrs	r3, r0, #16
200029c8:	428b      	cmp	r3, r1
200029ca:	d302      	bcc.n	200029d2 <__udivsi3+0x32>
200029cc:	1212      	asrs	r2, r2, #8
200029ce:	0209      	lsls	r1, r1, #8
200029d0:	d065      	beq.n	20002a9e <__udivsi3+0xfe>
200029d2:	0b03      	lsrs	r3, r0, #12
200029d4:	428b      	cmp	r3, r1
200029d6:	d319      	bcc.n	20002a0c <__udivsi3+0x6c>
200029d8:	e000      	b.n	200029dc <__udivsi3+0x3c>
200029da:	0a09      	lsrs	r1, r1, #8
200029dc:	0bc3      	lsrs	r3, r0, #15
200029de:	428b      	cmp	r3, r1
200029e0:	d301      	bcc.n	200029e6 <__udivsi3+0x46>
200029e2:	03cb      	lsls	r3, r1, #15
200029e4:	1ac0      	subs	r0, r0, r3
200029e6:	4152      	adcs	r2, r2
200029e8:	0b83      	lsrs	r3, r0, #14
200029ea:	428b      	cmp	r3, r1
200029ec:	d301      	bcc.n	200029f2 <__udivsi3+0x52>
200029ee:	038b      	lsls	r3, r1, #14
200029f0:	1ac0      	subs	r0, r0, r3
200029f2:	4152      	adcs	r2, r2
200029f4:	0b43      	lsrs	r3, r0, #13
200029f6:	428b      	cmp	r3, r1
200029f8:	d301      	bcc.n	200029fe <__udivsi3+0x5e>
200029fa:	034b      	lsls	r3, r1, #13
200029fc:	1ac0      	subs	r0, r0, r3
200029fe:	4152      	adcs	r2, r2
20002a00:	0b03      	lsrs	r3, r0, #12
20002a02:	428b      	cmp	r3, r1
20002a04:	d301      	bcc.n	20002a0a <__udivsi3+0x6a>
20002a06:	030b      	lsls	r3, r1, #12
20002a08:	1ac0      	subs	r0, r0, r3
20002a0a:	4152      	adcs	r2, r2
20002a0c:	0ac3      	lsrs	r3, r0, #11
20002a0e:	428b      	cmp	r3, r1
20002a10:	d301      	bcc.n	20002a16 <__udivsi3+0x76>
20002a12:	02cb      	lsls	r3, r1, #11
20002a14:	1ac0      	subs	r0, r0, r3
20002a16:	4152      	adcs	r2, r2
20002a18:	0a83      	lsrs	r3, r0, #10
20002a1a:	428b      	cmp	r3, r1
20002a1c:	d301      	bcc.n	20002a22 <__udivsi3+0x82>
20002a1e:	028b      	lsls	r3, r1, #10
20002a20:	1ac0      	subs	r0, r0, r3
20002a22:	4152      	adcs	r2, r2
20002a24:	0a43      	lsrs	r3, r0, #9
20002a26:	428b      	cmp	r3, r1
20002a28:	d301      	bcc.n	20002a2e <__udivsi3+0x8e>
20002a2a:	024b      	lsls	r3, r1, #9
20002a2c:	1ac0      	subs	r0, r0, r3
20002a2e:	4152      	adcs	r2, r2
20002a30:	0a03      	lsrs	r3, r0, #8
20002a32:	428b      	cmp	r3, r1
20002a34:	d301      	bcc.n	20002a3a <__udivsi3+0x9a>
20002a36:	020b      	lsls	r3, r1, #8
20002a38:	1ac0      	subs	r0, r0, r3
20002a3a:	4152      	adcs	r2, r2
20002a3c:	d2cd      	bcs.n	200029da <__udivsi3+0x3a>
20002a3e:	09c3      	lsrs	r3, r0, #7
20002a40:	428b      	cmp	r3, r1
20002a42:	d301      	bcc.n	20002a48 <__udivsi3+0xa8>
20002a44:	01cb      	lsls	r3, r1, #7
20002a46:	1ac0      	subs	r0, r0, r3
20002a48:	4152      	adcs	r2, r2
20002a4a:	0983      	lsrs	r3, r0, #6
20002a4c:	428b      	cmp	r3, r1
20002a4e:	d301      	bcc.n	20002a54 <__udivsi3+0xb4>
20002a50:	018b      	lsls	r3, r1, #6
20002a52:	1ac0      	subs	r0, r0, r3
20002a54:	4152      	adcs	r2, r2
20002a56:	0943      	lsrs	r3, r0, #5
20002a58:	428b      	cmp	r3, r1
20002a5a:	d301      	bcc.n	20002a60 <__udivsi3+0xc0>
20002a5c:	014b      	lsls	r3, r1, #5
20002a5e:	1ac0      	subs	r0, r0, r3
20002a60:	4152      	adcs	r2, r2
20002a62:	0903      	lsrs	r3, r0, #4
20002a64:	428b      	cmp	r3, r1
20002a66:	d301      	bcc.n	20002a6c <__udivsi3+0xcc>
20002a68:	010b      	lsls	r3, r1, #4
20002a6a:	1ac0      	subs	r0, r0, r3
20002a6c:	4152      	adcs	r2, r2
20002a6e:	08c3      	lsrs	r3, r0, #3
20002a70:	428b      	cmp	r3, r1
20002a72:	d301      	bcc.n	20002a78 <__udivsi3+0xd8>
20002a74:	00cb      	lsls	r3, r1, #3
20002a76:	1ac0      	subs	r0, r0, r3
20002a78:	4152      	adcs	r2, r2
20002a7a:	0883      	lsrs	r3, r0, #2
20002a7c:	428b      	cmp	r3, r1
20002a7e:	d301      	bcc.n	20002a84 <__udivsi3+0xe4>
20002a80:	008b      	lsls	r3, r1, #2
20002a82:	1ac0      	subs	r0, r0, r3
20002a84:	4152      	adcs	r2, r2
20002a86:	0843      	lsrs	r3, r0, #1
20002a88:	428b      	cmp	r3, r1
20002a8a:	d301      	bcc.n	20002a90 <__udivsi3+0xf0>
20002a8c:	004b      	lsls	r3, r1, #1
20002a8e:	1ac0      	subs	r0, r0, r3
20002a90:	4152      	adcs	r2, r2
20002a92:	1a41      	subs	r1, r0, r1
20002a94:	d200      	bcs.n	20002a98 <__udivsi3+0xf8>
20002a96:	4601      	mov	r1, r0
20002a98:	4152      	adcs	r2, r2
20002a9a:	4610      	mov	r0, r2
20002a9c:	4770      	bx	lr
20002a9e:	e7ff      	b.n	20002aa0 <__udivsi3+0x100>
20002aa0:	b501      	push	{r0, lr}
20002aa2:	2000      	movs	r0, #0
20002aa4:	f000 f806 	bl	20002ab4 <__aeabi_idiv0>
20002aa8:	bd02      	pop	{r1, pc}
20002aaa:	46c0      	nop			; (mov r8, r8)

20002aac <__aeabi_uidivmod>:
20002aac:	2900      	cmp	r1, #0
20002aae:	d0f7      	beq.n	20002aa0 <__udivsi3+0x100>
20002ab0:	e776      	b.n	200029a0 <__udivsi3>
20002ab2:	4770      	bx	lr

20002ab4 <__aeabi_idiv0>:
20002ab4:	4770      	bx	lr
20002ab6:	46c0      	nop			; (mov r8, r8)

20002ab8 <APBAHBPrescTable>:
20002ab8:	00000000 	andeq	r0, r0, r0
20002abc:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002ac0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
20002ac4:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
20002ac8:	204e4143 	subcs	r4, lr, r3, asr #2
20002acc:	49203123 	stmdbmi	r0!, {r0, r1, r5, r8, ip, sp}
20002ad0:	2074696e 	rsbscs	r6, r4, lr, ror #18
20002ad4:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
20002ad8:	00216465 	eoreq	r6, r1, r5, ror #8
20002adc:	204e4143 	subcs	r4, lr, r3, asr #2
20002ae0:	49203123 	stmdbmi	r0!, {r0, r1, r5, r8, ip, sp}
20002ae4:	2074696e 	rsbscs	r6, r4, lr, ror #18
20002ae8:	63637573 	cmnvs	r3, #482344960	; 0x1cc00000
20002aec:	66737365 	ldrbtvs	r7, [r3], -r5, ror #6
20002af0:	00216c75 	eoreq	r6, r1, r5, ror ip
20002af4:	204e4143 	subcs	r4, lr, r3, asr #2
20002af8:	75427854 	strbvc	r7, [r2, #-2132]	; 0xfffff7ac
20002afc:	75662066 	strbvc	r2, [r6, #-102]!	; 0xffffff9a
20002b00:	0a216c6c 	beq	2085dcb8 <APBAHBPrescTable+0x85b200>
20002b04:	0000000d 	andeq	r0, r0, sp
20002b08:	204e4143 	subcs	r4, lr, r3, asr #2
20002b0c:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
20002b10:	20656761 	rsbcs	r6, r5, r1, ror #14
20002b14:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
20002b18:	64657669 	strbtvs	r7, [r5], #-1641	; 0xfffff997
20002b1c:	0000203a 	andeq	r2, r0, sl, lsr r0
20002b20:	452a2a2a 	strmi	r2, [sl, #-2602]!	; 0xfffff5d6
20002b24:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
20002b28:	6f53203a 	svcvs	0x0053203a
20002b2c:	6874656d 	ldmdavs	r4!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
20002b30:	20676e69 	rsbcs	r6, r7, r9, ror #28
20002b34:	746e6577 	strbtvc	r6, [lr], #-1399	; 0xfffffa89
20002b38:	6f727720 	svcvs	0x00727720
20002b3c:	3a20676e 	bcc	2081c8fc <APBAHBPrescTable+0x819e44>
20002b40:	00000028 	andeq	r0, r0, r8, lsr #32
20002b44:	6174530a 	cmnvs	r4, sl, lsl #6
20002b48:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
20002b4c:	70612067 	rsbvc	r2, r1, r7, rrx
20002b50:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
20002b54:	6f697461 	svcvs	0x00697461
20002b58:	0000006e 	andeq	r0, r0, lr, rrx
20002b5c:	204e4143 	subcs	r4, lr, r3, asr #2
20002b60:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
20002b64:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
20002b68:	00000000 	andeq	r0, r0, r0
20002b6c:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
20002b70:	656d206f 	strbvs	r2, [sp, #-111]!	; 0xffffff91
20002b74:	67617373 			; <UNDEFINED> instruction: 0x67617373
20002b78:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
20002b7c:	0000746e 	andeq	r7, r0, lr, ror #8
20002b80:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
20002b84:	20612072 	rsbcs	r2, r1, r2, ror r0
20002b88:	65766573 	ldrbvs	r6, [r6, #-1395]!	; 0xfffffa8d
20002b8c:	656c206e 	strbvs	r2, [ip, #-110]!	; 0xffffff92
20002b90:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
20002b94:	73656d20 	cmnvc	r5, #32, 26	; 0x800
20002b98:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
20002b9c:	0000000a 	andeq	r0, r0, sl
20002ba0:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
20002ba4:	20656761 	rsbcs	r6, r5, r1, ror #14
20002ba8:	746e6573 	strbtvc	r6, [lr], #-1395	; 0xfffffa8d
20002bac:	0000203a 	andeq	r2, r0, sl, lsr r0
20002bb0:	0000000a 	andeq	r0, r0, sl

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000e1f 	andeq	r0, r0, pc, lsl lr
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000049a 	muleq	r0, sl, r4
      10:	0002360c 	andeq	r3, r2, ip, lsl #12
      14:	00029400 	andeq	r9, r2, r0, lsl #8
      18:	00001000 	andeq	r1, r0, r0
      1c:	000cb420 	andeq	fp, ip, r0, lsr #8
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000817 	andeq	r0, r0, r7, lsl r8
      2c:	00006c03 	andeq	r6, r0, r3, lsl #24
      30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
      34:	02000000 	andeq	r0, r0, #0
      38:	08150801 	ldmdaeq	r5, {r0, fp}
      3c:	02020000 	andeq	r0, r2, #0
      40:	00067705 	andeq	r7, r6, r5, lsl #14
      44:	07a70300 	streq	r0, [r7, r0, lsl #6]!
      48:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
      4c:	00000050 	andeq	r0, r0, r0, asr r0
      50:	e1070202 	tst	r7, r2, lsl #4
      54:	03000003 	movweq	r0, #3
      58:	000007ce 	andeq	r0, r0, lr, asr #15
      5c:	00624d02 	rsbeq	r4, r2, r2, lsl #26
      60:	04020000 	streq	r0, [r2], #-0
      64:	00020505 	andeq	r0, r2, r5, lsl #10
      68:	02c70300 	sbceq	r0, r7, #0, 6
      6c:	4f020000 	svcmi	0x00020000
      70:	00000074 	andeq	r0, r0, r4, ror r0
      74:	e0070402 	and	r0, r7, r2, lsl #8
      78:	02000000 	andeq	r0, r0, #0
      7c:	02000508 	andeq	r0, r0, #8, 10	; 0x2000000
      80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      84:	0000db07 	andeq	sp, r0, r7, lsl #22
      88:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      90:	e5070402 	str	r0, [r7, #-1026]	; 0xfffffbfe
      94:	03000000 	movweq	r0, #0
      98:	0000006e 	andeq	r0, r0, lr, rrx
      9c:	002c1803 	eoreq	r1, ip, r3, lsl #16
      a0:	97050000 	strls	r0, [r5, -r0]
      a4:	06000000 	streq	r0, [r0], -r0
      a8:	000000a2 	andeq	r0, r0, r2, lsr #1
      ac:	0007a903 	andeq	sl, r7, r3, lsl #18
      b0:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
      b4:	03000000 	movweq	r0, #0
      b8:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      bc:	00572c03 	subseq	r2, r7, r3, lsl #24
      c0:	b7060000 	strlt	r0, [r6, -r0]
      c4:	03000000 	movweq	r0, #0
      c8:	000002c9 	andeq	r0, r0, r9, asr #5
      cc:	00693003 	rsbeq	r3, r9, r3
      d0:	c7060000 	strgt	r0, [r6, -r0]
      d4:	07000000 	streq	r0, [r0, -r0]
      d8:	000000c7 	andeq	r0, r0, r7, asr #1
      dc:	000000e7 	andeq	r0, r0, r7, ror #1
      e0:	00009008 	andeq	r9, r0, r8
      e4:	09000100 	stmdbeq	r0, {r8}
      e8:	0000065a 	andeq	r0, r0, sl, asr r6
      ec:	c206a804 	andgt	sl, r6, #4, 16	; 0x40000
      f0:	0a000000 	beq	f8 <startup-0x1fffff08>
      f4:	00000343 	andeq	r0, r0, r3, asr #6
      f8:	00c73b05 	sbceq	r3, r7, r5, lsl #22
      fc:	070b0000 	streq	r0, [fp, -r0]
     100:	00003701 	andeq	r3, r0, r1, lsl #14
     104:	01f90600 	mvnseq	r0, r0, lsl #12
     108:	00000119 	andeq	r0, r0, r9, lsl r1
     10c:	0009d30c 	andeq	sp, r9, ip, lsl #6
     110:	530d0000 	movwpl	r0, #53248	; 0xd000
     114:	01005445 	tsteq	r0, r5, asr #8
     118:	06220e00 	strteq	r0, [r2], -r0, lsl #28
     11c:	f9060000 			; <UNDEFINED> instruction: 0xf9060000
     120:	0000fe01 	andeq	pc, r0, r1, lsl #28
     124:	10c40e00 	sbcne	r0, r4, r0, lsl #28
     128:	f9060000 			; <UNDEFINED> instruction: 0xf9060000
     12c:	0000fe01 	andeq	pc, r0, r1, lsl #28
     130:	01070b00 	tsteq	r7, r0, lsl #22
     134:	00000037 	andeq	r0, r0, r7, lsr r0
     138:	4c01fb06 			; <UNDEFINED> instruction: 0x4c01fb06
     13c:	0c000001 	stceq	0, cr0, [r0], {1}
     140:	0000033b 	andeq	r0, r0, fp, lsr r3
     144:	018c0c00 	orreq	r0, ip, r0, lsl #24
     148:	00010000 	andeq	r0, r1, r0
     14c:	0005770e 	andeq	r7, r5, lr, lsl #14
     150:	01fb0600 	mvnseq	r0, r0, lsl #12
     154:	00000131 	andeq	r0, r0, r1, lsr r1
     158:	3701070b 	strcc	r0, [r1, -fp, lsl #14]
     15c:	06000000 	streq	r0, [r0], -r0
     160:	017301fe 	ldrsheq	r0, [r3, #-30]!	; 0xffffffe2
     164:	940c0000 	strls	r0, [ip], #-0
     168:	00000004 	andeq	r0, r0, r4
     16c:	0008c30c 	andeq	ip, r8, ip, lsl #6
     170:	0e000100 	adfeqs	f0, f0, f0
     174:	000002d2 	ldrdeq	r0, [r0], -r2
     178:	5801fe06 	stmdapl	r1, {r1, r2, r9, sl, fp, ip, sp, lr, pc}
     17c:	0f000001 	svceq	0x00000001
     180:	04570690 	ldrbeq	r0, [r7], #-1680	; 0xfffff970
     184:	00000328 	andeq	r0, r0, r8, lsr #6
     188:	00524310 	subseq	r4, r2, r0, lsl r3
     18c:	d2045906 	andle	r5, r4, #98304	; 0x18000
     190:	00000000 	andeq	r0, r0, r0
     194:	00027911 	andeq	r7, r2, r1, lsl r9
     198:	045a0600 	ldrbeq	r0, [sl], #-1536	; 0xfffffa00
     19c:	000000d2 	ldrdeq	r0, [r0], -r2
     1a0:	05d01104 	ldrbeq	r1, [r0, #260]	; 0x104
     1a4:	5b060000 	blpl	1801ac <startup-0x1fe7fe54>
     1a8:	0000d204 	andeq	sp, r0, r4, lsl #4
     1ac:	43100800 	tstmi	r0, #0, 16
     1b0:	06005249 	streq	r5, [r0], -r9, asr #4
     1b4:	00d2045c 	sbcseq	r0, r2, ip, asr r4
     1b8:	110c0000 	mrsne	r0, (UNDEF: 12)
     1bc:	0000014e 	andeq	r0, r0, lr, asr #2
     1c0:	d2045d06 	andle	r5, r4, #384	; 0x180
     1c4:	10000000 	andne	r0, r0, r0
     1c8:	0007b211 	andeq	fp, r7, r1, lsl r2
     1cc:	045e0600 	ldrbeq	r0, [lr], #-1536	; 0xfffffa00
     1d0:	000000d2 	ldrdeq	r0, [r0], -r2
     1d4:	06bf1114 	ssateq	r1, #32, r4, lsl #2
     1d8:	5f060000 	svcpl	0x00060000
     1dc:	0000d204 	andeq	sp, r0, r4, lsl #4
     1e0:	d5111800 	ldrle	r1, [r1, #-2048]	; 0xfffff800
     1e4:	06000005 	streq	r0, [r0], -r5
     1e8:	00c70460 	sbceq	r0, r7, r0, ror #8
     1ec:	111c0000 	tstne	ip, r0
     1f0:	00000886 	andeq	r0, r0, r6, lsl #17
     1f4:	d2046106 	andle	r6, r4, #-2147483647	; 0x80000001
     1f8:	20000000 	andcs	r0, r0, r0
     1fc:	00019311 	andeq	r9, r1, r1, lsl r3
     200:	04620600 	strbteq	r0, [r2], #-1536	; 0xfffffa00
     204:	000000d2 	ldrdeq	r0, [r0], -r2
     208:	05df1124 	ldrbeq	r1, [pc, #292]	; 334 <startup-0x1ffffccc>
     20c:	63060000 	movwvs	r0, #24576	; 0x6000
     210:	0000d704 	andeq	sp, r0, r4, lsl #14
     214:	eb112800 	bl	44a21c <startup-0x1fbb5de4>
     218:	06000008 	streq	r0, [r0], -r8
     21c:	00d20464 	sbcseq	r0, r2, r4, ror #8
     220:	11300000 	teqne	r0, r0
     224:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     228:	d2046506 	andle	r6, r4, #25165824	; 0x1800000
     22c:	34000000 	strcc	r0, [r0], #-0
     230:	0006c811 	andeq	ip, r6, r1, lsl r8
     234:	04660600 	strbteq	r0, [r6], #-1536	; 0xfffffa00
     238:	000000d2 	ldrdeq	r0, [r0], -r2
     23c:	05e91138 	strbeq	r1, [r9, #312]!	; 0x138
     240:	67060000 	strvs	r0, [r6, -r0]
     244:	0000c704 	andeq	ip, r0, r4, lsl #14
     248:	e8113c00 	ldmda	r1, {sl, fp, ip, sp}
     24c:	06000007 	streq	r0, [r0], -r7
     250:	00d20468 	sbcseq	r0, r2, r8, ror #8
     254:	11400000 	mrsne	r0, (UNDEF: 64)
     258:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
     25c:	d2046906 	andle	r6, r4, #98304	; 0x18000
     260:	44000000 	strmi	r0, [r0], #-0
     264:	0005f311 	andeq	pc, r5, r1, lsl r3	; <UNPREDICTABLE>
     268:	046a0600 	strbteq	r0, [sl], #-1536	; 0xfffffa00
     26c:	000000d7 	ldrdeq	r0, [r0], -r7
     270:	01061148 	tsteq	r6, r8, asr #2
     274:	6b060000 	blvs	18027c <startup-0x1fe7fd84>
     278:	0000d204 	andeq	sp, r0, r4, lsl #4
     27c:	6d115000 	ldcvs	0, cr5, [r1, #-0]
     280:	06000005 	streq	r0, [r0], -r5
     284:	00d2046c 	sbcseq	r0, r2, ip, ror #8
     288:	11540000 	cmpne	r4, r0
     28c:	0000087c 	andeq	r0, r0, ip, ror r8
     290:	d2046d06 	andle	r6, r4, #384	; 0x180
     294:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     298:	0005fd11 	andeq	pc, r5, r1, lsl sp	; <UNPREDICTABLE>
     29c:	046e0600 	strbteq	r0, [lr], #-1536	; 0xfffffa00
     2a0:	000000c7 	andeq	r0, r0, r7, asr #1
     2a4:	0011115c 	andseq	r1, r1, ip, asr r1
     2a8:	6f060000 	svcvs	0x00060000
     2ac:	0000d204 	andeq	sp, r0, r4, lsl #4
     2b0:	47116000 	ldrmi	r6, [r1, -r0]
     2b4:	06000004 	streq	r0, [r0], -r4
     2b8:	00d20470 	sbcseq	r0, r2, r0, ror r4
     2bc:	11640000 	cmnne	r4, r0
     2c0:	00000607 	andeq	r0, r0, r7, lsl #12
     2c4:	d7047106 	strle	r7, [r4, -r6, lsl #2]
     2c8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     2cc:	00089a11 	andeq	r9, r8, r1, lsl sl
     2d0:	04720600 	ldrbteq	r0, [r2], #-1536	; 0xfffffa00
     2d4:	000000d2 	ldrdeq	r0, [r0], -r2
     2d8:	53431070 	movtpl	r1, #12400	; 0x3070
     2dc:	73060052 	movwvc	r0, #24658	; 0x6052
     2e0:	0000d204 	andeq	sp, r0, r4, lsl #4
     2e4:	11117400 	tstne	r1, r0, lsl #8
     2e8:	06000006 	streq	r0, [r0], -r6
     2ec:	00d70474 	sbcseq	r0, r7, r4, ror r4
     2f0:	11780000 	cmnne	r8, r0
     2f4:	00000876 	andeq	r0, r0, r6, ror r8
     2f8:	d2047506 	andle	r7, r4, #25165824	; 0x1800000
     2fc:	80000000 	andhi	r0, r0, r0
     300:	0003f411 	andeq	pc, r3, r1, lsl r4	; <UNPREDICTABLE>
     304:	04760600 	ldrbteq	r0, [r6], #-1536	; 0xfffffa00
     308:	000000d2 	ldrdeq	r0, [r0], -r2
     30c:	05ca1184 	strbeq	r1, [sl, #388]	; 0x184
     310:	77060000 	strvc	r0, [r6, -r0]
     314:	0000d204 	andeq	sp, r0, r4, lsl #4
     318:	38118800 	ldmdacc	r1, {fp, pc}
     31c:	06000001 	streq	r0, [r0], -r1
     320:	00d20478 	sbcseq	r0, r2, r8, ror r4
     324:	008c0000 	addeq	r0, ip, r0
     328:	00037b0e 	andeq	r7, r3, lr, lsl #22
     32c:	047a0600 	ldrbteq	r0, [sl], #-1536	; 0xfffffa00
     330:	0000017f 	andeq	r0, r0, pc, ror r1
     334:	30071012 	andcc	r1, r7, r2, lsl r0
     338:	0000036d 	andeq	r0, r0, sp, ror #6
     33c:	00005113 	andeq	r5, r0, r3, lsl r1
     340:	c7320700 	ldrgt	r0, [r2, -r0, lsl #14]!
     344:	00000000 	andeq	r0, r0, r0
     348:	00031613 	andeq	r1, r3, r3, lsl r6
     34c:	c7330700 	ldrgt	r0, [r3, -r0, lsl #14]!
     350:	04000000 	streq	r0, [r0], #-0
     354:	00072d13 	andeq	r2, r7, r3, lsl sp
     358:	c7340700 	ldrgt	r0, [r4, -r0, lsl #14]!
     35c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     360:	00016513 	andeq	r6, r1, r3, lsl r5
     364:	c7350700 	ldrgt	r0, [r5, -r0, lsl #14]!
     368:	0c000000 	stceq	0, cr0, [r0], {-0}
     36c:	08d90300 	ldmeq	r9, {r8, r9}^
     370:	36070000 	strcc	r0, [r7], -r0
     374:	00000334 	andeq	r0, r0, r4, lsr r3
     378:	0000a707 	andeq	sl, r0, r7, lsl #14
     37c:	00038800 	andeq	r8, r3, r0, lsl #16
     380:	00900800 	addseq	r0, r0, r0, lsl #16
     384:	000f0000 	andeq	r0, pc, r0
     388:	00037805 	andeq	r7, r3, r5, lsl #16
     38c:	03880600 	orreq	r0, r8, #0, 12
     390:	3d140000 	ldccc	0, cr0, [r4, #-0]
     394:	01000007 	tsteq	r0, r7
     398:	00038d8d 	andeq	r8, r3, sp, lsl #27
     39c:	b8030500 	stmdalt	r3, {r8, sl}
     3a0:	1520002a 	strne	r0, [r0, #-42]!	; 0xffffffd6
     3a4:	000000c5 	andeq	r0, r0, r5, asr #1
     3a8:	a4088f01 	strge	r8, [r8], #-3841	; 0xfffff0ff
     3ac:	2020000c 	eorcs	r0, r0, ip
     3b0:	01000000 	mrseq	r0, (UNDEF: 0)
     3b4:	0003c99c 	muleq	r3, ip, r9
     3b8:	01571600 	cmpeq	r7, r0, lsl #12
     3bc:	8f010000 	svchi	0x00010000
     3c0:	00009708 	andeq	r9, r0, r8, lsl #14
     3c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     3c8:	07d81700 	ldrbeq	r1, [r8, r0, lsl #14]
     3cc:	6d010000 	stcvs	0, cr0, [r1, #-0]
     3d0:	00012508 	andeq	r2, r1, r8, lsl #10
     3d4:	000c6000 	andeq	r6, ip, r0
     3d8:	00004420 	andeq	r4, r0, r0, lsr #8
     3dc:	029c0100 	addseq	r0, ip, #0, 2
     3e0:	16000004 	strne	r0, [r0], -r4
     3e4:	00000157 	andeq	r0, r0, r7, asr r1
     3e8:	97086d01 	strls	r6, [r8, -r1, lsl #26]
     3ec:	02000000 	andeq	r0, r0, #0
     3f0:	9d186f91 	ldcls	15, cr6, [r8, #-580]	; 0xfffffdbc
     3f4:	0100000f 	tsteq	r0, pc
     3f8:	0125086f 			; <UNDEFINED> instruction: 0x0125086f
     3fc:	91020000 	mrsls	r0, (UNDEF: 2)
     400:	40190077 	andsmi	r0, r9, r7, ror r0
     404:	01000001 	tsteq	r0, r1
     408:	0c440859 	mcrreq	8, 5, r0, r4, cr9
     40c:	001c2000 	andseq	r2, ip, r0
     410:	9c010000 	stcls	0, cr0, [r1], {-0}
     414:	00061b17 	andeq	r1, r6, r7, lsl fp
     418:	082c0100 	stmdaeq	ip!, {r8}
     41c:	00000119 	andeq	r0, r0, r9, lsl r1
     420:	20000bc0 	andcs	r0, r0, r0, asr #23
     424:	00000084 	andeq	r0, r0, r4, lsl #1
     428:	046b9c01 	strbteq	r9, [fp], #-3073	; 0xfffff3ff
     42c:	2d160000 	ldccs	0, cr0, [r6, #-0]
     430:	01000002 	tsteq	r0, r2
     434:	0097082c 	addseq	r0, r7, ip, lsr #16
     438:	91020000 	mrsls	r0, (UNDEF: 2)
     43c:	6d741a67 	vldmdbvs	r4!, {s3-s105}
     440:	2e010070 	mcrcs	0, 0, r0, cr1, cr0, {3}
     444:	0000c708 	andeq	ip, r0, r8, lsl #14
     448:	6c910200 	lfmvs	f0, 4, [r1], {0}
     44c:	00004718 	andeq	r4, r0, r8, lsl r7
     450:	082f0100 	stmdaeq	pc!, {r8}	; <UNPREDICTABLE>
     454:	000000c7 	andeq	r0, r0, r7, asr #1
     458:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     45c:	00000f9d 	muleq	r0, sp, pc	; <UNPREDICTABLE>
     460:	19083001 	stmdbne	r8, {r0, ip, sp}
     464:	02000001 	andeq	r0, r0, #1
     468:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     46c:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
     470:	70080701 	andvc	r0, r8, r1, lsl #14
     474:	5020000b 	eorpl	r0, r0, fp
     478:	01000000 	mrseq	r0, (UNDEF: 0)
     47c:	0004a09c 	muleq	r4, ip, r0
     480:	01571600 	cmpeq	r7, r0, lsl #12
     484:	07010000 	streq	r0, [r1, -r0]
     488:	00009708 	andeq	r9, r0, r8, lsl #14
     48c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     490:	00027016 	andeq	r7, r2, r6, lsl r0
     494:	08070100 	stmdaeq	r7, {r8}
     498:	0000014c 	andeq	r0, r0, ip, asr #2
     49c:	00769102 	rsbseq	r9, r6, r2, lsl #2
     4a0:	00011b15 	andeq	r1, r1, r5, lsl fp
     4a4:	07d90100 	ldrbeq	r0, [r9, r0, lsl #2]
     4a8:	20000b30 	andcs	r0, r0, r0, lsr fp
     4ac:	00000040 	andeq	r0, r0, r0, asr #32
     4b0:	04d59c01 	ldrbeq	r9, [r5], #3073	; 0xc01
     4b4:	32160000 	andscc	r0, r6, #0
     4b8:	01000008 	tsteq	r0, r8
     4bc:	00c707d9 	ldrdeq	r0, [r7], #121	; 0x79
     4c0:	91020000 	mrsls	r0, (UNDEF: 2)
     4c4:	02701674 	rsbseq	r1, r0, #116, 12	; 0x7400000
     4c8:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
     4cc:	00014c07 	andeq	r4, r1, r7, lsl #24
     4d0:	73910200 	orrsvc	r0, r1, #0, 4
     4d4:	06e71500 	strbteq	r1, [r7], r0, lsl #10
     4d8:	ac010000 	stcge	0, cr0, [r1], {-0}
     4dc:	000af007 	andeq	pc, sl, r7
     4e0:	00004020 	andeq	r4, r0, r0, lsr #32
     4e4:	0a9c0100 	beq	fe7008ec <APBAHBPrescTable+0xde6fde34>
     4e8:	16000005 	strne	r0, [r0], -r5
     4ec:	00000325 	andeq	r0, r0, r5, lsr #6
     4f0:	c707ac01 	strgt	sl, [r7, -r1, lsl #24]
     4f4:	02000000 	andeq	r0, r0, #0
     4f8:	70167491 	mulsvc	r6, r1, r4
     4fc:	01000002 	tsteq	r0, r2
     500:	014c07ac 	smlaltbeq	r0, ip, ip, r7
     504:	91020000 	mrsls	r0, (UNDEF: 2)
     508:	f8150073 			; <UNDEFINED> instruction: 0xf8150073
     50c:	01000007 	tsteq	r0, r7
     510:	0ab00778 	beq	fec022f8 <APBAHBPrescTable+0xdebff840>
     514:	00402000 	subeq	r2, r0, r0
     518:	9c010000 	stcls	0, cr0, [r1], {-0}
     51c:	0000053f 	andeq	r0, r0, pc, lsr r5
     520:	00045116 	andeq	r5, r4, r6, lsl r1
     524:	07780100 	ldrbeq	r0, [r8, -r0, lsl #2]!
     528:	000000c7 	andeq	r0, r0, r7, asr #1
     52c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     530:	00000270 	andeq	r0, r0, r0, ror r2
     534:	4c077801 	stcmi	8, cr7, [r7], {1}
     538:	02000001 	andeq	r0, r0, #1
     53c:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     540:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     544:	70075c01 	andvc	r5, r7, r1, lsl #24
     548:	4020000a 	eormi	r0, r0, sl
     54c:	01000000 	mrseq	r0, (UNDEF: 0)
     550:	0005749c 	muleq	r5, ip, r4
     554:	04381600 	ldrteq	r1, [r8], #-1536	; 0xfffffa00
     558:	5c010000 	stcpl	0, cr0, [r1], {-0}
     55c:	0000c707 	andeq	ip, r0, r7, lsl #14
     560:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     564:	00027016 	andeq	r7, r2, r6, lsl r0
     568:	075c0100 	ldrbeq	r0, [ip, -r0, lsl #2]
     56c:	0000014c 	andeq	r0, r0, ip, asr #2
     570:	00739102 	rsbseq	r9, r3, r2, lsl #2
     574:	00090e15 	andeq	r0, r9, r5, lsl lr
     578:	073c0100 	ldreq	r0, [ip, -r0, lsl #2]!
     57c:	20000a30 	andcs	r0, r0, r0, lsr sl
     580:	00000040 	andeq	r0, r0, r0, asr #32
     584:	05a99c01 	streq	r9, [r9, #3073]!	; 0xc01
     588:	f7160000 			; <UNDEFINED> instruction: 0xf7160000
     58c:	01000000 	mrseq	r0, (UNDEF: 0)
     590:	00c7073c 	sbceq	r0, r7, ip, lsr r7
     594:	91020000 	mrsls	r0, (UNDEF: 2)
     598:	02701674 	rsbseq	r1, r0, #116, 12	; 0x7400000
     59c:	3c010000 	stccc	0, cr0, [r1], {-0}
     5a0:	00014c07 	andeq	r4, r1, r7, lsl #24
     5a4:	73910200 	orrsvc	r0, r1, #0, 4
     5a8:	05931500 	ldreq	r1, [r3, #1280]	; 0x500
     5ac:	0b010000 	bleq	405b4 <startup-0x1ffbfa4c>
     5b0:	0009f007 	andeq	pc, r9, r7
     5b4:	00004020 	andeq	r4, r0, r0, lsr #32
     5b8:	de9c0100 	fmllee	f0, f4, f0
     5bc:	16000005 	strne	r0, [r0], -r5
     5c0:	00000832 	andeq	r0, r0, r2, lsr r8
     5c4:	c7070b01 	strgt	r0, [r7, -r1, lsl #22]
     5c8:	02000000 	andeq	r0, r0, #0
     5cc:	70167491 	mulsvc	r6, r1, r4
     5d0:	01000002 	tsteq	r0, r2
     5d4:	014c070b 	cmpeq	ip, fp, lsl #14
     5d8:	91020000 	mrsls	r0, (UNDEF: 2)
     5dc:	85150073 	ldrhi	r0, [r5, #-115]	; 0xffffff8d
     5e0:	01000000 	mrseq	r0, (UNDEF: 0)
     5e4:	09b006e2 	ldmibeq	r0!, {r1, r5, r6, r7, r9, sl}
     5e8:	00402000 	subeq	r2, r0, r0
     5ec:	9c010000 	stcls	0, cr0, [r1], {-0}
     5f0:	00000613 	andeq	r0, r0, r3, lsl r6
     5f4:	00032516 	andeq	r2, r3, r6, lsl r5
     5f8:	06e20100 	strbteq	r0, [r2], r0, lsl #2
     5fc:	000000c7 	andeq	r0, r0, r7, asr #1
     600:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     604:	00000270 	andeq	r0, r0, r0, ror r2
     608:	4c06e201 	sfmmi	f6, 1, [r6], {1}
     60c:	02000001 	andeq	r0, r0, #1
     610:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     614:	000001ac 	andeq	r0, r0, ip, lsr #3
     618:	7006b101 	andvc	fp, r6, r1, lsl #2
     61c:	40200009 	eormi	r0, r0, r9
     620:	01000000 	mrseq	r0, (UNDEF: 0)
     624:	0006489c 	muleq	r6, ip, r8
     628:	04511600 	ldrbeq	r1, [r1], #-1536	; 0xfffffa00
     62c:	b1010000 	mrslt	r0, (UNDEF: 1)
     630:	0000c706 	andeq	ip, r0, r6, lsl #14
     634:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     638:	00027016 	andeq	r7, r2, r6, lsl r0
     63c:	06b10100 	ldrteq	r0, [r1], r0, lsl #2
     640:	0000014c 	andeq	r0, r0, ip, asr #2
     644:	00739102 	rsbseq	r9, r3, r2, lsl #2
     648:	0006d015 	andeq	sp, r6, r5, lsl r0
     64c:	06980100 	ldreq	r0, [r8], r0, lsl #2
     650:	20000930 	andcs	r0, r0, r0, lsr r9
     654:	00000040 	andeq	r0, r0, r0, asr #32
     658:	067d9c01 	ldrbteq	r9, [sp], -r1, lsl #24
     65c:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
     660:	01000004 	tsteq	r0, r4
     664:	00c70698 	smulleq	r0, r7, r8, r6
     668:	91020000 	mrsls	r0, (UNDEF: 2)
     66c:	02701674 	rsbseq	r1, r0, #116, 12	; 0x7400000
     670:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
     674:	00014c06 	andeq	r4, r1, r6, lsl #24
     678:	73910200 	orrsvc	r0, r1, #0, 4
     67c:	01da1500 	bicseq	r1, sl, r0, lsl #10
     680:	7b010000 	blvc	40688 <startup-0x1ffbf978>
     684:	0008f006 	andeq	pc, r8, r6
     688:	00004020 	andeq	r4, r0, r0, lsr #32
     68c:	b29c0100 	addslt	r0, ip, #0, 2
     690:	16000006 	strne	r0, [r0], -r6
     694:	000000f7 	strdeq	r0, [r0], -r7
     698:	c7067b01 	strgt	r7, [r6, -r1, lsl #22]
     69c:	02000000 	andeq	r0, r0, #0
     6a0:	70167491 	mulsvc	r6, r1, r4
     6a4:	01000002 	tsteq	r0, r2
     6a8:	014c067b 	hvceq	49259	; 0xc06b
     6ac:	91020000 	mrsls	r0, (UNDEF: 2)
     6b0:	90150073 	andsls	r0, r5, r3, ror r0
     6b4:	01000007 	tsteq	r0, r7
     6b8:	08b00651 	ldmeq	r0!, {r0, r4, r6, r9, sl}
     6bc:	00402000 	subeq	r2, r0, r0
     6c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6c4:	000006e7 	andeq	r0, r0, r7, ror #13
     6c8:	00083216 	andeq	r3, r8, r6, lsl r2
     6cc:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
     6d0:	000000c7 	andeq	r0, r0, r7, asr #1
     6d4:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     6d8:	00000270 	andeq	r0, r0, r0, ror r2
     6dc:	4c065101 	stfmis	f5, [r6], {1}
     6e0:	02000001 	andeq	r0, r0, #1
     6e4:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     6e8:	0000089f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
     6ec:	70062401 	andvc	r2, r6, r1, lsl #8
     6f0:	40200008 	eormi	r0, r0, r8
     6f4:	01000000 	mrseq	r0, (UNDEF: 0)
     6f8:	00071c9c 	muleq	r7, ip, ip
     6fc:	03251600 			; <UNDEFINED> instruction: 0x03251600
     700:	24010000 	strcs	r0, [r1], #-0
     704:	0000c706 	andeq	ip, r0, r6, lsl #14
     708:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     70c:	00027016 	andeq	r7, r2, r6, lsl r0
     710:	06240100 	strteq	r0, [r4], -r0, lsl #2
     714:	0000014c 	andeq	r0, r0, ip, asr #2
     718:	00739102 	rsbseq	r9, r3, r2, lsl #2
     71c:	00092b15 	andeq	r2, r9, r5, lsl fp
     720:	05f00100 	ldrbeq	r0, [r0, #256]!	; 0x100
     724:	20000830 	andcs	r0, r0, r0, lsr r8
     728:	00000040 	andeq	r0, r0, r0, asr #32
     72c:	07519c01 	ldrbeq	r9, [r1, -r1, lsl #24]
     730:	51160000 	tstpl	r6, r0
     734:	01000004 	tsteq	r0, r4
     738:	00c705f0 	strdeq	r0, [r7], #80	; 0x50
     73c:	91020000 	mrsls	r0, (UNDEF: 2)
     740:	02701674 	rsbseq	r1, r0, #116, 12	; 0x7400000
     744:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     748:	00014c05 	andeq	r4, r1, r5, lsl #24
     74c:	73910200 	orrsvc	r0, r1, #0, 4
     750:	01751500 	cmneq	r5, r0, lsl #10
     754:	d4010000 	strle	r0, [r1], #-0
     758:	0007f005 	andeq	pc, r7, r5
     75c:	00004020 	andeq	r4, r0, r0, lsr #32
     760:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
     764:	16000007 	strne	r0, [r0], -r7
     768:	00000438 	andeq	r0, r0, r8, lsr r4
     76c:	c705d401 	strgt	sp, [r5, -r1, lsl #8]
     770:	02000000 	andeq	r0, r0, #0
     774:	70167491 	mulsvc	r6, r1, r4
     778:	01000002 	tsteq	r0, r2
     77c:	014c05d4 	ldrdeq	r0, [ip, #-84]	; 0xffffffac
     780:	91020000 	mrsls	r0, (UNDEF: 2)
     784:	a0150073 	andsge	r0, r5, r3, ror r0
     788:	01000006 	tsteq	r0, r6
     78c:	07b005b4 			; <UNDEFINED> instruction: 0x07b005b4
     790:	00402000 	subeq	r2, r0, r0
     794:	9c010000 	stcls	0, cr0, [r1], {-0}
     798:	000007bb 			; <UNDEFINED> instruction: 0x000007bb
     79c:	0000f716 	andeq	pc, r0, r6, lsl r7	; <UNPREDICTABLE>
     7a0:	05b40100 	ldreq	r0, [r4, #256]!	; 0x100
     7a4:	000000c7 	andeq	r0, r0, r7, asr #1
     7a8:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     7ac:	00000270 	andeq	r0, r0, r0, ror r2
     7b0:	4c05b401 	cfstrsmi	mvf11, [r5], {1}
     7b4:	02000001 	andeq	r0, r0, #1
     7b8:	15007391 	strne	r7, [r0, #-913]	; 0xfffffc6f
     7bc:	00000841 	andeq	r0, r0, r1, asr #16
     7c0:	94058901 	strls	r8, [r5], #-2305	; 0xfffff6ff
     7c4:	1c200007 	stcne	0, cr0, [r0], #-28	; 0xffffffe4
     7c8:	01000000 	mrseq	r0, (UNDEF: 0)
     7cc:	0007e19c 	muleq	r7, ip, r1
     7d0:	06811600 	streq	r1, [r1], r0, lsl #12
     7d4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     7d8:	0000c705 	andeq	ip, r0, r5, lsl #14
     7dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7e0:	03cc1500 	biceq	r1, ip, #0, 10
     7e4:	64010000 	strvs	r0, [r1], #-0
     7e8:	00075805 	andeq	r5, r7, r5, lsl #16
     7ec:	00003c20 	andeq	r3, r0, r0, lsr #24
     7f0:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     7f4:	16000008 	strne	r0, [r0], -r8
     7f8:	00000038 	andeq	r0, r0, r8, lsr r0
     7fc:	c7056401 	strgt	r6, [r5, -r1, lsl #8]
     800:	02000000 	andeq	r0, r0, #0
     804:	5e186c91 	mrcpl	12, 0, r6, cr8, cr1, {4}
     808:	01000001 	tsteq	r0, r1
     80c:	00c70566 	sbceq	r0, r7, r6, ror #10
     810:	91020000 	mrsls	r0, (UNDEF: 2)
     814:	3b150074 	blcc	5409ec <startup-0x1fabf614>
     818:	01000006 	tsteq	r0, r6
     81c:	071c0543 	ldreq	r0, [ip, -r3, asr #10]
     820:	003c2000 	eorseq	r2, ip, r0
     824:	9c010000 	stcls	0, cr0, [r1], {-0}
     828:	0000084b 	andeq	r0, r0, fp, asr #16
     82c:	0003b516 	andeq	fp, r3, r6, lsl r5
     830:	05430100 	strbeq	r0, [r3, #-256]	; 0xffffff00
     834:	000000c7 	andeq	r0, r0, r7, asr #1
     838:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     83c:	0000015e 	andeq	r0, r0, lr, asr r1
     840:	c7054501 	strgt	r4, [r5, -r1, lsl #10]
     844:	02000000 	andeq	r0, r0, #0
     848:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
     84c:	000001c3 	andeq	r0, r0, r3, asr #3
     850:	e0051f01 	and	r1, r5, r1, lsl #30
     854:	3c200006 	stccc	0, cr0, [r0], #-24	; 0xffffffe8
     858:	01000000 	mrseq	r0, (UNDEF: 0)
     85c:	0008809c 	muleq	r8, ip, r0
     860:	039e1600 	orrseq	r1, lr, #0, 12
     864:	1f010000 	svcne	0x00010000
     868:	0000c705 	andeq	ip, r0, r5, lsl #14
     86c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     870:	00015e18 	andeq	r5, r1, r8, lsl lr
     874:	05210100 	streq	r0, [r1, #-256]!	; 0xffffff00
     878:	000000c7 	andeq	r0, r0, r7, asr #1
     87c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     880:	0000a115 	andeq	sl, r0, r5, lsl r1
     884:	04fb0100 	ldrbteq	r0, [fp], #256	; 0x100
     888:	200006a0 	andcs	r0, r0, r0, lsr #13
     88c:	00000040 	andeq	r0, r0, r0, asr #32
     890:	08b59c01 	ldmeq	r5!, {r0, sl, fp, ip, pc}
     894:	29160000 	ldmdbcs	r6, {}	; <UNPREDICTABLE>
     898:	01000000 	mrseq	r0, (UNDEF: 0)
     89c:	00c704fb 	strdeq	r0, [r7], #75	; 0x4b
     8a0:	91020000 	mrsls	r0, (UNDEF: 2)
     8a4:	015e186c 	cmpeq	lr, ip, ror #16
     8a8:	fd010000 	stc2	0, cr0, [r1, #-0]
     8ac:	0000c704 	andeq	ip, r0, r4, lsl #14
     8b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     8b4:	046c1500 	strbteq	r1, [ip], #-1280	; 0xfffffb00
     8b8:	db010000 	blle	408c0 <startup-0x1ffbf740>
     8bc:	00066404 	andeq	r6, r6, r4, lsl #8
     8c0:	00003c20 	andeq	r3, r0, r0, lsr #24
     8c4:	ea9c0100 	b	fe700ccc <APBAHBPrescTable+0xde6fe214>
     8c8:	16000008 	strne	r0, [r0], -r8
     8cc:	0000054d 	andeq	r0, r0, sp, asr #10
     8d0:	c704db01 	strgt	sp, [r4, -r1, lsl #22]
     8d4:	02000000 	andeq	r0, r0, #0
     8d8:	5e186c91 	mrcpl	12, 0, r6, cr8, cr1, {4}
     8dc:	01000001 	tsteq	r0, r1
     8e0:	00c704dd 	ldrdeq	r0, [r7], #77	; 0x4d
     8e4:	91020000 	mrsls	r0, (UNDEF: 2)
     8e8:	56150074 			; <UNDEFINED> instruction: 0x56150074
     8ec:	01000008 	tsteq	r0, r8
     8f0:	064804c6 	strbeq	r0, [r8], -r6, asr #9
     8f4:	001c2000 	andseq	r2, ip, r0
     8f8:	9c010000 	stcls	0, cr0, [r1], {-0}
     8fc:	00000910 	andeq	r0, r0, r0, lsl r9
     900:	0005b916 	andeq	fp, r5, r6, lsl r9
     904:	04c60100 	strbeq	r0, [r6], #256	; 0x100
     908:	000000c7 	andeq	r0, r0, r7, asr #1
     90c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     910:	00028115 	andeq	r8, r2, r5, lsl r1
     914:	04b50100 	ldrteq	r0, [r5], #256	; 0x100
     918:	20000628 	andcs	r0, r0, r8, lsr #12
     91c:	00000020 	andeq	r0, r0, r0, lsr #32
     920:	09369c01 	ldmdbeq	r6!, {r0, sl, fp, ip, pc}
     924:	70160000 	andsvc	r0, r6, r0
     928:	01000002 	tsteq	r0, r2
     92c:	014c04b5 	strheq	r0, [ip, #-69]	; 0xffffffbb
     930:	91020000 	mrsls	r0, (UNDEF: 2)
     934:	86150077 			; <UNDEFINED> instruction: 0x86150077
     938:	01000004 	tsteq	r0, r4
     93c:	060804a4 	streq	r0, [r8], -r4, lsr #9
     940:	00202000 	eoreq	r2, r0, r0
     944:	9c010000 	stcls	0, cr0, [r1], {-0}
     948:	0000095c 	andeq	r0, r0, ip, asr r9
     94c:	00027016 	andeq	r7, r2, r6, lsl r0
     950:	04a40100 	strteq	r0, [r4], #256	; 0x100
     954:	0000014c 	andeq	r0, r0, ip, asr #2
     958:	00779102 	rsbseq	r9, r7, r2, lsl #2
     95c:	0008f315 	andeq	pc, r8, r5, lsl r3	; <UNPREDICTABLE>
     960:	04840100 	streq	r0, [r4], #256	; 0x100
     964:	200005a8 	andcs	r0, r0, r8, lsr #11
     968:	00000060 	andeq	r0, r0, r0, rrx
     96c:	09919c01 	ldmibeq	r1, {r0, sl, fp, ip, pc}
     970:	8d160000 	ldchi	0, cr0, [r6, #-0]
     974:	01000003 	tsteq	r0, r3
     978:	00c70484 	sbceq	r0, r7, r4, lsl #9
     97c:	91020000 	mrsls	r0, (UNDEF: 2)
     980:	015e186c 	cmpeq	lr, ip, ror #16
     984:	86010000 	strhi	r0, [r1], -r0
     988:	0000c704 	andeq	ip, r0, r4, lsl #14
     98c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     990:	077e1b00 	ldrbeq	r1, [lr, -r0, lsl #22]!
     994:	07010000 	streq	r0, [r1, -r0]
     998:	00045004 	andeq	r5, r4, r4
     99c:	00015820 	andeq	r5, r1, r0, lsr #16
     9a0:	119c0100 	orrsne	r0, ip, r0, lsl #2
     9a4:	1600000a 	strne	r0, [r0], -sl
     9a8:	00000110 	andeq	r0, r0, r0, lsl r1
     9ac:	11040701 	tstne	r4, r1, lsl #14
     9b0:	0200000a 	andeq	r0, r0, #10
     9b4:	741a5c91 	ldrvc	r5, [sl], #-3217	; 0xfffff36f
     9b8:	0100706d 	tsteq	r0, sp, rrx
     9bc:	00c70409 	sbceq	r0, r7, r9, lsl #8
     9c0:	91020000 	mrsls	r0, (UNDEF: 2)
     9c4:	03871870 	orreq	r1, r7, #112, 16	; 0x700000
     9c8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     9cc:	0000c704 	andeq	ip, r0, r4, lsl #14
     9d0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     9d4:	00033418 	andeq	r3, r3, r8, lsl r4
     9d8:	04090100 	streq	r0, [r9], #-256	; 0xffffff00
     9dc:	000000c7 	andeq	r0, r0, r7, asr #1
     9e0:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
     9e4:	00000067 	andeq	r0, r0, r7, rrx
     9e8:	c7040901 	strgt	r0, [r4, -r1, lsl #18]
     9ec:	02000000 	andeq	r0, r0, #0
     9f0:	04186891 	ldreq	r6, [r8], #-2193	; 0xfffff76f
     9f4:	01000009 	tsteq	r0, r9
     9f8:	00c70409 	sbceq	r0, r7, r9, lsl #8
     9fc:	91020000 	mrsls	r0, (UNDEF: 2)
     a00:	00621864 	rsbeq	r1, r2, r4, ror #16
     a04:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     a08:	0000c704 	andeq	ip, r0, r4, lsl #14
     a0c:	60910200 	addsvs	r0, r1, r0, lsl #4
     a10:	6d041c00 	stcvs	12, cr1, [r4, #-0]
     a14:	15000003 	strne	r0, [r0, #-3]
     a18:	00000704 	andeq	r0, r0, r4, lsl #14
     a1c:	1403d301 	strne	sp, [r3], #-769	; 0xfffffcff
     a20:	3c200004 	stccc	0, cr0, [r0], #-16
     a24:	01000000 	mrseq	r0, (UNDEF: 0)
     a28:	000a4c9c 	muleq	sl, ip, ip
     a2c:	00001600 	andeq	r1, r0, r0, lsl #12
     a30:	d3010000 	movwle	r0, #4096	; 0x1000
     a34:	0000c703 	andeq	ip, r0, r3, lsl #14
     a38:	6c910200 	lfmvs	f0, 4, [r1], {0}
     a3c:	00015e18 	andeq	r5, r1, r8, lsl lr
     a40:	03d50100 	bicseq	r0, r5, #0, 2
     a44:	000000c7 	andeq	r0, r0, r7, asr #1
     a48:	00749102 	rsbseq	r9, r4, r2, lsl #2
     a4c:	00019c15 	andeq	r9, r1, r5, lsl ip
     a50:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
     a54:	200003dc 	ldrdcs	r0, [r0], -ip
     a58:	00000038 	andeq	r0, r0, r8, lsr r0
     a5c:	0a819c01 	beq	fe067a68 <APBAHBPrescTable+0xde064fb0>
     a60:	00160000 	andseq	r0, r6, r0
     a64:	01000000 	mrseq	r0, (UNDEF: 0)
     a68:	00c703b4 	strheq	r0, [r7], #52	; 0x34
     a6c:	91020000 	mrsls	r0, (UNDEF: 2)
     a70:	015e186c 	cmpeq	lr, ip, ror #16
     a74:	b6010000 	strlt	r0, [r1], -r0
     a78:	0000c703 	andeq	ip, r0, r3, lsl #14
     a7c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     a80:	01f11500 	mvnseq	r1, r0, lsl #10
     a84:	94010000 	strls	r0, [r1], #-0
     a88:	0003a803 	andeq	sl, r3, r3, lsl #16
     a8c:	00003420 	andeq	r3, r0, r0, lsr #8
     a90:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
     a94:	1600000a 	strne	r0, [r0], -sl
     a98:	00000362 	andeq	r0, r0, r2, ror #6
     a9c:	c7039401 	strgt	r9, [r3, -r1, lsl #8]
     aa0:	02000000 	andeq	r0, r0, #0
     aa4:	5e186c91 	mrcpl	12, 0, r6, cr8, cr1, {4}
     aa8:	01000001 	tsteq	r0, r1
     aac:	00c70396 	smulleq	r0, r7, r6, r3
     ab0:	91020000 	mrsls	r0, (UNDEF: 2)
     ab4:	ec1d0074 	ldc	0, cr0, [sp], {116}	; 0x74
     ab8:	01000002 	tsteq	r0, r2
     abc:	0097037b 	addseq	r0, r7, fp, ror r3
     ac0:	038c0000 	orreq	r0, ip, #0
     ac4:	001c2000 	andseq	r2, ip, r0
     ac8:	9c010000 	stcls	0, cr0, [r1], {-0}
     acc:	00020e15 	andeq	r0, r2, r5, lsl lr
     ad0:	035f0100 	cmpeq	pc, #0, 2
     ad4:	20000358 	andcs	r0, r0, r8, asr r3
     ad8:	00000034 	andeq	r0, r0, r4, lsr r0
     adc:	0b019c01 	bleq	67ae8 <startup-0x1ff98518>
     ae0:	14160000 	ldrne	r0, [r6], #-0
     ae4:	01000007 	tsteq	r0, r7
     ae8:	00c7035f 	sbceq	r0, r7, pc, asr r3
     aec:	91020000 	mrsls	r0, (UNDEF: 2)
     af0:	015e186c 	cmpeq	lr, ip, ror #16
     af4:	61010000 	mrsvs	r0, (UNDEF: 1)
     af8:	0000c703 	andeq	ip, r0, r3, lsl #14
     afc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b00:	08671500 	stmdaeq	r7!, {r8, sl, ip}^
     b04:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
     b08:	00031c02 	andeq	r1, r3, r2, lsl #24
     b0c:	00003c20 	andeq	r3, r0, r0, lsr #24
     b10:	459c0100 	ldrmi	r0, [ip, #256]	; 0x100
     b14:	1600000b 	strne	r0, [r0], -fp
     b18:	000005aa 	andeq	r0, r0, sl, lsr #11
     b1c:	c702b901 	strgt	fp, [r2, -r1, lsl #18]
     b20:	02000000 	andeq	r0, r0, #0
     b24:	60166c91 	mulsvs	r6, r1, ip
     b28:	01000004 	tsteq	r0, r4
     b2c:	00c702b9 	strheq	r0, [r7], #41	; 0x29
     b30:	91020000 	mrsls	r0, (UNDEF: 2)
     b34:	015e1868 	cmpeq	lr, r8, ror #16
     b38:	bb010000 	bllt	40b40 <startup-0x1ffbf4c0>
     b3c:	0000c702 	andeq	ip, r0, r2, lsl #14
     b40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b44:	03531500 	cmpeq	r3, #0, 10
     b48:	93010000 	movwls	r0, #4096	; 0x1000
     b4c:	0002dc02 	andeq	sp, r2, r2, lsl #24
     b50:	00004020 	andeq	r4, r0, r0, lsr #32
     b54:	899c0100 	ldmibhi	ip, {r8}
     b58:	1600000b 	strne	r0, [r0], -fp
     b5c:	00000076 	andeq	r0, r0, r6, ror r0
     b60:	c7029301 	strgt	r9, [r2, -r1, lsl #6]
     b64:	02000000 	andeq	r0, r0, #0
     b68:	87166c91 			; <UNDEFINED> instruction: 0x87166c91
     b6c:	01000005 	tsteq	r0, r5
     b70:	00c70293 	smulleq	r0, r7, r3, r2
     b74:	91020000 	mrsls	r0, (UNDEF: 2)
     b78:	015e1868 	cmpeq	lr, r8, ror #16
     b7c:	95010000 	strls	r0, [r1, #-0]
     b80:	0000c702 	andeq	ip, r0, r2, lsl #14
     b84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b88:	05321500 	ldreq	r1, [r2, #-1280]!	; 0xfffffb00
     b8c:	7a010000 	bvc	40b94 <startup-0x1ffbf46c>
     b90:	0002bc02 	andeq	fp, r2, r2, lsl #24
     b94:	00002020 	andeq	r2, r0, r0, lsr #32
     b98:	af9c0100 	svcge	0x009c0100
     b9c:	1600000b 	strne	r0, [r0], -fp
     ba0:	00000270 	andeq	r0, r0, r0, ror r2
     ba4:	4c027a01 			; <UNDEFINED> instruction: 0x4c027a01
     ba8:	02000001 	andeq	r0, r0, #1
     bac:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
     bb0:	0000001b 	andeq	r0, r0, fp, lsl r0
     bb4:	9c026801 	stcls	8, cr6, [r2], {1}
     bb8:	20200002 	eorcs	r0, r0, r2
     bbc:	01000000 	mrseq	r0, (UNDEF: 0)
     bc0:	000bd59c 	muleq	fp, ip, r5
     bc4:	02701600 	rsbseq	r1, r0, #0, 12
     bc8:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
     bcc:	00014c02 	andeq	r4, r1, r2, lsl #24
     bd0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     bd4:	055c1500 	ldrbeq	r1, [ip, #-1280]	; 0xfffffb00
     bd8:	56010000 	strpl	r0, [r1], -r0
     bdc:	00026c02 	andeq	r6, r2, r2, lsl #24
     be0:	00003020 	andeq	r3, r0, r0, lsr #32
     be4:	199c0100 	ldmibne	ip, {r8}
     be8:	1600000c 	strne	r0, [r0], -ip
     bec:	00000652 	andeq	r0, r0, r2, asr r6
     bf0:	c7025601 	strgt	r5, [r2, -r1, lsl #12]
     bf4:	02000000 	andeq	r0, r0, #0
     bf8:	67167491 			; <UNDEFINED> instruction: 0x67167491
     bfc:	01000006 	tsteq	r0, r6
     c00:	00c70256 	sbceq	r0, r7, r6, asr r2
     c04:	91020000 	mrsls	r0, (UNDEF: 2)
     c08:	066f1670 			; <UNDEFINED> instruction: 0x066f1670
     c0c:	56010000 	strpl	r0, [r1], -r0
     c10:	0000c702 	andeq	ip, r0, r2, lsl #14
     c14:	6c910200 	lfmvs	f0, 4, [r1], {0}
     c18:	036d1500 	cmneq	sp, #0, 10
     c1c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
     c20:	00024c02 	andeq	r4, r2, r2, lsl #24
     c24:	00002020 	andeq	r2, r0, r0, lsr #32
     c28:	3f9c0100 	svccc	0x009c0100
     c2c:	1600000c 	strne	r0, [r0], -ip
     c30:	00000270 	andeq	r0, r0, r0, ror r2
     c34:	4c023901 			; <UNDEFINED> instruction: 0x4c023901
     c38:	02000001 	andeq	r0, r0, #1
     c3c:	15007791 	strne	r7, [r0, #-1937]	; 0xfffff86f
     c40:	0000041c 	andeq	r0, r0, ip, lsl r4
     c44:	24020401 	strcs	r0, [r2], #-1025	; 0xfffffbff
     c48:	28200002 	stmdacs	r0!, {r1}
     c4c:	01000000 	mrseq	r0, (UNDEF: 0)
     c50:	000c749c 	muleq	ip, ip, r4
     c54:	07761600 	ldrbeq	r1, [r6, -r0, lsl #12]!
     c58:	04010000 	streq	r0, [r1], #-0
     c5c:	0000c702 	andeq	ip, r0, r2, lsl #14
     c60:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     c64:	0007c616 	andeq	ip, r7, r6, lsl r6
     c68:	02040100 	andeq	r0, r4, #0, 2
     c6c:	000000c7 	andeq	r0, r0, r7, asr #1
     c70:	00709102 	rsbseq	r9, r0, r2, lsl #2
     c74:	00069515 	andeq	r9, r6, r5, lsl r5
     c78:	01e60100 	mvneq	r0, r0, lsl #2
     c7c:	20000204 	andcs	r0, r0, r4, lsl #4
     c80:	00000020 	andeq	r0, r0, r0, lsr #32
     c84:	0c9a9c01 	ldceq	12, cr9, [sl], {1}
     c88:	70160000 	andsvc	r0, r6, r0
     c8c:	01000002 	tsteq	r0, r2
     c90:	014c01e6 	smlaltteq	r0, ip, r6, r1
     c94:	91020000 	mrsls	r0, (UNDEF: 2)
     c98:	cb150077 	blgt	540e7c <startup-0x1fabf184>
     c9c:	01000008 	tsteq	r0, r8
     ca0:	01c801cf 	biceq	r0, r8, pc, asr #3
     ca4:	003c2000 	eorseq	r2, ip, r0
     ca8:	9c010000 	stcls	0, cr0, [r1], {-0}
     cac:	00000cfc 	strdeq	r0, [r0], -ip
     cb0:	0002de16 	andeq	sp, r2, r6, lsl lr
     cb4:	01cf0100 	biceq	r0, pc, r0, lsl #2
     cb8:	000000c7 	andeq	r0, r0, r7, asr #1
     cbc:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
     cc0:	000000f2 	strdeq	r0, [r0], -r2
     cc4:	c701cf01 	strgt	ip, [r1, -r1, lsl #30]
     cc8:	02000000 	andeq	r0, r0, #0
     ccc:	9c167091 	ldcls	0, cr7, [r6], {145}	; 0x91
     cd0:	01000000 	mrseq	r0, (UNDEF: 0)
     cd4:	00c701cf 	sbceq	r0, r7, pc, asr #3
     cd8:	91020000 	mrsls	r0, (UNDEF: 2)
     cdc:	00bb166c 	adcseq	r1, fp, ip, ror #12
     ce0:	cf010000 	svcgt	0x00010000
     ce4:	0000c701 	andeq	ip, r0, r1, lsl #14
     ce8:	68910200 	ldmvs	r1, {r9}
     cec:	0000c016 	andeq	ip, r0, r6, lsl r0
     cf0:	01cf0100 	biceq	r0, pc, r0, lsl #2
     cf4:	000000c7 	andeq	r0, r0, r7, asr #1
     cf8:	00009102 	andeq	r9, r0, r2, lsl #2
     cfc:	00088f15 	andeq	r8, r8, r5, lsl pc
     d00:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     d04:	200001a8 	andcs	r0, r0, r8, lsr #3
     d08:	00000020 	andeq	r0, r0, r0, lsr #32
     d0c:	0d229c01 	stceq	12, cr9, [r2, #-4]!
     d10:	70160000 	andsvc	r0, r6, r0
     d14:	01000002 	tsteq	r0, r2
     d18:	014c01a4 	smlaltbeq	r0, ip, r4, r1
     d1c:	91020000 	mrsls	r0, (UNDEF: 2)
     d20:	1f150077 	svcne	0x00150077
     d24:	01000002 	tsteq	r0, r2
     d28:	0164017c 	smceq	16412	; 0x401c
     d2c:	00442000 	subeq	r2, r4, r0
     d30:	9c010000 	stcls	0, cr0, [r1], {-0}
     d34:	00000d48 	andeq	r0, r0, r8, asr #26
     d38:	00000916 	andeq	r0, r0, r6, lsl r9
     d3c:	017c0100 	cmneq	ip, r0, lsl #2
     d40:	00000097 	muleq	r0, r7, r0
     d44:	00779102 	rsbseq	r9, r7, r2, lsl #2
     d48:	00042d15 	andeq	r2, r4, r5, lsl sp
     d4c:	01630100 	cmneq	r3, r0, lsl #2
     d50:	20000144 	andcs	r0, r0, r4, asr #2
     d54:	00000020 	andeq	r0, r0, r0, lsr #32
     d58:	0d6e9c01 	stcleq	12, cr9, [lr, #-4]!
     d5c:	70160000 	andsvc	r0, r6, r0
     d60:	01000002 	tsteq	r0, r2
     d64:	014c0163 	cmpeq	ip, r3, ror #2
     d68:	91020000 	mrsls	r0, (UNDEF: 2)
     d6c:	4e150077 	mrcmi	0, 0, r0, cr5, cr7, {3}
     d70:	01000007 	tsteq	r0, r7
     d74:	0106013f 	tsteq	r6, pc, lsr r1
     d78:	003e2000 	eorseq	r2, lr, r0
     d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
     d80:	00000da3 	andeq	r0, r0, r3, lsr #27
     d84:	00075816 	andeq	r5, r7, r6, lsl r8
     d88:	013f0100 	teqeq	pc, r0, lsl #2
     d8c:	00000097 	muleq	r0, r7, r0
     d90:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     d94:	0000015e 	andeq	r0, r0, lr, asr r1
     d98:	c7014101 	strgt	r4, [r1, -r1, lsl #2]
     d9c:	02000000 	andeq	r0, r0, #0
     da0:	1e007491 	mcrne	4, 0, r7, cr0, cr1, {4}
     da4:	00000300 	andeq	r0, r0, r0, lsl #6
     da8:	73012001 	movwvc	r2, #4097	; 0x1001
     dac:	a8000001 	stmdage	r0, {r0}
     db0:	5e200000 	cdppl	0, 2, cr0, cr0, cr0, {0}
     db4:	01000000 	mrseq	r0, (UNDEF: 0)
     db8:	000deb9c 	muleq	sp, ip, fp
     dbc:	08231800 	stmdaeq	r3!, {fp, ip}
     dc0:	22010000 	andcs	r0, r1, #0
     dc4:	0000d201 	andeq	sp, r0, r1, lsl #4
     dc8:	68910200 	ldmvs	r1, {r9}
     dcc:	00076f18 	andeq	r6, r7, r8, lsl pc
     dd0:	01230100 			; <UNDEFINED> instruction: 0x01230100
     dd4:	00000173 	andeq	r0, r0, r3, ror r1
     dd8:	186f9102 	stmdane	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
     ddc:	0000076c 	andeq	r0, r0, ip, ror #14
     de0:	19012401 	stmdbne	r1, {r0, sl, sp}
     de4:	02000001 	andeq	r0, r0, #1
     de8:	15006e91 	strne	r6, [r0, #-3729]	; 0xfffff16f
     dec:	0000062d 	andeq	r0, r0, sp, lsr #12
     df0:	80010801 	andhi	r0, r1, r1, lsl #16
     df4:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
     df8:	01000000 	mrseq	r0, (UNDEF: 0)
     dfc:	000e119c 	muleq	lr, ip, r1
     e00:	07251600 	streq	r1, [r5, -r0, lsl #12]!
     e04:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     e08:	00009701 	andeq	r9, r0, r1, lsl #14
     e0c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     e10:	07bb1f00 	ldreq	r1, [fp, r0, lsl #30]!
     e14:	d5010000 	strle	r0, [r1, #-0]
     e18:	20000010 	andcs	r0, r0, r0, lsl r0
     e1c:	00000070 	andeq	r0, r0, r0, ror r0
     e20:	23009c01 	movwcs	r9, #3073	; 0xc01
     e24:	04000006 	streq	r0, [r0], #-6
     e28:	0001eb00 	andeq	lr, r1, r0, lsl #22
     e2c:	9a010400 	bls	41e34 <startup-0x1ffbe1cc>
     e30:	0c000004 	stceq	0, cr0, [r0], {4}
     e34:	00000a9a 	muleq	r0, sl, sl
     e38:	00000294 	muleq	r0, r4, r2
     e3c:	20000cc4 	andcs	r0, r0, r4, asr #25
     e40:	0000050e 	andeq	r0, r0, lr, lsl #10
     e44:	0000031d 	andeq	r0, r0, sp, lsl r3
     e48:	17060102 	strne	r0, [r6, -r2, lsl #2]
     e4c:	03000008 	movweq	r0, #8
     e50:	0000006c 	andeq	r0, r0, ip, rrx
     e54:	00372b02 	eorseq	r2, r7, r2, lsl #22
     e58:	01020000 	mrseq	r0, (UNDEF: 2)
     e5c:	00081508 	andeq	r1, r8, r8, lsl #10
     e60:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     e64:	00000677 	andeq	r0, r0, r7, ror r6
     e68:	0007a703 	andeq	sl, r7, r3, lsl #14
     e6c:	50390200 	eorspl	r0, r9, r0, lsl #4
     e70:	02000000 	andeq	r0, r0, #0
     e74:	03e10702 	mvneq	r0, #524288	; 0x80000
     e78:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
     e7c:	02000007 	andeq	r0, r0, #7
     e80:	0000624d 	andeq	r6, r0, sp, asr #4
     e84:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     e88:	00000205 	andeq	r0, r0, r5, lsl #4
     e8c:	0002c703 	andeq	ip, r2, r3, lsl #14
     e90:	744f0200 	strbvc	r0, [pc], #-512	; e98 <startup-0x1ffff168>
     e94:	02000000 	andeq	r0, r0, #0
     e98:	00e00704 	rsceq	r0, r0, r4, lsl #14
     e9c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     ea0:	00020005 	andeq	r0, r2, r5
     ea4:	07080200 	streq	r0, [r8, -r0, lsl #4]
     ea8:	000000db 	ldrdeq	r0, [r0], -fp
     eac:	69050404 	stmdbvs	r5, {r2, sl}
     eb0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     eb4:	00e50704 	rsceq	r0, r5, r4, lsl #14
     eb8:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
     ebc:	03000000 	movweq	r0, #0
     ec0:	00002c18 	andeq	r2, r0, r8, lsl ip
     ec4:	07a90300 	streq	r0, [r9, r0, lsl #6]!
     ec8:	24030000 	strcs	r0, [r3], #-0
     ecc:	00000045 	andeq	r0, r0, r5, asr #32
     ed0:	0000a205 	andeq	sl, r0, r5, lsl #4
     ed4:	07d00300 	ldrbeq	r0, [r0, r0, lsl #6]
     ed8:	2c030000 	stccs	0, cr0, [r3], {-0}
     edc:	00000057 	andeq	r0, r0, r7, asr r0
     ee0:	0000b205 	andeq	fp, r0, r5, lsl #4
     ee4:	02c90300 	sbceq	r0, r9, #0, 6
     ee8:	30030000 	andcc	r0, r3, r0
     eec:	00000069 	andeq	r0, r0, r9, rrx
     ef0:	0000c205 	andeq	ip, r0, r5, lsl #4
     ef4:	065a0600 	ldrbeq	r0, [sl], -r0, lsl #12
     ef8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
     efc:	0000bd06 	andeq	fp, r0, r6, lsl #26
     f00:	03430700 	movteq	r0, #14080	; 0x3700
     f04:	3b050000 	blcc	140f0c <startup-0x1febf0f4>
     f08:	000000c2 	andeq	r0, r0, r2, asr #1
     f0c:	37010708 	strcc	r0, [r1, -r8, lsl #14]
     f10:	06000000 	streq	r0, [r0], -r0
     f14:	010401fb 	strdeq	r0, [r4, -fp]
     f18:	3b090000 	blcc	240f20 <startup-0x1fdbf0e0>
     f1c:	00000003 	andeq	r0, r0, r3
     f20:	00018c09 	andeq	r8, r1, r9, lsl #24
     f24:	0a000100 	beq	132c <startup-0x1fffecd4>
     f28:	03d60628 	bicseq	r0, r6, #40, 12	; 0x2800000
     f2c:	00000190 	muleq	r0, r0, r1
     f30:	000adb0b 	andeq	sp, sl, fp, lsl #22
     f34:	03d80600 	bicseq	r0, r8, #0, 12
     f38:	000000cd 	andeq	r0, r0, sp, asr #1
     f3c:	0a660b00 	beq	1983b44 <startup-0x1e67c4bc>
     f40:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
     f44:	0000cd03 	andeq	ip, r0, r3, lsl #26
     f48:	8c0b0400 	cfstrshi	mvf0, [fp], {-0}
     f4c:	0600000b 	streq	r0, [r0], -fp
     f50:	00cd03da 	ldrdeq	r0, [sp], #58	; 0x3a
     f54:	0b080000 	bleq	200f5c <startup-0x1fdff0a4>
     f58:	00000a7b 	andeq	r0, r0, fp, ror sl
     f5c:	cd03db06 	vstrgt	d13, [r3, #-24]	; 0xffffffe8
     f60:	0c000000 	stceq	0, cr0, [r0], {-0}
     f64:	5244490c 	subpl	r4, r4, #12, 18	; 0x30000
     f68:	03dc0600 	bicseq	r0, ip, #0, 12
     f6c:	000000cd 	andeq	r0, r0, sp, asr #1
     f70:	444f0c10 	strbmi	r0, [pc], #-3088	; f78 <startup-0x1ffff088>
     f74:	dd060052 	stcle	0, cr0, [r6, #-328]	; 0xfffffeb8
     f78:	0000cd03 	andeq	ip, r0, r3, lsl #26
     f7c:	340b1400 	strcc	r1, [fp], #-1024	; 0xfffffc00
     f80:	0600000c 	streq	r0, [r0], -ip
     f84:	00ad03de 	ldrdeq	r0, [sp], lr	; <UNPREDICTABLE>
     f88:	0b180000 	bleq	600f90 <startup-0x1f9ff070>
     f8c:	00000ad5 	ldrdeq	r0, [r0], -r5
     f90:	ad03df06 	stcge	15, cr13, [r3, #-24]	; 0xffffffe8
     f94:	1a000000 	bne	f9c <startup-0x1ffff064>
     f98:	000a3d0b 	andeq	r3, sl, fp, lsl #26
     f9c:	03e00600 	mvneq	r0, #0, 12
     fa0:	000000cd 	andeq	r0, r0, sp, asr #1
     fa4:	46410c1c 			; <UNDEFINED> instruction: 0x46410c1c
     fa8:	e1060052 	qadd	r0, r2, r6
     fac:	0001a003 	andeq	sl, r1, r3
     fb0:	0d002000 	stceq	0, cr2, [r0, #-0]
     fb4:	000000cd 	andeq	r0, r0, sp, asr #1
     fb8:	000001a0 	andeq	r0, r0, r0, lsr #3
     fbc:	0000900e 	andeq	r9, r0, lr
     fc0:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     fc4:	00000190 	muleq	r0, r0, r1
     fc8:	0009420f 	andeq	r4, r9, pc, lsl #4
     fcc:	03e20600 	mvneq	r0, #0, 12
     fd0:	00000104 	andeq	r0, r0, r4, lsl #2
     fd4:	37010710 	smladcc	r1, r0, r7, r0
     fd8:	07000000 	streq	r0, [r0, -r0]
     fdc:	0001d742 	andeq	sp, r1, r2, asr #14
     fe0:	0a810900 	beq	fe0433e8 <APBAHBPrescTable+0xde040930>
     fe4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     fe8:	00000a6d 	andeq	r0, r0, sp, ror #20
     fec:	09f20901 	ldmibeq	r2!, {r0, r8, fp}^
     ff0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     ff4:	00000a21 	andeq	r0, r0, r1, lsr #20
     ff8:	7b030003 	blvc	c100c <startup-0x1ff3eff4>
     ffc:	07000009 	streq	r0, [r0, -r9]
    1000:	0001b147 	andeq	fp, r1, r7, asr #2
    1004:	01071000 	mrseq	r1, (UNDEF: 7)
    1008:	00000037 	andeq	r0, r0, r7, lsr r0
    100c:	01fc4f07 	mvnseq	r4, r7, lsl #30
    1010:	f7090000 			; <UNDEFINED> instruction: 0xf7090000
    1014:	0000000a 	andeq	r0, r0, sl
    1018:	0009c109 	andeq	ip, r9, r9, lsl #2
    101c:	03000100 	movweq	r0, #256	; 0x100
    1020:	00000a54 	andeq	r0, r0, r4, asr sl
    1024:	01e25207 	mvneq	r5, r7, lsl #4
    1028:	07100000 	ldreq	r0, [r0, -r0]
    102c:	00003701 	andeq	r3, r0, r1, lsl #14
    1030:	2d5a0700 	ldclcs	7, cr0, [sl, #-0]
    1034:	09000002 	stmdbeq	r0, {r1}
    1038:	00000b0f 	andeq	r0, r0, pc, lsl #22
    103c:	09940900 	ldmibeq	r4, {r8, fp}
    1040:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1044:	00000be3 	andeq	r0, r0, r3, ror #23
    1048:	0a420902 	beq	1083458 <startup-0x1ef7cba8>
    104c:	00030000 	andeq	r0, r3, r0
    1050:	000b9a03 	andeq	r9, fp, r3, lsl #20
    1054:	075f0700 	ldrbeq	r0, [pc, -r0, lsl #14]
    1058:	10000002 	andne	r0, r0, r2
    105c:	00370107 	eorseq	r0, r7, r7, lsl #2
    1060:	67070000 	strvs	r0, [r7, -r0]
    1064:	00000258 	andeq	r0, r0, r8, asr r2
    1068:	000bbb09 	andeq	fp, fp, r9, lsl #22
    106c:	16090000 	strne	r0, [r9], -r0
    1070:	0100000c 	tsteq	r0, ip
    1074:	000bac09 	andeq	sl, fp, r9, lsl #24
    1078:	03000200 	movweq	r0, #512	; 0x200
    107c:	00000c05 	andeq	r0, r0, r5, lsl #24
    1080:	02386b07 	eorseq	r6, r8, #7168	; 0x1c00
    1084:	07100000 	ldreq	r0, [r0, -r0]
    1088:	00003701 	andeq	r3, r0, r1, lsl #14
    108c:	7d730700 	ldclvc	7, cr0, [r3, #-0]
    1090:	09000002 	stmdbeq	r0, {r1}
    1094:	000009cf 	andeq	r0, r0, pc, asr #19
    1098:	095f0900 	ldmdbeq	pc, {r8, fp}^	; <UNPREDICTABLE>
    109c:	00010000 	andeq	r0, r1, r0
    10a0:	000b6c03 	andeq	r6, fp, r3, lsl #24
    10a4:	63760700 	cmnvs	r6, #0, 14
    10a8:	11000002 	tstne	r0, r2
    10ac:	cd7d0708 	ldclgt	7, cr0, [sp, #-32]!	; 0xffffffe0
    10b0:	12000002 	andne	r0, r0, #2
    10b4:	00000956 	andeq	r0, r0, r6, asr r9
    10b8:	00c27f07 	sbceq	r7, r2, r7, lsl #30
    10bc:	12000000 	andne	r0, r0, #0
    10c0:	00000c51 	andeq	r0, r0, r1, asr ip
    10c4:	01d78207 	bicseq	r8, r7, r7, lsl #4
    10c8:	12040000 	andne	r0, r4, #0
    10cc:	00000a0c 	andeq	r0, r0, ip, lsl #20
    10d0:	022d8507 	eoreq	r8, sp, #29360128	; 0x1c00000
    10d4:	12050000 	andne	r0, r5, #0
    10d8:	000009e7 	andeq	r0, r0, r7, ror #19
    10dc:	01fc8807 	mvnseq	r8, r7, lsl #16
    10e0:	12060000 	andne	r0, r6, #0
    10e4:	00000b05 	andeq	r0, r0, r5, lsl #22
    10e8:	02588b07 	subseq	r8, r8, #7168	; 0x1c00
    10ec:	00070000 	andeq	r0, r7, r0
    10f0:	000bf403 	andeq	pc, fp, r3, lsl #8
    10f4:	888d0700 	stmhi	sp, {r8, r9, sl}
    10f8:	13000002 	movwne	r0, #2
    10fc:	00000c23 	andeq	r0, r0, r3, lsr #24
    1100:	2e024301 	cdpcs	3, 0, cr4, cr2, cr1, {0}
    1104:	a4200011 	strtge	r0, [r0], #-17	; 0xffffffef
    1108:	01000000 	mrseq	r0, (UNDEF: 0)
    110c:	00033a9c 	muleq	r3, ip, sl
    1110:	0b941400 	bleq	fe506118 <APBAHBPrescTable+0xde503660>
    1114:	43010000 	movwmi	r0, #4096	; 0x1000
    1118:	00033a02 	andeq	r3, r3, r2, lsl #20
    111c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1120:	000b3714 	andeq	r3, fp, r4, lsl r7
    1124:	02430100 	subeq	r0, r3, #0, 2
    1128:	000000a2 	andeq	r0, r0, r2, lsr #1
    112c:	146a9102 	strbtne	r9, [sl], #-258	; 0xfffffefe
    1130:	0000098c 	andeq	r0, r0, ip, lsl #19
    1134:	97024301 	strls	r4, [r2, -r1, lsl #6]
    1138:	02000000 	andeq	r0, r0, #0
    113c:	a5156991 	ldrge	r6, [r5, #-2449]	; 0xfffff66f
    1140:	01000009 	tsteq	r0, r9
    1144:	00c20245 	sbceq	r0, r2, r5, asr #4
    1148:	91020000 	mrsls	r0, (UNDEF: 2)
    114c:	0bdc1574 	bleq	ff706724 <APBAHBPrescTable+0xdf703c6c>
    1150:	46010000 	strmi	r0, [r1], -r0
    1154:	0000c202 	andeq	ip, r0, r2, lsl #4
    1158:	70910200 	addsvc	r0, r1, r0, lsl #4
    115c:	a5041600 	strge	r1, [r4, #-1536]	; 0xfffffa00
    1160:	13000001 	movwne	r0, #1
    1164:	00000bcc 	andeq	r0, r0, ip, asr #23
    1168:	0a01f001 	beq	7d174 <startup-0x1ff82e8c>
    116c:	24200011 	strtcs	r0, [r0], #-17	; 0xffffffef
    1170:	01000000 	mrseq	r0, (UNDEF: 0)
    1174:	0003759c 	muleq	r3, ip, r5
    1178:	0b941400 	bleq	fe506180 <APBAHBPrescTable+0xde5036c8>
    117c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    1180:	00033a01 	andeq	r3, r3, r1, lsl #20
    1184:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1188:	00095614 	andeq	r5, r9, r4, lsl r6
    118c:	01f00100 	mvnseq	r0, r0, lsl #2
    1190:	000000a2 	andeq	r0, r0, r2, lsr #1
    1194:	00729102 	rsbseq	r9, r2, r2, lsl #2
    1198:	000b8113 	andeq	r8, fp, r3, lsl r1
    119c:	01e00100 	mvneq	r0, r0, lsl #2
    11a0:	200010ec 	andcs	r1, r0, ip, ror #1
    11a4:	0000001e 	andeq	r0, r0, lr, lsl r0
    11a8:	03aa9c01 			; <UNDEFINED> instruction: 0x03aa9c01
    11ac:	94140000 	ldrls	r0, [r4], #-0
    11b0:	0100000b 	tsteq	r0, fp
    11b4:	033a01e0 	teqeq	sl, #224, 2	; 0x38
    11b8:	91020000 	mrsls	r0, (UNDEF: 2)
    11bc:	0b2f1474 	bleq	bc6394 <startup-0x1f439c6c>
    11c0:	e0010000 	and	r0, r1, r0
    11c4:	0000a201 	andeq	sl, r0, r1, lsl #4
    11c8:	72910200 	addsvc	r0, r1, #0, 4
    11cc:	09d91300 	ldmibeq	r9, {r8, r9, ip}^
    11d0:	c7010000 	strgt	r0, [r1, -r0]
    11d4:	0010b201 	andseq	fp, r0, r1, lsl #4
    11d8:	00003a20 	andeq	r3, r0, r0, lsr #20
    11dc:	ee9c0100 	fmle	f0, f4, f0
    11e0:	14000003 	strne	r0, [r0], #-3
    11e4:	00000b94 	muleq	r0, r4, fp
    11e8:	3a01c701 	bcc	72df4 <startup-0x1ff8d20c>
    11ec:	02000003 	andeq	r0, r0, #3
    11f0:	56147491 			; <UNDEFINED> instruction: 0x56147491
    11f4:	01000009 	tsteq	r0, r9
    11f8:	00a201c7 	adceq	r0, r2, r7, asr #3
    11fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1200:	09ba1472 	ldmibeq	sl!, {r1, r4, r5, r6, sl, ip}
    1204:	c7010000 	strgt	r0, [r1, -r0]
    1208:	00027d01 	andeq	r7, r2, r1, lsl #26
    120c:	71910200 	orrsvc	r0, r1, r0, lsl #4
    1210:	0a2e1300 	beq	b85e18 <startup-0x1f47a1e8>
    1214:	b1010000 	mrslt	r0, (UNDEF: 1)
    1218:	00109401 	andseq	r9, r0, r1, lsl #8
    121c:	00001e20 	andeq	r1, r0, r0, lsr #28
    1220:	239c0100 	orrscs	r0, ip, #0, 2
    1224:	14000004 	strne	r0, [r0], #-4
    1228:	00000b94 	muleq	r0, r4, fp
    122c:	3a01b101 	bcc	6d638 <startup-0x1ff929c8>
    1230:	02000003 	andeq	r0, r0, #3
    1234:	56147491 			; <UNDEFINED> instruction: 0x56147491
    1238:	01000009 	tsteq	r0, r9
    123c:	00a201b1 	strhteq	r0, [r2], r1
    1240:	91020000 	mrsls	r0, (UNDEF: 2)
    1244:	ff130072 			; <UNDEFINED> instruction: 0xff130072
    1248:	01000009 	tsteq	r0, r9
    124c:	1076019c 			; <UNDEFINED> instruction: 0x1076019c
    1250:	001e2000 	andseq	r2, lr, r0
    1254:	9c010000 	stcls	0, cr0, [r1], {-0}
    1258:	00000458 	andeq	r0, r0, r8, asr r4
    125c:	000b9414 	andeq	r9, fp, r4, lsl r4
    1260:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1264:	0000033a 	andeq	r0, r0, sl, lsr r3
    1268:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    126c:	00000956 	andeq	r0, r0, r6, asr r9
    1270:	a2019c01 	andge	r9, r1, #256	; 0x100
    1274:	02000000 	andeq	r0, r0, #0
    1278:	17007291 			; <UNDEFINED> instruction: 0x17007291
    127c:	00000967 	andeq	r0, r0, r7, ror #18
    1280:	a2018801 	andge	r8, r1, #65536	; 0x10000
    1284:	60000000 	andvs	r0, r0, r0
    1288:	16200010 			; <UNDEFINED> instruction: 0x16200010
    128c:	01000000 	mrseq	r0, (UNDEF: 0)
    1290:	0004829c 	muleq	r4, ip, r2
    1294:	0b941400 	bleq	fe50629c <APBAHBPrescTable+0xde5037e4>
    1298:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    129c:	00033a01 	andeq	r3, r3, r1, lsl #20
    12a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    12a4:	0c3a1700 	ldceq	7, cr1, [sl], #-0
    12a8:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    12ac:	00009701 	andeq	r9, r0, r1, lsl #14
    12b0:	00101e00 	andseq	r1, r0, r0, lsl #28
    12b4:	00004220 	andeq	r4, r0, r0, lsr #4
    12b8:	ca9c0100 	bgt	fe7016c0 <APBAHBPrescTable+0xde6fec08>
    12bc:	14000004 	strne	r0, [r0], #-4
    12c0:	00000b94 	muleq	r0, r4, fp
    12c4:	3a016e01 	bcc	5cad0 <startup-0x1ffa3530>
    12c8:	02000003 	andeq	r0, r0, #3
    12cc:	56146c91 			; <UNDEFINED> instruction: 0x56146c91
    12d0:	01000009 	tsteq	r0, r9
    12d4:	00a2016e 	adceq	r0, r2, lr, ror #2
    12d8:	91020000 	mrsls	r0, (UNDEF: 2)
    12dc:	0f9d156a 	svceq	0x009d156a
    12e0:	70010000 	andvc	r0, r1, r0
    12e4:	00009701 	andeq	r9, r0, r1, lsl #14
    12e8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    12ec:	0b461700 	bleq	1186ef4 <startup-0x1ee7910c>
    12f0:	5d010000 	stcpl	0, cr0, [r1, #-0]
    12f4:	0000a201 	andeq	sl, r0, r1, lsl #4
    12f8:	00100800 	andseq	r0, r0, r0, lsl #16
    12fc:	00001620 	andeq	r1, r0, r0, lsr #12
    1300:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    1304:	14000004 	strne	r0, [r0], #-4
    1308:	00000b94 	muleq	r0, r4, fp
    130c:	3a015d01 	bcc	58718 <startup-0x1ffa78e8>
    1310:	02000003 	andeq	r0, r0, #3
    1314:	17007491 			; <UNDEFINED> instruction: 0x17007491
    1318:	00000ae1 	andeq	r0, r0, r1, ror #21
    131c:	97014301 	strls	r4, [r1, -r1, lsl #6]
    1320:	c6000000 	strgt	r0, [r0], -r0
    1324:	4220000f 	eormi	r0, r0, #15
    1328:	01000000 	mrseq	r0, (UNDEF: 0)
    132c:	00053c9c 	muleq	r5, ip, ip
    1330:	0b941400 	bleq	fe506338 <APBAHBPrescTable+0xde503880>
    1334:	43010000 	movwmi	r0, #4096	; 0x1000
    1338:	00033a01 	andeq	r3, r3, r1, lsl #20
    133c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1340:	00095614 	andeq	r5, r9, r4, lsl r6
    1344:	01430100 	mrseq	r0, (UNDEF: 83)
    1348:	000000a2 	andeq	r0, r0, r2, lsr #1
    134c:	156a9102 	strbne	r9, [sl, #-258]!	; 0xfffffefe
    1350:	00000f9d 	muleq	r0, sp, pc	; <UNPREDICTABLE>
    1354:	97014501 	strls	r4, [r1, -r1, lsl #10]
    1358:	02000000 	andeq	r0, r0, #0
    135c:	13007791 	movwne	r7, #1937	; 0x791
    1360:	00000b59 	andeq	r0, r0, r9, asr fp
    1364:	80011501 	andhi	r1, r1, r1, lsl #10
    1368:	4620000f 	strtmi	r0, [r0], -pc
    136c:	01000000 	mrseq	r0, (UNDEF: 0)
    1370:	0005809c 	muleq	r5, ip, r0
    1374:	0b941400 	bleq	fe50637c <APBAHBPrescTable+0xde5038c4>
    1378:	15010000 	strne	r0, [r1, #-0]
    137c:	00033a01 	andeq	r3, r3, r1, lsl #20
    1380:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1384:	00095614 	andeq	r5, r9, r4, lsl r6
    1388:	01150100 	tsteq	r5, r0, lsl #2
    138c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1390:	186a9102 	stmdane	sl!, {r1, r8, ip, pc}^
    1394:	00706d74 	rsbseq	r6, r0, r4, ror sp
    1398:	cd011701 	stcgt	7, cr1, [r1, #-4]
    139c:	02000000 	andeq	r0, r0, #0
    13a0:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    13a4:	000009aa 	andeq	r0, r0, sl, lsr #19
    13a8:	0f4cfe01 	svceq	0x004cfe01
    13ac:	00342000 	eorseq	r2, r4, r0
    13b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    13b4:	000005a4 	andeq	r0, r0, r4, lsr #11
    13b8:	000b1f1a 	andeq	r1, fp, sl, lsl pc
    13bc:	a4fe0100 	ldrbtge	r0, [lr], #256	; 0x100
    13c0:	02000005 	andeq	r0, r0, #5
    13c4:	16007491 			; <UNDEFINED> instruction: 0x16007491
    13c8:	0002cd04 	andeq	ip, r2, r4, lsl #26
    13cc:	0a171900 	beq	5c77d4 <startup-0x1fa3882c>
    13d0:	ca010000 	bgt	413d8 <startup-0x1ffbec28>
    13d4:	20000e34 	andcs	r0, r0, r4, lsr lr
    13d8:	00000118 	andeq	r0, r0, r8, lsl r1
    13dc:	06069c01 	streq	r9, [r6], -r1, lsl #24
    13e0:	941a0000 	ldrls	r0, [sl], #-0
    13e4:	0100000b 	tsteq	r0, fp
    13e8:	00033aca 	andeq	r3, r3, sl, asr #21
    13ec:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    13f0:	000b1f1a 	andeq	r1, fp, sl, lsl pc
    13f4:	a4ca0100 	strbge	r0, [sl], #256	; 0x100
    13f8:	02000005 	andeq	r0, r0, #5
    13fc:	4f1b6091 	svcmi	0x001b6091
    1400:	01000009 	tsteq	r0, r9
    1404:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1408:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    140c:	736f701c 	cmnvc	pc, #28
    1410:	c2cc0100 	sbcgt	r0, ip, #0, 2
    1414:	02000000 	andeq	r0, r0, #0
    1418:	761b7091 			; <UNDEFINED> instruction: 0x761b7091
    141c:	0100000b 	tsteq	r0, fp
    1420:	0000c2cc 	andeq	ip, r0, ip, asr #5
    1424:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1428:	0a8e1d00 	beq	fe388830 <APBAHBPrescTable+0xde385d78>
    142c:	7f010000 	svcvc	0x00010000
    1430:	20000cc4 	andcs	r0, r0, r4, asr #25
    1434:	00000170 	andeq	r0, r0, r0, ror r1
    1438:	941a9c01 	ldrls	r9, [sl], #-3073	; 0xfffff3ff
    143c:	0100000b 	tsteq	r0, fp
    1440:	00033a7f 	andeq	r3, r3, pc, ror sl
    1444:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1448:	0ba60000 	bleq	fe981450 <APBAHBPrescTable+0xde97e998>
    144c:	00040000 	andeq	r0, r4, r0
    1450:	000003a7 	andeq	r0, r0, r7, lsr #7
    1454:	049a0104 	ldreq	r0, [sl], #260	; 0x104
    1458:	870c0000 	strhi	r0, [ip, -r0]
    145c:	9400000c 	strls	r0, [r0], #-12
    1460:	d4000002 	strle	r0, [r0], #-2
    1464:	d2200011 	eorle	r0, r0, #17
    1468:	4b000011 	blmi	14b4 <startup-0x1fffeb4c>
    146c:	02000005 	andeq	r0, r0, #5
    1470:	08170601 	ldmdaeq	r7, {r0, r9, sl}
    1474:	6c030000 	stcvs	0, cr0, [r3], {-0}
    1478:	02000000 	andeq	r0, r0, #0
    147c:	0000372b 	andeq	r3, r0, fp, lsr #14
    1480:	08010200 	stmdaeq	r1, {r9}
    1484:	00000815 	andeq	r0, r0, r5, lsl r8
    1488:	77050202 	strvc	r0, [r5, -r2, lsl #4]
    148c:	03000006 	movweq	r0, #6
    1490:	000007a7 	andeq	r0, r0, r7, lsr #15
    1494:	00503902 	subseq	r3, r0, r2, lsl #18
    1498:	02020000 	andeq	r0, r2, #0
    149c:	0003e107 	andeq	lr, r3, r7, lsl #2
    14a0:	07ce0300 	strbeq	r0, [lr, r0, lsl #6]
    14a4:	4d020000 	stcmi	0, cr0, [r2, #-0]
    14a8:	00000062 	andeq	r0, r0, r2, rrx
    14ac:	05050402 	streq	r0, [r5, #-1026]	; 0xfffffbfe
    14b0:	03000002 	movweq	r0, #2
    14b4:	000002c7 	andeq	r0, r0, r7, asr #5
    14b8:	00744f02 	rsbseq	r4, r4, r2, lsl #30
    14bc:	04020000 	streq	r0, [r2], #-0
    14c0:	0000e007 	andeq	lr, r0, r7
    14c4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    14c8:	00000200 	andeq	r0, r0, r0, lsl #4
    14cc:	db070802 	blle	1c34dc <startup-0x1fe3cb24>
    14d0:	04000000 	streq	r0, [r0], #-0
    14d4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    14d8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    14dc:	0000e507 	andeq	lr, r0, r7, lsl #10
    14e0:	006e0300 	rsbeq	r0, lr, r0, lsl #6
    14e4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    14e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    14ec:	0007a903 	andeq	sl, r7, r3, lsl #18
    14f0:	45240300 	strmi	r0, [r4, #-768]!	; 0xfffffd00
    14f4:	03000000 	movweq	r0, #0
    14f8:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    14fc:	00572c03 	subseq	r2, r7, r3, lsl #24
    1500:	ad050000 	stcge	0, cr0, [r5, #-0]
    1504:	03000000 	movweq	r0, #0
    1508:	000002c9 	andeq	r0, r0, r9, asr #5
    150c:	00693003 	rsbeq	r3, r9, r3
    1510:	bd050000 	stclt	0, cr0, [r5, #-0]
    1514:	06000000 	streq	r0, [r0], -r0
    1518:	000000bd 	strheq	r0, [r0], -sp
    151c:	000000dd 	ldrdeq	r0, [r0], -sp
    1520:	00009007 	andeq	r9, r0, r7
    1524:	08000700 	stmdaeq	r0, {r8, r9, sl}
    1528:	0000065a 	andeq	r0, r0, sl, asr r6
    152c:	b806a804 	stmdalt	r6, {r2, fp, sp, pc}
    1530:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1534:	00000343 	andeq	r0, r0, r3, asr #6
    1538:	00bd3b05 	adcseq	r3, sp, r5, lsl #22
    153c:	070a0000 	streq	r0, [sl, -r0]
    1540:	00003701 	andeq	r3, r0, r1, lsl #14
    1544:	01f90600 	mvnseq	r0, r0, lsl #12
    1548:	0000010f 	andeq	r0, r0, pc, lsl #2
    154c:	0009d30b 	andeq	sp, r9, fp, lsl #6
    1550:	530c0000 	movwpl	r0, #49152	; 0xc000
    1554:	01005445 	tsteq	r0, r5, asr #8
    1558:	06220d00 	strteq	r0, [r2], -r0, lsl #26
    155c:	f9060000 			; <UNDEFINED> instruction: 0xf9060000
    1560:	0000f401 	andeq	pc, r0, r1, lsl #8
    1564:	10c40d00 	sbcne	r0, r4, r0, lsl #26
    1568:	f9060000 			; <UNDEFINED> instruction: 0xf9060000
    156c:	0000f401 	andeq	pc, r0, r1, lsl #8
    1570:	01070a00 	tsteq	r7, r0, lsl #20
    1574:	00000037 	andeq	r0, r0, r7, lsr r0
    1578:	4201fb06 	andmi	pc, r1, #6144	; 0x1800
    157c:	0b000001 	bleq	1588 <startup-0x1fffea78>
    1580:	0000033b 	andeq	r0, r0, fp, lsr r3
    1584:	018c0b00 	orreq	r0, ip, r0, lsl #22
    1588:	00010000 	andeq	r0, r1, r0
    158c:	0005770d 	andeq	r7, r5, sp, lsl #14
    1590:	01fb0600 	mvnseq	r0, r0, lsl #12
    1594:	00000127 	andeq	r0, r0, r7, lsr #2
    1598:	3106100e 	tstcc	r6, lr
    159c:	00018c02 	andeq	r8, r1, r2, lsl #24
    15a0:	49540f00 	ldmdbmi	r4, {r8, r9, sl, fp}^
    15a4:	33060052 	movwcc	r0, #24658	; 0x6052
    15a8:	0000c802 	andeq	ip, r0, r2, lsl #16
    15ac:	ca100000 	bgt	4015b4 <startup-0x1fbfea4c>
    15b0:	0600000e 	streq	r0, [r0], -lr
    15b4:	00c80234 	sbceq	r0, r8, r4, lsr r2
    15b8:	10040000 	andne	r0, r4, r0
    15bc:	00000db7 			; <UNDEFINED> instruction: 0x00000db7
    15c0:	c8023506 	stmdagt	r2, {r1, r2, r8, sl, ip, sp}
    15c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    15c8:	000f3f10 	andeq	r3, pc, r0, lsl pc	; <UNPREDICTABLE>
    15cc:	02360600 	eorseq	r0, r6, #0, 12
    15d0:	000000c8 	andeq	r0, r0, r8, asr #1
    15d4:	e90d000c 	stmdb	sp, {r2, r3}
    15d8:	0600000f 	streq	r0, [r0], -pc
    15dc:	014e0237 	cmpeq	lr, r7, lsr r2
    15e0:	100e0000 	andne	r0, lr, r0
    15e4:	d6023d06 	strle	r3, [r2], -r6, lsl #26
    15e8:	0f000001 	svceq	0x00000001
    15ec:	00524952 	subseq	r4, r2, r2, asr r9
    15f0:	c8023f06 	stmdagt	r2, {r1, r2, r8, r9, sl, fp, ip, sp}
    15f4:	00000000 	andeq	r0, r0, r0
    15f8:	000e7810 	andeq	r7, lr, r0, lsl r8
    15fc:	02400600 	subeq	r0, r0, #0, 12
    1600:	000000c8 	andeq	r0, r0, r8, asr #1
    1604:	0e0e1004 	cdpeq	0, 0, cr1, cr14, cr4, {0}
    1608:	41060000 	mrsmi	r0, (UNDEF: 6)
    160c:	0000c802 	andeq	ip, r0, r2, lsl #16
    1610:	3e100800 	cdpcc	8, 1, cr0, cr0, cr0, {0}
    1614:	06000010 			; <UNDEFINED> instruction: 0x06000010
    1618:	00c80242 	sbceq	r0, r8, r2, asr #4
    161c:	000c0000 	andeq	r0, ip, r0
    1620:	000edf0d 	andeq	sp, lr, sp, lsl #30
    1624:	02430600 	subeq	r0, r3, #0, 12
    1628:	00000198 	muleq	r0, r8, r1
    162c:	4906080e 	stmdbmi	r6, {r1, r2, r3, fp}
    1630:	00020602 	andeq	r0, r2, r2, lsl #12
    1634:	52460f00 	subpl	r0, r6, #0, 30
    1638:	4b060031 	blmi	181704 <startup-0x1fe7e8fc>
    163c:	0000c802 	andeq	ip, r0, r2, lsl #16
    1640:	460f0000 	strmi	r0, [pc], -r0
    1644:	06003252 			; <UNDEFINED> instruction: 0x06003252
    1648:	00c8024c 	sbceq	r0, r8, ip, asr #4
    164c:	00040000 	andeq	r0, r4, r0
    1650:	000e870d 	andeq	r8, lr, sp, lsl #14
    1654:	024d0600 	subeq	r0, sp, #0, 12
    1658:	000001e2 	andeq	r0, r0, r2, ror #3
    165c:	06032011 			; <UNDEFINED> instruction: 0x06032011
    1660:	03480253 	movteq	r0, #33363	; 0x8253
    1664:	4d0f0000 	stcmi	0, cr0, [pc, #-0]	; 166c <startup-0x1fffe994>
    1668:	06005243 	streq	r5, [r0], -r3, asr #4
    166c:	00c80255 	sbceq	r0, r8, r5, asr r2
    1670:	0f000000 	svceq	0x00000000
    1674:	0052534d 	subseq	r5, r2, sp, asr #6
    1678:	c8025606 	stmdagt	r2, {r1, r2, r9, sl, ip, lr}
    167c:	04000000 	streq	r0, [r0], #-0
    1680:	5253540f 	subspl	r5, r3, #251658240	; 0xf000000
    1684:	02570600 	subseq	r0, r7, #0, 12
    1688:	000000c8 	andeq	r0, r0, r8, asr #1
    168c:	0de71008 	stcleq	0, cr1, [r7, #32]!
    1690:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
    1694:	0000c802 	andeq	ip, r0, r2, lsl #16
    1698:	82100c00 	andshi	r0, r0, #0, 24
    169c:	0600000e 	streq	r0, [r0], -lr
    16a0:	00c80259 	sbceq	r0, r8, r9, asr r2
    16a4:	0f100000 	svceq	0x00100000
    16a8:	00524549 	subseq	r4, r2, r9, asr #10
    16ac:	c8025a06 	stmdagt	r2, {r1, r2, r9, fp, ip, lr}
    16b0:	14000000 	strne	r0, [r0], #-0
    16b4:	5253450f 	subspl	r4, r3, #62914560	; 0x3c00000
    16b8:	025b0600 	subseq	r0, fp, #0, 12
    16bc:	000000c8 	andeq	r0, r0, r8, asr #1
    16c0:	54420f18 	strbpl	r0, [r2], #-3864	; 0xfffff0e8
    16c4:	5c060052 	stcpl	0, cr0, [r6], {82}	; 0x52
    16c8:	0000c802 	andeq	ip, r0, r2, lsl #16
    16cc:	d5101c00 	ldrle	r1, [r0, #-3072]	; 0xfffff400
    16d0:	06000005 	streq	r0, [r0], -r5
    16d4:	0348025d 	movteq	r0, #33373	; 0x825d
    16d8:	12200000 	eorne	r0, r0, #0
    16dc:	00000e4c 	andeq	r0, r0, ip, asr #28
    16e0:	58025e06 	stmdapl	r2, {r1, r2, r9, sl, fp, ip, lr}
    16e4:	80000003 	andhi	r0, r0, r3
    16e8:	10541201 	subsne	r1, r4, r1, lsl #4
    16ec:	5f060000 	svcpl	0x00060000
    16f0:	00036802 	andeq	r6, r3, r2, lsl #16
    16f4:	1201b000 	andne	fp, r1, #0
    16f8:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    16fc:	78026006 	stmdavc	r2, {r1, r2, sp, lr}
    1700:	d0000003 	andle	r0, r0, r3
    1704:	4d461301 	stclmi	3, cr1, [r6, #-4]
    1708:	61060052 	qaddvs	r0, r2, r6
    170c:	0000c802 	andeq	ip, r0, r2, lsl #16
    1710:	12020000 	andne	r0, r2, #0
    1714:	00000ec5 	andeq	r0, r0, r5, asr #29
    1718:	c8026206 	stmdagt	r2, {r1, r2, r9, sp, lr}
    171c:	04000000 	streq	r0, [r0], #-0
    1720:	05e91202 	strbeq	r1, [r9, #514]!	; 0x202
    1724:	63060000 	movwvs	r0, #24576	; 0x6000
    1728:	0000bd02 	andeq	fp, r0, r2, lsl #26
    172c:	12020800 	andne	r0, r2, #0, 16
    1730:	00000e7d 	andeq	r0, r0, sp, ror lr
    1734:	c8026406 	stmdagt	r2, {r1, r2, sl, sp, lr}
    1738:	0c000000 	stceq	0, cr0, [r0], {-0}
    173c:	05f31202 	ldrbeq	r1, [r3, #514]!	; 0x202
    1740:	65060000 	strvs	r0, [r6, #-0]
    1744:	0000bd02 	andeq	fp, r0, r2, lsl #26
    1748:	12021000 	andne	r1, r2, #0
    174c:	00000f4a 	andeq	r0, r0, sl, asr #30
    1750:	c8026606 	stmdagt	r2, {r1, r2, r9, sl, sp, lr}
    1754:	14000000 	strne	r0, [r0], #-0
    1758:	05fd1202 	ldrbeq	r1, [sp, #514]!	; 0x202
    175c:	67060000 	strvs	r0, [r6, -r0]
    1760:	0000bd02 	andeq	fp, r0, r2, lsl #26
    1764:	12021800 	andne	r1, r2, #0, 16
    1768:	00000f4b 	andeq	r0, r0, fp, asr #30
    176c:	c8026806 	stmdagt	r2, {r1, r2, fp, sp, lr}
    1770:	1c000000 	stcne	0, cr0, [r0], {-0}
    1774:	06071202 	streq	r1, [r7], -r2, lsl #4
    1778:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    177c:	0000cd02 	andeq	ip, r0, r2, lsl #26
    1780:	12022000 	andne	r2, r2, #0
    1784:	00000ea8 	andeq	r0, r0, r8, lsr #29
    1788:	88026a06 	stmdahi	r2, {r1, r2, r9, fp, sp, lr}
    178c:	40000003 	andmi	r0, r0, r3
    1790:	bd060002 	stclt	0, cr0, [r6, #-8]
    1794:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1798:	07000003 	streq	r0, [r0, -r3]
    179c:	00000090 	muleq	r0, r0, r0
    17a0:	8c060057 	stchi	0, cr0, [r6], {87}	; 0x57
    17a4:	68000001 	stmdavs	r0, {r0}
    17a8:	07000003 	streq	r0, [r0, -r3]
    17ac:	00000090 	muleq	r0, r0, r0
    17b0:	d6060002 	strle	r0, [r6], -r2
    17b4:	78000001 	stmdavc	r0, {r0}
    17b8:	07000003 	streq	r0, [r0, -r3]
    17bc:	00000090 	muleq	r0, r0, r0
    17c0:	bd060001 	stclt	0, cr0, [r6, #-4]
    17c4:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    17c8:	07000003 	streq	r0, [r0, -r3]
    17cc:	00000090 	muleq	r0, r0, r0
    17d0:	0606000b 	streq	r0, [r6], -fp
    17d4:	98000002 	stmdals	r0, {r1}
    17d8:	07000003 	streq	r0, [r0, -r3]
    17dc:	00000090 	muleq	r0, r0, r0
    17e0:	d00d001b 	andle	r0, sp, fp, lsl r0
    17e4:	0600000c 	streq	r0, [r0], -ip
    17e8:	0212026b 	andseq	r0, r2, #-1342177274	; 0xb0000006
    17ec:	0c140000 	ldceq	0, cr0, [r4], {-0}
    17f0:	04313807 	ldrteq	r3, [r1], #-2055	; 0xfffff7f9
    17f4:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
    17f8:	0700000f 	streq	r0, [r0, -pc]
    17fc:	0000a23a 	andeq	sl, r0, sl, lsr r2
    1800:	a8150000 	ldmdage	r5, {}	; <UNPREDICTABLE>
    1804:	0700000d 	streq	r0, [r0, -sp]
    1808:	0000973d 	andeq	r9, r0, sp, lsr r7
    180c:	40150200 	andsmi	r0, r5, r0, lsl #4
    1810:	07000011 	smladeq	r0, r1, r0, r0
    1814:	00009740 	andeq	r9, r0, r0, asr #14
    1818:	56150300 	ldrpl	r0, [r5], -r0, lsl #6
    181c:	0700000d 	streq	r0, [r0, -sp]
    1820:	00009745 	andeq	r9, r0, r5, asr #14
    1824:	5e150400 	cfmulspl	mvf0, mvf5, mvf0
    1828:	0700000d 	streq	r0, [r0, -sp]
    182c:	00009749 	andeq	r9, r0, r9, asr #14
    1830:	06150500 	ldreq	r0, [r5], -r0, lsl #10
    1834:	07000011 	smladeq	r0, r1, r0, r0
    1838:	0001424c 	andeq	r4, r1, ip, asr #4
    183c:	13150600 	tstne	r5, #0, 12
    1840:	0700000e 	streq	r0, [r0, -lr]
    1844:	0001424f 	andeq	r4, r1, pc, asr #4
    1848:	4b150700 	blmi	543450 <startup-0x1fabcbb0>
    184c:	07000010 	smladeq	r0, r0, r0, r0
    1850:	00014252 	andeq	r4, r1, r2, asr r2
    1854:	64150800 	ldrvs	r0, [r5], #-2048	; 0xfffff800
    1858:	07000011 	smladeq	r0, r1, r0, r0
    185c:	00014255 	andeq	r4, r1, r5, asr r2
    1860:	73150900 	tstvc	r5, #0, 18
    1864:	07000010 	smladeq	r0, r0, r0, r0
    1868:	00014258 	andeq	r4, r1, r8, asr r2
    186c:	ec150a00 			; <UNDEFINED> instruction: 0xec150a00
    1870:	07000010 	smladeq	r0, r0, r0, r0
    1874:	0001425b 	andeq	r4, r1, fp, asr r2
    1878:	03000b00 	movweq	r0, #2816	; 0xb00
    187c:	00000fc0 	andeq	r0, r0, r0, asr #31
    1880:	03a45d07 			; <UNDEFINED> instruction: 0x03a45d07
    1884:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    1888:	04b16207 	ldrteq	r6, [r1], #519	; 0x207
    188c:	a7150000 	ldrge	r0, [r5, -r0]
    1890:	0700000f 	streq	r0, [r0, -pc]
    1894:	0000a264 	andeq	sl, r0, r4, ror #4
    1898:	50150000 	andspl	r0, r5, r0
    189c:	0700000f 	streq	r0, [r0, -pc]
    18a0:	0000a268 	andeq	sl, r0, r8, ror #4
    18a4:	2e150200 	cdpcs	2, 1, cr0, cr5, cr0, {0}
    18a8:	0700000d 	streq	r0, [r0, -sp]
    18ac:	0000a26c 	andeq	sl, r0, ip, ror #4
    18b0:	75150400 	ldrvc	r0, [r5, #-1024]	; 0xfffffc00
    18b4:	0700000d 	streq	r0, [r0, -sp]
    18b8:	0000a271 	andeq	sl, r0, r1, ror r2
    18bc:	d0150600 	andsle	r0, r5, r0, lsl #12
    18c0:	0700000f 	streq	r0, [r0, -pc]
    18c4:	0000a276 	andeq	sl, r0, r6, ror r2
    18c8:	1e150800 	cdpne	8, 1, cr0, cr5, cr0, {0}
    18cc:	0700000f 	streq	r0, [r0, -pc]
    18d0:	00009779 	andeq	r9, r0, r9, ror r7
    18d4:	1d150a00 	vldrne	s0, [r5, #-0]
    18d8:	07000010 	smladeq	r0, r0, r0, r0
    18dc:	0000977b 	andeq	r9, r0, fp, ror r7
    18e0:	0d150b00 	vldreq	d0, [r5, #-0]
    18e4:	07000010 	smladeq	r0, r0, r0, r0
    18e8:	0000977e 	andeq	r9, r0, lr, ror r7
    18ec:	8e150c00 	cdphi	12, 1, cr0, cr5, cr0, {0}
    18f0:	07000010 	smladeq	r0, r0, r0, r0
    18f4:	00014281 	andeq	r4, r1, r1, lsl #5
    18f8:	03000d00 	movweq	r0, #3328	; 0xd00
    18fc:	00000f08 	andeq	r0, r0, r8, lsl #30
    1900:	043c8307 	ldrteq	r8, [ip], #-775	; 0xfffffcf9
    1904:	14140000 	ldrne	r0, [r4], #-0
    1908:	050d8807 	streq	r8, [sp, #-2055]	; 0xfffff7f9
    190c:	44150000 	ldrmi	r0, [r5], #-0
    1910:	0700000f 	streq	r0, [r0, -pc]
    1914:	0000bd8a 	andeq	fp, r0, sl, lsl #27
    1918:	a2150000 	andsge	r0, r5, #0
    191c:	0700000e 	streq	r0, [r0, -lr]
    1920:	0000bd8d 	andeq	fp, r0, sp, lsl #27
    1924:	49160400 	ldmdbmi	r6, {sl}
    1928:	07004544 	streq	r4, [r0, -r4, asr #10]
    192c:	00009790 	muleq	r0, r0, r7
    1930:	52160800 	andspl	r0, r6, #0, 16
    1934:	07005254 	smlsdeq	r0, r4, r2, r5
    1938:	00009794 	muleq	r0, r4, r7
    193c:	44160900 	ldrmi	r0, [r6], #-2304	; 0xfffff700
    1940:	0700434c 	streq	r4, [r0, -ip, asr #6]
    1944:	00009798 	muleq	r0, r8, r7
    1948:	54150a00 	ldrpl	r0, [r5], #-2560	; 0xfffff600
    194c:	0700000b 	streq	r0, [r0, -fp]
    1950:	00050d9c 	muleq	r5, ip, sp
    1954:	06000b00 	streq	r0, [r0], -r0, lsl #22
    1958:	00000097 	muleq	r0, r7, r0
    195c:	0000051d 	andeq	r0, r0, sp, lsl r5
    1960:	00009007 	andeq	r9, r0, r7
    1964:	03000700 	movweq	r0, #1792	; 0x700
    1968:	000010cd 	andeq	r1, r0, sp, asr #1
    196c:	04bc9e07 	ldrteq	r9, [ip], #3591	; 0xe07
    1970:	14140000 	ldrne	r0, [r4], #-0
    1974:	0585a307 	streq	sl, [r5, #775]	; 0x307
    1978:	44150000 	ldrmi	r0, [r5], #-0
    197c:	0700000f 	streq	r0, [r0, -pc]
    1980:	0000bda5 	andeq	fp, r0, r5, lsr #27
    1984:	a2150000 	andsge	r0, r5, #0
    1988:	0700000e 	streq	r0, [r0, -lr]
    198c:	0000bda8 	andeq	fp, r0, r8, lsr #27
    1990:	49160400 	ldmdbmi	r6, {sl}
    1994:	07004544 	streq	r4, [r0, -r4, asr #10]
    1998:	000097ab 	andeq	r9, r0, fp, lsr #15
    199c:	52160800 	andspl	r0, r6, #0, 16
    19a0:	07005254 	smlsdeq	r0, r4, r2, r5
    19a4:	000097af 	andeq	r9, r0, pc, lsr #15
    19a8:	44160900 	ldrmi	r0, [r6], #-2304	; 0xfffff700
    19ac:	0700434c 	streq	r4, [r0, -ip, asr #6]
    19b0:	000097b3 			; <UNDEFINED> instruction: 0x000097b3
    19b4:	54150a00 	ldrpl	r0, [r5], #-2560	; 0xfffff600
    19b8:	0700000b 	streq	r0, [r0, -fp]
    19bc:	00050db6 			; <UNDEFINED> instruction: 0x00050db6
    19c0:	46160b00 	ldrmi	r0, [r6], -r0, lsl #22
    19c4:	0700494d 	streq	r4, [r0, -sp, asr #18]
    19c8:	000097b9 			; <UNDEFINED> instruction: 0x000097b9
    19cc:	03001300 	movweq	r1, #768	; 0x300
    19d0:	00000c66 	andeq	r0, r0, r6, ror #24
    19d4:	0528bc07 	streq	fp, [r8, #-3079]!	; 0xfffff3f9
    19d8:	bf170000 	svclt	0x00170000
    19dc:	01000010 	tsteq	r0, r0, lsl r0
    19e0:	011b0688 	tsteq	fp, r8, lsl #13
    19e4:	236c0000 	cmncs	ip, #0
    19e8:	003a2000 	eorseq	r2, sl, r0
    19ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    19f0:	000005d8 	ldrdeq	r0, [r0], -r8
    19f4:	000fb818 	andeq	fp, pc, r8, lsl r8	; <UNPREDICTABLE>
    19f8:	06880100 	streq	r0, [r8], r0, lsl #2
    19fc:	000000bd 	strheq	r0, [r0], -sp
    1a00:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
    1a04:	00000f01 	andeq	r0, r0, r1, lsl #30
    1a08:	bd068801 	stclt	8, cr8, [r6, #-4]
    1a0c:	02000000 	andeq	r0, r0, #0
    1a10:	96196891 			; <UNDEFINED> instruction: 0x96196891
    1a14:	0100000f 	tsteq	r0, pc
    1a18:	011b068a 	tsteq	fp, sl, lsl #13
    1a1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1a20:	d61a0077 			; <UNDEFINED> instruction: 0xd61a0077
    1a24:	01000010 	tsteq	r0, r0, lsl r0
    1a28:	2280063a 	addcs	r0, r0, #60817408	; 0x3a00000
    1a2c:	00ec2000 	rsceq	r2, ip, r0
    1a30:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a34:	0000060d 	andeq	r0, r0, sp, lsl #12
    1a38:	00108918 	andseq	r8, r0, r8, lsl r9
    1a3c:	063a0100 	ldrteq	r0, [sl], -r0, lsl #2
    1a40:	0000060d 	andeq	r0, r0, sp, lsl #12
    1a44:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    1a48:	00000ecf 	andeq	r0, r0, pc, asr #29
    1a4c:	bd063a01 	vstrlt	s6, [r6, #-4]
    1a50:	02000000 	andeq	r0, r0, #0
    1a54:	1b007091 	blne	1dca0 <startup-0x1ffe2360>
    1a58:	00039804 	andeq	r9, r3, r4, lsl #16
    1a5c:	0f2f1c00 	svceq	0x002f1c00
    1a60:	d2010000 	andle	r0, r1, #0
    1a64:	00011b05 	andeq	r1, r1, r5, lsl #22
    1a68:	00209000 	eoreq	r9, r0, r0
    1a6c:	0001f020 	andeq	pc, r1, r0, lsr #32
    1a70:	5b9c0100 	blpl	fe701e78 <APBAHBPrescTable+0xde6ff3c0>
    1a74:	18000006 	stmdane	r0, {r1, r2}
    1a78:	00001089 	andeq	r1, r0, r9, lsl #1
    1a7c:	0d05d201 	sfmeq	f5, 1, [r5, #-4]
    1a80:	02000006 	andeq	r0, r0, #6
    1a84:	cf186491 	svcgt	0x00186491
    1a88:	0100000e 	tsteq	r0, lr
    1a8c:	00bd05d2 	ldrsbteq	r0, [sp], r2
    1a90:	91020000 	mrsls	r0, (UNDEF: 2)
    1a94:	0f9e1960 	svceq	0x009e1960
    1a98:	d4010000 	strle	r0, [r1], #-0
    1a9c:	00011b05 	andeq	r1, r1, r5, lsl #22
    1aa0:	6f910200 	svcvs	0x00910200
    1aa4:	0c6f1a00 			; <UNDEFINED> instruction: 0x0c6f1a00
    1aa8:	96010000 	strls	r0, [r1], -r0
    1aac:	00202005 	eoreq	r2, r0, r5
    1ab0:	00007020 	andeq	r7, r0, r0, lsr #32
    1ab4:	9f9c0100 	svcls	0x009c0100
    1ab8:	18000006 	stmdane	r0, {r1, r2}
    1abc:	00001089 	andeq	r1, r0, r9, lsl #1
    1ac0:	0d059601 	stceq	6, cr9, [r5, #-4]
    1ac4:	02000006 	andeq	r0, r0, #6
    1ac8:	60186c91 	mulsvs	r8, r1, ip
    1acc:	0100000f 	tsteq	r0, pc
    1ad0:	00bd0596 	umlalseq	r0, sp, r6, r5
    1ad4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ad8:	10431968 	subne	r1, r3, r8, ror #18
    1adc:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    1ae0:	0000bd05 	andeq	fp, r0, r5, lsl #26
    1ae4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ae8:	10611d00 	rsbne	r1, r1, r0, lsl #26
    1aec:	32010000 	andcc	r0, r1, #0
    1af0:	00010f05 	andeq	r0, r1, r5, lsl #30
    1af4:	001f3000 	andseq	r3, pc, r0
    1af8:	0000f020 	andeq	pc, r0, r0, lsr #32
    1afc:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    1b00:	18000006 	stmdane	r0, {r1, r2}
    1b04:	00001089 	andeq	r1, r0, r9, lsl #1
    1b08:	0d053201 	sfmeq	f3, 4, [r5, #-4]
    1b0c:	02000006 	andeq	r0, r0, #6
    1b10:	60186c91 	mulsvs	r8, r1, ip
    1b14:	0100000f 	tsteq	r0, pc
    1b18:	00bd0532 	adcseq	r0, sp, r2, lsr r5
    1b1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b20:	0f9d1968 	svceq	0x009d1968
    1b24:	34010000 	strcc	r0, [r1], #-0
    1b28:	00010f05 	andeq	r0, r1, r5, lsl #30
    1b2c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1b30:	107c1a00 	rsbsne	r1, ip, r0, lsl #20
    1b34:	0a010000 	beq	41b3c <startup-0x1ffbe4c4>
    1b38:	001ef605 	andseq	pc, lr, r5, lsl #12
    1b3c:	00003a20 	andeq	r3, r0, r0, lsr #20
    1b40:	2b9c0100 	blcs	fe701f48 <APBAHBPrescTable+0xde6ff490>
    1b44:	18000007 	stmdane	r0, {r0, r1, r2}
    1b48:	00001089 	andeq	r1, r0, r9, lsl #1
    1b4c:	0d050a01 	vstreq	s0, [r5, #-4]
    1b50:	02000006 	andeq	r0, r0, #6
    1b54:	cf187491 	svcgt	0x00187491
    1b58:	0100000e 	tsteq	r0, lr
    1b5c:	00bd050a 	adcseq	r0, sp, sl, lsl #10
    1b60:	91020000 	mrsls	r0, (UNDEF: 2)
    1b64:	02701870 	rsbseq	r1, r0, #112, 16	; 0x700000
    1b68:	0a010000 	beq	41b70 <startup-0x1ffbe490>
    1b6c:	00014205 	andeq	r4, r1, r5, lsl #4
    1b70:	6f910200 	svcvs	0x00910200
    1b74:	0d891d00 	stceq	13, cr1, [r9]
    1b78:	3d010000 	stccc	0, cr0, [r1, #-0]
    1b7c:	00009704 	andeq	r9, r0, r4, lsl #14
    1b80:	001ed000 	andseq	sp, lr, r0
    1b84:	00002620 	andeq	r2, r0, r0, lsr #12
    1b88:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    1b8c:	18000007 	stmdane	r0, {r0, r1, r2}
    1b90:	00001089 	andeq	r1, r0, r9, lsl #1
    1b94:	0d043d01 	stceq	13, cr3, [r4, #-4]
    1b98:	02000006 	andeq	r0, r0, #6
    1b9c:	2a196c91 	bcs	65cde8 <startup-0x1f9a3218>
    1ba0:	01000008 	tsteq	r0, r8
    1ba4:	0097043f 	addseq	r0, r7, pc, lsr r4
    1ba8:	91020000 	mrsls	r0, (UNDEF: 2)
    1bac:	0f1d0077 	svceq	0x001d0077
    1bb0:	01000011 	tsteq	r0, r1, lsl r0
    1bb4:	00970429 	addseq	r0, r7, r9, lsr #8
    1bb8:	1eaa0000 	cdpne	0, 10, cr0, cr10, cr0, {0}
    1bbc:	00262000 	eoreq	r2, r6, r0
    1bc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bc4:	0000079d 	muleq	r0, sp, r7
    1bc8:	00108918 	andseq	r8, r0, r8, lsl r9
    1bcc:	04290100 	strteq	r0, [r9], #-256	; 0xffffff00
    1bd0:	0000060d 	andeq	r0, r0, sp, lsl #12
    1bd4:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    1bd8:	0000082a 	andeq	r0, r0, sl, lsr #16
    1bdc:	97042b01 	strls	r2, [r4, -r1, lsl #22]
    1be0:	02000000 	andeq	r0, r0, #0
    1be4:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    1be8:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
    1bec:	97041001 	strls	r1, [r4, -r1]
    1bf0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1bf4:	2e20001e 	miacs	acc0, lr, r0
    1bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    1bfc:	0007d69c 	muleq	r7, ip, r6
    1c00:	10891800 	addne	r1, r9, r0, lsl #16
    1c04:	10010000 	andne	r0, r1, r0
    1c08:	00060d04 	andeq	r0, r6, r4, lsl #26
    1c0c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1c10:	000f8c19 	andeq	r8, pc, r9, lsl ip	; <UNPREDICTABLE>
    1c14:	04120100 	ldreq	r0, [r2], #-256	; 0xffffff00
    1c18:	00000097 	muleq	r0, r7, r0
    1c1c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1c20:	000ddc1d 	andeq	sp, sp, sp, lsl ip
    1c24:	03d20100 	bicseq	r0, r2, #0, 2
    1c28:	00000097 	muleq	r0, r7, r0
    1c2c:	20001e1a 	andcs	r1, r0, sl, lsl lr
    1c30:	00000062 	andeq	r0, r0, r2, rrx
    1c34:	081e9c01 	ldmdaeq	lr, {r0, sl, fp, ip, pc}
    1c38:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    1c3c:	01000010 	tsteq	r0, r0, lsl r0
    1c40:	060d03d2 			; <UNDEFINED> instruction: 0x060d03d2
    1c44:	91020000 	mrsls	r0, (UNDEF: 2)
    1c48:	0f77196c 	svceq	0x0077196c
    1c4c:	d4010000 	strle	r0, [r1], #-0
    1c50:	0000bd03 	andeq	fp, r0, r3, lsl #26
    1c54:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c58:	00114819 	andseq	r4, r1, r9, lsl r8
    1c5c:	03d50100 	bicseq	r0, r5, #0, 2
    1c60:	00000097 	muleq	r0, r7, r0
    1c64:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1c68:	000ef71d 	andeq	pc, lr, sp, lsl r7	; <UNPREDICTABLE>
    1c6c:	03b90100 			; <UNDEFINED> instruction: 0x03b90100
    1c70:	00000097 	muleq	r0, r7, r0
    1c74:	20001dd8 	ldrdcs	r1, [r0], -r8
    1c78:	00000042 	andeq	r0, r0, r2, asr #32
    1c7c:	08579c01 	ldmdaeq	r7, {r0, sl, fp, ip, pc}^
    1c80:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    1c84:	01000010 	tsteq	r0, r0, lsl r0
    1c88:	060d03b9 			; <UNDEFINED> instruction: 0x060d03b9
    1c8c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c90:	0cdc196c 			; <UNDEFINED> instruction: 0x0cdc196c
    1c94:	bb010000 	bllt	41c9c <startup-0x1ffbe364>
    1c98:	00009703 	andeq	r9, r0, r3, lsl #14
    1c9c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1ca0:	0e571d00 	cdpeq	13, 5, cr1, cr7, cr0, {0}
    1ca4:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    1ca8:	00009703 	andeq	r9, r0, r3, lsl #14
    1cac:	001cb400 	andseq	fp, ip, r0, lsl #8
    1cb0:	00012420 	andeq	r2, r1, r0, lsr #8
    1cb4:	ae9c0100 	fmlgee	f0, f4, f0
    1cb8:	18000008 	stmdane	r0, {r3}
    1cbc:	00001089 	andeq	r1, r0, r9, lsl #1
    1cc0:	0d036801 	stceq	8, cr6, [r3, #-4]
    1cc4:	02000006 	andeq	r0, r0, #6
    1cc8:	2c186c91 	ldccs	12, cr6, [r8], {145}	; 0x91
    1ccc:	01000010 	tsteq	r0, r0, lsl r0
    1cd0:	00970368 	addseq	r0, r7, r8, ror #6
    1cd4:	91020000 	mrsls	r0, (UNDEF: 2)
    1cd8:	076f196b 	strbeq	r1, [pc, -fp, ror #18]!
    1cdc:	6a010000 	bvs	41ce4 <startup-0x1ffbe31c>
    1ce0:	00009703 	andeq	r9, r0, r3, lsl #14
    1ce4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1ce8:	000e7019 	andeq	r7, lr, r9, lsl r0
    1cec:	036d0100 	cmneq	sp, #0, 2
    1cf0:	000000bd 	strheq	r0, [r0], -sp
    1cf4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1cf8:	000e261d 	andeq	r2, lr, sp, lsl r6
    1cfc:	03360100 	teqeq	r6, #0, 2
    1d00:	00000097 	muleq	r0, r7, r0
    1d04:	20001c54 	andcs	r1, r0, r4, asr ip
    1d08:	00000060 	andeq	r0, r0, r0, rrx
    1d0c:	08f69c01 	ldmeq	r6!, {r0, sl, fp, ip, pc}^
    1d10:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    1d14:	01000010 	tsteq	r0, r0, lsl r0
    1d18:	060d0336 			; <UNDEFINED> instruction: 0x060d0336
    1d1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d20:	0f81186c 	svceq	0x0081186c
    1d24:	36010000 	strcc	r0, [r1], -r0
    1d28:	00009703 	andeq	r9, r0, r3, lsl #14
    1d2c:	6b910200 	blvs	fe442534 <APBAHBPrescTable+0xde43fa7c>
    1d30:	000d1e19 	andeq	r1, sp, r9, lsl lr
    1d34:	03380100 	teqeq	r8, #0, 2
    1d38:	00000097 	muleq	r0, r7, r0
    1d3c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1d40:	000cfd1a 	andeq	pc, ip, sl, lsl sp	; <UNPREDICTABLE>
    1d44:	031f0100 	tsteq	pc, #0, 2
    1d48:	20001c1c 	andcs	r1, r0, ip, lsl ip
    1d4c:	00000038 	andeq	r0, r0, r8, lsr r0
    1d50:	092b9c01 	stmdbeq	fp!, {r0, sl, fp, ip, pc}
    1d54:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    1d58:	01000010 	tsteq	r0, r0, lsl r0
    1d5c:	060d031f 			; <UNDEFINED> instruction: 0x060d031f
    1d60:	91020000 	mrsls	r0, (UNDEF: 2)
    1d64:	0f811874 	svceq	0x00811874
    1d68:	1f010000 	svcne	0x00010000
    1d6c:	00009703 	andeq	r9, r0, r3, lsl #14
    1d70:	73910200 	orrsvc	r0, r1, #0, 4
    1d74:	10a31a00 	adcne	r1, r3, r0, lsl #20
    1d78:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    1d7c:	001a7202 	andseq	r7, sl, r2, lsl #4
    1d80:	0001aa20 	andeq	sl, r1, r0, lsr #20
    1d84:	6f9c0100 	svcvs	0x009c0100
    1d88:	18000009 	stmdane	r0, {r0, r3}
    1d8c:	00001089 	andeq	r1, r0, r9, lsl #1
    1d90:	0d02ee01 	stceq	14, cr14, [r2, #-4]
    1d94:	02000006 	andeq	r0, r0, #6
    1d98:	81187491 			; <UNDEFINED> instruction: 0x81187491
    1d9c:	0100000f 	tsteq	r0, pc
    1da0:	009702ee 	addseq	r0, r7, lr, ror #5
    1da4:	91020000 	mrsls	r0, (UNDEF: 2)
    1da8:	0c7d1873 	ldcleq	8, cr1, [sp], #-460	; 0xfffffe34
    1dac:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    1db0:	00096f02 	andeq	r6, r9, r2, lsl #30
    1db4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1db8:	85041b00 	strhi	r1, [r4, #-2816]	; 0xfffff500
    1dbc:	1a000005 	bne	1dd8 <startup-0x1fffe228>
    1dc0:	00000dec 	andeq	r0, r0, ip, ror #27
    1dc4:	1c02bf01 	stcne	15, cr11, [r2], {1}
    1dc8:	5620001a 			; <UNDEFINED> instruction: 0x5620001a
    1dcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd0:	0009aa9c 	muleq	r9, ip, sl
    1dd4:	10891800 	addne	r1, r9, r0, lsl #16
    1dd8:	bf010000 	svclt	0x00010000
    1ddc:	00060d02 	andeq	r0, r6, r2, lsl #26
    1de0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1de4:	0010b718 	andseq	fp, r0, r8, lsl r7
    1de8:	02bf0100 	adcseq	r0, pc, #0, 2
    1dec:	00000097 	muleq	r0, r7, r0
    1df0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1df4:	000d431d 	andeq	r4, sp, sp, lsl r3
    1df8:	02890100 	addeq	r0, r9, #0, 2
    1dfc:	00000097 	muleq	r0, r7, r0
    1e00:	20001946 	andcs	r1, r0, r6, asr #18
    1e04:	000000d6 	ldrdeq	r0, [r0], -r6
    1e08:	09f29c01 	ldmibeq	r2!, {r0, sl, fp, ip, pc}^
    1e0c:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    1e10:	01000010 	tsteq	r0, r0, lsl r0
    1e14:	060d0289 	streq	r0, [sp], -r9, lsl #5
    1e18:	91020000 	mrsls	r0, (UNDEF: 2)
    1e1c:	10af186c 	adcne	r1, pc, ip, ror #16
    1e20:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    1e24:	00009702 	andeq	r9, r0, r2, lsl #14
    1e28:	6b910200 	blvs	fe442630 <APBAHBPrescTable+0xde43fb78>
    1e2c:	000db119 	andeq	fp, sp, r9, lsl r1
    1e30:	028b0100 	addeq	r0, fp, #0, 2
    1e34:	000000bd 	strheq	r0, [r0], -sp
    1e38:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e3c:	000eb81d 	andeq	fp, lr, sp, lsl r8
    1e40:	02410100 	subeq	r0, r1, #0, 2
    1e44:	00000097 	muleq	r0, r7, r0
    1e48:	20001764 	andcs	r1, r0, r4, ror #14
    1e4c:	000001e2 	andeq	r0, r0, r2, ror #3
    1e50:	0a3a9c01 	beq	ea8e5c <startup-0x1f1571a4>
    1e54:	89180000 	ldmdbhi	r8, {}	; <UNPREDICTABLE>
    1e58:	01000010 	tsteq	r0, r0, lsl r0
    1e5c:	060d0241 	streq	r0, [sp], -r1, asr #4
    1e60:	91020000 	mrsls	r0, (UNDEF: 2)
    1e64:	0e1c1864 	cdpeq	8, 1, cr1, cr12, cr4, {3}
    1e68:	41010000 	mrsmi	r0, (UNDEF: 1)
    1e6c:	000a3a02 	andeq	r3, sl, r2, lsl #20
    1e70:	60910200 	addsvs	r0, r1, r0, lsl #4
    1e74:	0010f519 	andseq	pc, r0, r9, lsl r5	; <UNPREDICTABLE>
    1e78:	02430100 	subeq	r0, r3, #0, 2
    1e7c:	00000097 	muleq	r0, r7, r0
    1e80:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    1e84:	051d041b 	ldreq	r0, [sp, #-1051]	; 0xfffffbe5
    1e88:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
    1e8c:	0100000d 	tsteq	r0, sp
    1e90:	169c020b 	ldrne	r0, [ip], fp, lsl #4
    1e94:	00c82000 	sbceq	r2, r8, r0
    1e98:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e9c:	00000a75 	andeq	r0, r0, r5, ror sl
    1ea0:	00108918 	andseq	r8, r0, r8, lsl r9
    1ea4:	020b0100 	andeq	r0, fp, #0, 2
    1ea8:	0000060d 	andeq	r0, r0, sp, lsl #12
    1eac:	18749102 	ldmdane	r4!, {r1, r8, ip, pc}^
    1eb0:	00000270 	andeq	r0, r0, r0, ror r2
    1eb4:	42020b01 	andmi	r0, r2, #1024	; 0x400
    1eb8:	02000001 	andeq	r0, r0, #1
    1ebc:	1a007391 	bne	1ed08 <startup-0x1ffe12f8>
    1ec0:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1ec4:	5c01ed01 	stcpl	13, cr14, [r1], {1}
    1ec8:	40200016 	eormi	r0, r0, r6, lsl r0
    1ecc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ed0:	000aaa9c 	muleq	sl, ip, sl
    1ed4:	10891800 	addne	r1, r9, r0, lsl #16
    1ed8:	ed010000 	stc	0, cr0, [r1, #-0]
    1edc:	00060d01 	andeq	r0, r6, r1, lsl #26
    1ee0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1ee4:	00027018 	andeq	r7, r2, r8, lsl r0
    1ee8:	01ed0100 	mvneq	r0, r0, lsl #2
    1eec:	00000142 	andeq	r0, r0, r2, asr #2
    1ef0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1ef4:	000e391a 	andeq	r3, lr, sl, lsl r9
    1ef8:	01d40100 	bicseq	r0, r4, r0, lsl #2
    1efc:	200015ea 	andcs	r1, r0, sl, ror #11
    1f00:	00000072 	andeq	r0, r0, r2, ror r0
    1f04:	0ad09c01 	beq	ff428f10 <APBAHBPrescTable+0xdf426458>
    1f08:	66180000 	ldrvs	r0, [r8], -r0
    1f0c:	0100000d 	tsteq	r0, sp
    1f10:	009701d4 			; <UNDEFINED> instruction: 0x009701d4
    1f14:	91020000 	mrsls	r0, (UNDEF: 2)
    1f18:	c11a0077 	tstgt	sl, r7, ror r0
    1f1c:	0100000c 	tsteq	r0, ip
    1f20:	159801a9 	ldrne	r0, [r8, #425]	; 0x1a9
    1f24:	00522000 	subseq	r2, r2, r0
    1f28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f2c:	00000af6 	strdeq	r0, [r0], -r6
    1f30:	000dff18 	andeq	pc, sp, r8, lsl pc	; <UNPREDICTABLE>
    1f34:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
    1f38:	00000af6 	strdeq	r0, [r0], -r6
    1f3c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1f40:	0431041b 	ldrteq	r0, [r1], #-1051	; 0xfffffbe5
    1f44:	551a0000 	ldrpl	r0, [sl, #-0]
    1f48:	01000011 	tsteq	r0, r1, lsl r0
    1f4c:	13e8014e 	mvnne	r0, #-2147483629	; 0x80000013
    1f50:	01b02000 	movseq	r2, r0
    1f54:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f58:	00000b31 	andeq	r0, r0, r1, lsr fp
    1f5c:	000ce818 	andeq	lr, ip, r8, lsl r8
    1f60:	014e0100 	mrseq	r0, (UNDEF: 94)
    1f64:	00000b31 	andeq	r0, r0, r1, lsr fp
    1f68:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    1f6c:	0000112a 	andeq	r1, r0, sl, lsr #2
    1f70:	bd015001 	stclt	0, cr5, [r1, #-4]
    1f74:	02000000 	andeq	r0, r0, #0
    1f78:	1b006c91 	blne	1d1c4 <startup-0x1ffe2e3c>
    1f7c:	0004b104 	andeq	fp, r4, r4, lsl #2
    1f80:	0ed61e00 	cdpeq	14, 13, cr1, cr6, cr0, {0}
    1f84:	c5010000 	strgt	r0, [r1, #-0]
    1f88:	00000097 	muleq	r0, r7, r0
    1f8c:	20001224 	andcs	r1, r0, r4, lsr #4
    1f90:	000001c4 	andeq	r0, r0, r4, asr #3
    1f94:	0b899c01 	bleq	fe268fa0 <APBAHBPrescTable+0xde2664e8>
    1f98:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    1f9c:	01000010 	tsteq	r0, r0, lsl r0
    1fa0:	00060dc5 	andeq	r0, r6, r5, asr #27
    1fa4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1fa8:	000dff1f 	andeq	pc, sp, pc, lsl pc	; <UNPREDICTABLE>
    1fac:	f6c50100 			; <UNDEFINED> instruction: 0xf6c50100
    1fb0:	0200000a 	andeq	r0, r0, #10
    1fb4:	d1206891 			; <UNDEFINED> instruction: 0xd1206891
    1fb8:	0100000d 	tsteq	r0, sp
    1fbc:	000097c7 	andeq	r9, r0, r7, asr #15
    1fc0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1fc4:	00116d20 	andseq	r6, r1, r0, lsr #26
    1fc8:	bdc80100 	stflte	f0, [r8]
    1fcc:	02000000 	andeq	r0, r0, #0
    1fd0:	21007091 	swpcs	r7, r1, [r0]
    1fd4:	00000c5b 	andeq	r0, r0, fp, asr ip
    1fd8:	11d4a701 	bicsne	sl, r4, r1, lsl #14
    1fdc:	00502000 	subseq	r2, r0, r0
    1fe0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fe4:	0010891f 	andseq	r8, r0, pc, lsl r9
    1fe8:	0da70100 	stfeqs	f0, [r7]
    1fec:	02000006 	andeq	r0, r0, #6
    1ff0:	00007491 	muleq	r0, r1, r4
    1ff4:	00000f76 	andeq	r0, r0, r6, ror pc
    1ff8:	05af0004 	streq	r0, [pc, #4]!	; 2004 <startup-0x1fffdffc>
    1ffc:	01040000 	mrseq	r0, (UNDEF: 4)
    2000:	0000049a 	muleq	r0, sl, r4
    2004:	0016810c 	andseq	r8, r6, ip, lsl #2
    2008:	00029400 	andeq	r9, r2, r0, lsl #8
    200c:	0023a800 	eoreq	sl, r3, r0, lsl #16
    2010:	0004d620 	andeq	sp, r4, r0, lsr #12
    2014:	0008dc00 	andeq	sp, r8, r0, lsl #24
    2018:	185e0200 	ldmdane	lr, {r9}^
    201c:	07040000 	streq	r0, [r4, -r0]
    2020:	00000030 	andeq	r0, r0, r0, lsr r0
    2024:	15080103 	strne	r0, [r8, #-259]	; 0xfffffefd
    2028:	04000008 	streq	r0, [r0], #-8
    202c:	7010040b 	andsvc	r0, r0, fp, lsl #8
    2030:	05000000 	streq	r0, [r0, #-0]
    2034:	00001864 	andeq	r1, r0, r4, ror #16
    2038:	00251104 	eoreq	r1, r5, r4, lsl #2
    203c:	05000000 	streq	r0, [r0, #-0]
    2040:	0000175e 	andeq	r1, r0, lr, asr r7
    2044:	00251204 	eoreq	r1, r5, r4, lsl #4
    2048:	05010000 	streq	r0, [r1, #-0]
    204c:	00001651 	andeq	r1, r0, r1, asr r6
    2050:	00251304 	eoreq	r1, r5, r4, lsl #6
    2054:	05020000 	streq	r0, [r2, #-0]
    2058:	00001582 	andeq	r1, r0, r2, lsl #11
    205c:	00701404 	rsbseq	r1, r0, r4, lsl #8
    2060:	00030000 	andeq	r0, r3, r0
    2064:	00002506 	andeq	r2, r0, r6, lsl #10
    2068:	00008000 	andeq	r8, r0, r0
    206c:	00800700 	addeq	r0, r0, r0, lsl #14
    2070:	00070000 	andeq	r0, r7, r0
    2074:	e5070403 	str	r0, [r7, #-1027]	; 0xfffffbfd
    2078:	02000000 	andeq	r0, r0, #0
    207c:	000013ee 	andeq	r1, r0, lr, ror #7
    2080:	00371504 	eorseq	r1, r7, r4, lsl #10
    2084:	f3020000 	vhadd.u8	d0, d2, d0
    2088:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    208c:	00009d17 	andeq	r9, r0, r7, lsl sp
    2090:	a3040800 	movwge	r0, #18432	; 0x4800
    2094:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2098:	00179c0a 	andseq	r9, r7, sl, lsl #24
    209c:	d2010500 	andle	r0, r1, #0, 10
    20a0:	05000002 	streq	r0, [r0, #-2]
    20a4:	0002d2ad 	andeq	sp, r2, sp, lsr #5
    20a8:	145e0b00 	ldrbne	r0, [lr], #-2816	; 0xfffff500
    20ac:	0b720000 	bleq	1c820b4 <startup-0x1e37df4c>
    20b0:	0000148d 	andeq	r1, r0, sp, lsl #9
    20b4:	14ff0b74 	ldrbtne	r0, [pc], #2932	; 20bc <startup-0x1fffdf44>
    20b8:	0b750000 	bleq	1d420c0 <startup-0x1e2bdf40>
    20bc:	00001318 	andeq	r1, r0, r8, lsl r3
    20c0:	15590b76 	ldrbne	r0, [r9, #-2934]	; 0xfffff48a
    20c4:	0b7b0000 	bleq	1ec20cc <startup-0x1e13df34>
    20c8:	00001719 	andeq	r1, r0, r9, lsl r7
    20cc:	18280b7c 	stmdane	r8!, {r2, r3, r4, r5, r6, r8, r9, fp}
    20d0:	0b7e0000 	bleq	1f820d8 <startup-0x1e07df28>
    20d4:	000012ac 	andeq	r1, r0, ip, lsr #5
    20d8:	14720c7f 	ldrbtne	r0, [r2], #-3199	; 0xfffff381
    20dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    20e0:	000016cd 	andeq	r1, r0, sp, asr #13
    20e4:	14a30c01 	strtne	r0, [r3], #3073	; 0xc01
    20e8:	0c020000 	stceq	0, cr0, [r2], {-0}
    20ec:	0000117f 	andeq	r1, r0, pc, ror r1
    20f0:	11f60c03 	mvnsne	r0, r3, lsl #24
    20f4:	0c040000 	stceq	0, cr0, [r4], {-0}
    20f8:	0000174c 	andeq	r1, r0, ip, asr #14
    20fc:	16e50c05 	strbtne	r0, [r5], r5, lsl #24
    2100:	0c060000 	stceq	0, cr0, [r6], {-0}
    2104:	000013f5 	strdeq	r1, [r0], -r5
    2108:	118d0c07 	orrne	r0, sp, r7, lsl #24
    210c:	0c080000 	stceq	0, cr0, [r8], {-0}
    2110:	0000181d 	andeq	r1, r0, sp, lsl r8
    2114:	17f00c09 	ldrbne	r0, [r0, r9, lsl #24]!
    2118:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    211c:	00001600 	andeq	r1, r0, r0, lsl #12
    2120:	15b80c0b 	ldrne	r0, [r8, #3083]!	; 0xc0b
    2124:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    2128:	000012ca 	andeq	r1, r0, sl, asr #5
    212c:	176a0c0d 	strbne	r0, [sl, -sp, lsl #24]!
    2130:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    2134:	000016f5 	strdeq	r1, [r0], -r5
    2138:	140d0c0f 	strne	r0, [sp], #-3087	; 0xfffff3f1
    213c:	0c100000 	ldceq	0, cr0, [r0], {-0}
    2140:	000011a7 	andeq	r1, r0, r7, lsr #3
    2144:	16bf0c11 	ssatne	r0, #32, r1, lsl #24
    2148:	0c120000 	ldceq	0, cr0, [r2], {-0}
    214c:	00001400 	andeq	r1, r0, r0, lsl #8
    2150:	13360c13 	teqne	r6, #4864	; 0x1300
    2154:	0c140000 	ldceq	0, cr0, [r4], {-0}
    2158:	000017c6 	andeq	r1, r0, r6, asr #15
    215c:	14bc0c15 	ldrtne	r0, [ip], #3093	; 0xc15
    2160:	0c160000 	ldceq	0, cr0, [r6], {-0}
    2164:	000017e3 	andeq	r1, r0, r3, ror #15
    2168:	15180c17 	ldrne	r0, [r8, #-3095]	; 0xfffff3e9
    216c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    2170:	0000178e 	andeq	r1, r0, lr, lsl #15
    2174:	12940c19 	addsne	r0, r4, #6400	; 0x1900
    2178:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    217c:	000013e1 	andeq	r1, r0, r1, ror #7
    2180:	12160c1b 	andsne	r0, r6, #6912	; 0x1b00
    2184:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    2188:	00001658 	andeq	r1, r0, r8, asr r6
    218c:	138f0c1d 	orrne	r0, pc, #7424	; 0x1d00
    2190:	0c1e0000 	ldceq	0, cr0, [lr], {-0}
    2194:	000013a4 	andeq	r1, r0, r4, lsr #7
    2198:	12f30c1f 	rscsne	r0, r3, #7936	; 0x1f00
    219c:	0c200000 	stceq	0, cr0, [r0], #-0
    21a0:	000015a6 	andeq	r1, r0, r6, lsr #11
    21a4:	14f20c21 	ldrbtne	r0, [r2], #3105	; 0xc21
    21a8:	0c220000 	stceq	0, cr0, [r2], #-0
    21ac:	0000154f 	andeq	r1, r0, pc, asr #10
    21b0:	124c0c23 	subne	r0, ip, #8960	; 0x2300
    21b4:	0c240000 	stceq	0, cr0, [r4], #-0
    21b8:	00001662 	andeq	r1, r0, r2, ror #12
    21bc:	177c0c25 	ldrbne	r0, [ip, -r5, lsr #24]!
    21c0:	0c260000 	stceq	0, cr0, [r6], #-0
    21c4:	000012b9 			; <UNDEFINED> instruction: 0x000012b9
    21c8:	16420c27 	strbne	r0, [r2], -r7, lsr #24
    21cc:	0c280000 	stceq	0, cr0, [r8], #-0
    21d0:	00001612 	andeq	r1, r0, r2, lsl r6
    21d4:	15870c29 	strne	r0, [r7, #3113]	; 0xc29
    21d8:	0c2a0000 	stceq	0, cr0, [sl], #-0
    21dc:	00001256 	andeq	r1, r0, r6, asr r2
    21e0:	11b90c2b 			; <UNDEFINED> instruction: 0x11b90c2b
    21e4:	0c2c0000 	stceq	0, cr0, [ip], #-0
    21e8:	0000141f 	andeq	r1, r0, pc, lsl r4
    21ec:	17fb0c2d 	ldrbne	r0, [fp, sp, lsr #24]!
    21f0:	0c2e0000 	stceq	0, cr0, [lr], #-0
    21f4:	00001847 	andeq	r1, r0, r7, asr #16
    21f8:	16db0c2f 	ldrbne	r0, [fp], pc, lsr #24
    21fc:	0c300000 	ldceq	0, cr0, [r0], #-0
    2200:	00001808 	andeq	r1, r0, r8, lsl #16
    2204:	130e0c31 	movwne	r0, #60465	; 0xec31
    2208:	0c320000 	ldceq	0, cr0, [r2], #-0
    220c:	000011ec 	andeq	r1, r0, ip, ror #3
    2210:	15770c33 	ldrbne	r0, [r7, #-3123]!	; 0xfffff3cd
    2214:	0c340000 	ldceq	0, cr0, [r4], #-0
    2218:	0000150d 	andeq	r1, r0, sp, lsl #10
    221c:	15980c35 	ldrne	r0, [r8, #3125]	; 0xc35
    2220:	0c360000 	ldceq	0, cr0, [r6], #-0
    2224:	0000152b 	andeq	r1, r0, fp, lsr #10
    2228:	14d40c37 	ldrbne	r0, [r4], #3127	; 0xc37
    222c:	0c380000 	ldceq	0, cr0, [r8], #-0
    2230:	000011d5 	ldrdeq	r1, [r0], -r5
    2234:	186a0c39 	stmdane	sl!, {r0, r3, r4, r5, sl, fp}^
    2238:	0c3a0000 	ldceq	0, cr0, [sl], #-0
    223c:	000015d4 	ldrdeq	r1, [r0], -r4
    2240:	12dc0c3b 	sbcsne	r0, ip, #15104	; 0x3b00
    2244:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    2248:	00001738 	andeq	r1, r0, r8, lsr r7
    224c:	15350c3d 	ldrne	r0, [r5, #-3133]!	; 0xfffff3c3
    2250:	0c3e0000 	ldceq	0, cr0, [lr], #-0
    2254:	000015e6 	andeq	r1, r0, r6, ror #11
    2258:	12320c3f 	eorsne	r0, r2, #16128	; 0x3f00
    225c:	0c400000 	mareq	acc0, r0, r0
    2260:	000016b1 			; <UNDEFINED> instruction: 0x000016b1
    2264:	13000c41 	movwne	r0, #3137	; 0xc41
    2268:	0c420000 	mareq	acc0, r0, r2
    226c:	00001449 	andeq	r1, r0, r9, asr #8
    2270:	12820c43 	addne	r0, r2, #17152	; 0x4300
    2274:	0c440000 	mareq	acc0, r0, r4
    2278:	00001707 	andeq	r1, r0, r7, lsl #14
    227c:	14370c45 	ldrtne	r0, [r7], #-3141	; 0xfffff3bb
    2280:	0c460000 	mareq	acc0, r0, r6
    2284:	00001240 	andeq	r1, r0, r0, asr #4
    2288:	172b0c47 	strne	r0, [fp, -r7, asr #24]!
    228c:	0c480000 	mareq	acc0, r0, r8
    2290:	0000162b 	andeq	r1, r0, fp, lsr #12
    2294:	17a10c49 	strne	r0, [r1, r9, asr #24]!
    2298:	0c4a0000 	mareq	acc0, r0, sl
    229c:	00001834 	andeq	r1, r0, r4, lsr r8
    22a0:	147c0c4b 	ldrbtne	r0, [ip], #-3147	; 0xfffff3b5
    22a4:	0c4c0000 	mareq	acc0, r0, ip
    22a8:	00001543 	andeq	r1, r0, r3, asr #10
    22ac:	120c0c4d 	andne	r0, ip, #19712	; 0x4d00
    22b0:	0c4e0000 	mareq	acc0, r0, lr
    22b4:	00001638 	andeq	r1, r0, r8, lsr r6
    22b8:	13b10c4f 			; <UNDEFINED> instruction: 0x13b10c4f
    22bc:	0c500000 	mraeq	r0, r0, acc0
    22c0:	0000156e 	andeq	r1, r0, lr, ror #10
    22c4:	01030051 	qaddeq	r0, r1, r3
    22c8:	00081706 	andeq	r1, r8, r6, lsl #14
    22cc:	14ca0d00 	strbne	r0, [sl], #3328	; 0xd00
    22d0:	cb050000 	blgt	1422d8 <startup-0x1febdd28>
    22d4:	0000a401 	andeq	sl, r0, r1, lsl #8
    22d8:	006c0200 	rsbeq	r0, ip, r0, lsl #4
    22dc:	2b060000 	blcs	1822e4 <startup-0x1fe7dd1c>
    22e0:	00000030 	andeq	r0, r0, r0, lsr r0
    22e4:	77050203 	strvc	r0, [r5, -r3, lsl #4]
    22e8:	02000006 	andeq	r0, r0, #6
    22ec:	000007a7 	andeq	r0, r0, r7, lsr #15
    22f0:	03023906 	movweq	r3, #10502	; 0x2906
    22f4:	02030000 	andeq	r0, r3, #0
    22f8:	0003e107 	andeq	lr, r3, r7, lsl #2
    22fc:	03020e00 	movweq	r0, #11776	; 0x2e00
    2300:	ce020000 	cdpgt	0, 0, cr0, cr2, cr0, {0}
    2304:	06000007 	streq	r0, [r0], -r7
    2308:	0003194d 	andeq	r1, r3, sp, asr #18
    230c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    2310:	00000205 	andeq	r0, r0, r5, lsl #4
    2314:	0002c702 	andeq	ip, r2, r2, lsl #14
    2318:	2b4f0600 	blcs	13c3b20 <startup-0x1ec3c4e0>
    231c:	03000003 	movweq	r0, #3
    2320:	00e00704 	rsceq	r0, r0, r4, lsl #14
    2324:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2328:	00020005 	andeq	r0, r2, r5
    232c:	07080300 	streq	r0, [r8, -r0, lsl #6]
    2330:	000000db 	ldrdeq	r0, [r0], -fp
    2334:	6905040f 	stmdbvs	r5, {r0, r1, r2, r3, sl}
    2338:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    233c:	0000006e 	andeq	r0, r0, lr, rrx
    2340:	02e51807 	rsceq	r1, r5, #458752	; 0x70000
    2344:	470e0000 	strmi	r0, [lr, -r0]
    2348:	02000003 	andeq	r0, r0, #3
    234c:	000007a9 	andeq	r0, r0, r9, lsr #15
    2350:	02f72407 	rscseq	r2, r7, #117440512	; 0x7000000
    2354:	570e0000 	strpl	r0, [lr, -r0]
    2358:	02000003 	andeq	r0, r0, #3
    235c:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2360:	030e2c07 	movweq	r2, #60423	; 0xec07
    2364:	670e0000 	strvs	r0, [lr, -r0]
    2368:	02000003 	andeq	r0, r0, #3
    236c:	000002c9 	andeq	r0, r0, r9, asr #5
    2370:	03203007 			; <UNDEFINED> instruction: 0x03203007
    2374:	770e0000 	strvc	r0, [lr, -r0]
    2378:	10000003 	andne	r0, r0, r3
    237c:	00000382 	andeq	r0, r0, r2, lsl #7
    2380:	010e0411 	tsteq	lr, r1, lsl r4
    2384:	04480151 	strbeq	r0, [r8], #-337	; 0xfffffeaf
    2388:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
    238c:	01000018 	tsteq	r0, r8, lsl r0
    2390:	04580153 	ldrbeq	r0, [r8], #-339	; 0xfffffead
    2394:	12000000 	andne	r0, r0, #0
    2398:	000005d5 	ldrdeq	r0, [r0], -r5
    239c:	5d015401 	cfstrspl	mvf5, [r1, #-4]
    23a0:	20000004 	andcs	r0, r0, r4
    23a4:	0016c812 	andseq	ip, r6, r2, lsl r8
    23a8:	01550100 	cmpeq	r5, r0, lsl #2
    23ac:	00000458 	andeq	r0, r0, r8, asr r4
    23b0:	11761280 	cmnne	r6, r0, lsl #5
    23b4:	56010000 	strpl	r0, [r1], -r0
    23b8:	00045d01 	andeq	r5, r4, r1, lsl #26
    23bc:	1813a000 	ldmdane	r3, {sp, pc}
    23c0:	01000018 	tsteq	r0, r8, lsl r0
    23c4:	04580157 	ldrbeq	r0, [r8], #-343	; 0xfffffea9
    23c8:	01000000 	mrseq	r0, (UNDEF: 0)
    23cc:	0005e913 	andeq	lr, r5, r3, lsl r9
    23d0:	01580100 	cmpeq	r8, r0, lsl #2
    23d4:	0000045d 	andeq	r0, r0, sp, asr r4
    23d8:	28130120 	ldmdacs	r3, {r5, r8}
    23dc:	01000012 	tsteq	r0, r2, lsl r0
    23e0:	04580159 	ldrbeq	r0, [r8], #-345	; 0xfffffea7
    23e4:	01800000 	orreq	r0, r0, r0
    23e8:	0005f313 	andeq	pc, r5, r3, lsl r3	; <UNPREDICTABLE>
    23ec:	015a0100 	cmpeq	sl, r0, lsl #2
    23f0:	0000045d 	andeq	r0, r0, sp, asr r4
    23f4:	ee1301a0 	mufdp	f0, f3, f0
    23f8:	01000012 	tsteq	r0, r2, lsl r0
    23fc:	0458015b 	ldrbeq	r0, [r8], #-347	; 0xfffffea5
    2400:	02000000 	andeq	r0, r0, #0
    2404:	0005fd13 	andeq	pc, r5, r3, lsl sp	; <UNPREDICTABLE>
    2408:	015c0100 	cmpeq	ip, r0, lsl #2
    240c:	0000046d 	andeq	r0, r0, sp, ror #8
    2410:	49140220 	ldmdbmi	r4, {r5, r9}
    2414:	5d010050 	stcpl	0, cr0, [r1, #-320]	; 0xfffffec0
    2418:	00048d01 	andeq	r8, r4, r1, lsl #26
    241c:	13030000 	movwne	r0, #12288	; 0x3000
    2420:	00000607 	andeq	r0, r0, r7, lsl #12
    2424:	92015e01 	andls	r5, r1, #1, 28
    2428:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    242c:	139f1303 	orrsne	r1, pc, #201326592	; 0xc000000
    2430:	5f010000 	svcpl	0x00010000
    2434:	00038201 	andeq	r8, r3, r1, lsl #4
    2438:	000e0000 	andeq	r0, lr, r0
    243c:	00038206 	andeq	r8, r3, r6, lsl #4
    2440:	00045800 	andeq	r5, r4, r0, lsl #16
    2444:	00800700 	addeq	r0, r0, r0, lsl #14
    2448:	00070000 	andeq	r0, r7, r0
    244c:	0004480e 	andeq	r4, r4, lr, lsl #16
    2450:	03770600 	cmneq	r7, #0, 12
    2454:	046d0000 	strbteq	r0, [sp], #-0
    2458:	80070000 	andhi	r0, r7, r0
    245c:	17000000 	strne	r0, [r0, -r0]
    2460:	03770600 	cmneq	r7, #0, 12
    2464:	047d0000 	ldrbteq	r0, [sp], #-0
    2468:	80070000 	andhi	r0, r7, r0
    246c:	37000000 	strcc	r0, [r0, -r0]
    2470:	03520600 	cmpeq	r2, #0, 12
    2474:	048d0000 	streq	r0, [sp], #0
    2478:	80070000 	andhi	r0, r7, r0
    247c:	ef000000 	svc	0x00000000
    2480:	047d0e00 	ldrbteq	r0, [sp], #-3584	; 0xfffff200
    2484:	77060000 	strvc	r0, [r6, -r0]
    2488:	a3000003 	movwge	r0, #3
    248c:	15000004 	strne	r0, [r0, #-4]
    2490:	00000080 	andeq	r0, r0, r0, lsl #1
    2494:	0d000283 	sfmeq	f0, 4, [r0, #-524]	; 0xfffffdf4
    2498:	00001621 	andeq	r1, r0, r1, lsr #12
    249c:	8c016001 	stchi	0, cr6, [r1], {1}
    24a0:	16000003 	strne	r0, [r0], -r3
    24a4:	0171018c 	cmneq	r1, ip, lsl #3
    24a8:	000005ca 	andeq	r0, r0, sl, asr #11
    24ac:	00127612 	andseq	r7, r2, r2, lsl r6
    24b0:	01730100 	cmneq	r3, r0, lsl #2
    24b4:	00000387 	andeq	r0, r0, r7, lsl #7
    24b8:	12c51200 	sbcne	r1, r5, #0, 4
    24bc:	74010000 	strvc	r0, [r1], #-0
    24c0:	00038201 	andeq	r8, r3, r1, lsl #4
    24c4:	e7120400 	ldr	r0, [r2, -r0, lsl #8]
    24c8:	01000011 	tsteq	r0, r1, lsl r0
    24cc:	03820175 	orreq	r0, r2, #1073741853	; 0x4000001d
    24d0:	12080000 	andne	r0, r8, #0
    24d4:	0000126a 	andeq	r1, r0, sl, ror #4
    24d8:	82017601 	andhi	r7, r1, #1048576	; 0x100000
    24dc:	0c000003 	stceq	0, cr0, [r0], {3}
    24e0:	52435317 	subpl	r5, r3, #1543503872	; 0x5c000000
    24e4:	01770100 	cmneq	r7, r0, lsl #2
    24e8:	00000382 	andeq	r0, r0, r2, lsl #7
    24ec:	43431710 	movtmi	r1, #14096	; 0x3710
    24f0:	78010052 	stmdavc	r1, {r1, r4, r6}
    24f4:	00038201 	andeq	r8, r3, r1, lsl #4
    24f8:	53171400 	tstpl	r7, #0, 8
    24fc:	01005048 	tsteq	r0, r8, asr #32
    2500:	05da0179 	ldrbeq	r0, [sl, #377]	; 0x179
    2504:	12180000 	andsne	r0, r8, #0
    2508:	00001399 	muleq	r0, r9, r3
    250c:	82017a01 	andhi	r7, r1, #4096	; 0x1000
    2510:	24000003 	strcs	r0, [r0], #-3
    2514:	0016f012 	andseq	pc, r6, r2, lsl r0	; <UNPREDICTABLE>
    2518:	017b0100 	cmneq	fp, r0, lsl #2
    251c:	00000382 	andeq	r0, r0, r2, lsl #7
    2520:	13441228 	movtne	r1, #16936	; 0x4228
    2524:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2528:	00038201 	andeq	r8, r3, r1, lsl #4
    252c:	31122c00 	tstcc	r2, r0, lsl #24
    2530:	01000013 	tsteq	r0, r3, lsl r0
    2534:	0382017d 	orreq	r0, r2, #1073741855	; 0x4000001f
    2538:	12300000 	eorsne	r0, r0, #0
    253c:	00001746 	andeq	r1, r0, r6, asr #14
    2540:	82017e01 	andhi	r7, r1, #1, 28
    2544:	34000003 	strcc	r0, [r0], #-3
    2548:	0015b312 	andseq	fp, r5, r2, lsl r3
    254c:	017f0100 	cmneq	pc, r0, lsl #2
    2550:	00000382 	andeq	r0, r0, r2, lsl #7
    2554:	16d61238 			; <UNDEFINED> instruction: 0x16d61238
    2558:	80010000 	andhi	r0, r1, r0
    255c:	00038201 	andeq	r8, r3, r1, lsl #4
    2560:	50173c00 	andspl	r3, r7, r0, lsl #24
    2564:	01005246 	tsteq	r0, r6, asr #4
    2568:	05f40181 	ldrbeq	r0, [r4, #385]!	; 0x181
    256c:	17400000 	strbne	r0, [r0, -r0]
    2570:	00524644 	subseq	r4, r2, r4, asr #12
    2574:	87018201 	strhi	r8, [r1, -r1, lsl #4]
    2578:	48000003 	stmdami	r0, {r0, r1}
    257c:	52444117 	subpl	r4, r4, #-1073741819	; 0xc0000005
    2580:	01830100 	orreq	r0, r3, r0, lsl #2
    2584:	00000387 	andeq	r0, r0, r7, lsl #7
    2588:	1741124c 	strbne	r1, [r1, -ip, asr #4]
    258c:	84010000 	strhi	r0, [r1], #-0
    2590:	00060e01 	andeq	r0, r6, r1, lsl #28
    2594:	65125000 	ldrvs	r5, [r2, #-0]
    2598:	01000017 	tsteq	r0, r7, lsl r0
    259c:	06280185 	strteq	r0, [r8], -r5, lsl #3
    25a0:	12600000 	rsbne	r0, r0, #0
    25a4:	000005d5 	ldrdeq	r0, [r0], -r5
    25a8:	2d018601 	stccs	6, cr8, [r1, #-4]
    25ac:	74000006 	strvc	r0, [r0], #-6
    25b0:	00181212 	andseq	r1, r8, r2, lsl r2
    25b4:	01870100 	orreq	r0, r7, r0, lsl #2
    25b8:	00000382 	andeq	r0, r0, r2, lsl #7
    25bc:	52060088 	andpl	r0, r6, #136	; 0x88
    25c0:	da000003 	ble	25d4 <startup-0x1fffda2c>
    25c4:	07000005 	streq	r0, [r0, -r5]
    25c8:	00000080 	andeq	r0, r0, r0, lsl #1
    25cc:	ca0e000b 	bgt	382600 <startup-0x1fc7da00>
    25d0:	06000005 	streq	r0, [r0], -r5
    25d4:	00000387 	andeq	r0, r0, r7, lsl #7
    25d8:	000005ef 	andeq	r0, r0, pc, ror #11
    25dc:	00008007 	andeq	r8, r0, r7
    25e0:	10000100 	andne	r0, r0, r0, lsl #2
    25e4:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    25e8:	0005ef0e 	andeq	lr, r5, lr, lsl #30
    25ec:	03870600 	orreq	r0, r7, #0, 12
    25f0:	06090000 	streq	r0, [r9], -r0
    25f4:	80070000 	andhi	r0, r7, r0
    25f8:	03000000 	movweq	r0, #0
    25fc:	05f91000 	ldrbeq	r1, [r9, #0]!
    2600:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
    2604:	06000006 	streq	r0, [r0], -r6
    2608:	00000387 	andeq	r0, r0, r7, lsl #7
    260c:	00000623 	andeq	r0, r0, r3, lsr #12
    2610:	00008007 	andeq	r8, r0, r7
    2614:	10000400 	andne	r0, r0, r0, lsl #8
    2618:	00000613 	andeq	r0, r0, r3, lsl r6
    261c:	0006230e 	andeq	r2, r6, lr, lsl #6
    2620:	03770600 	cmneq	r7, #0, 12
    2624:	063d0000 	ldrteq	r0, [sp], -r0
    2628:	80070000 	andhi	r0, r7, r0
    262c:	04000000 	streq	r0, [r0], #-0
    2630:	13280d00 			; <UNDEFINED> instruction: 0x13280d00
    2634:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2638:	0004af01 	andeq	sl, r4, r1, lsl #30
    263c:	03770600 	cmneq	r7, #0, 12
    2640:	06590000 	ldrbeq	r0, [r9], -r0
    2644:	80070000 	andhi	r0, r7, r0
    2648:	07000000 	streq	r0, [r0, -r0]
    264c:	065a1800 	ldrbeq	r1, [sl], -r0, lsl #16
    2650:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2654:	00037206 	andeq	r7, r3, r6, lsl #4
    2658:	03431900 	movteq	r1, #14592	; 0x3900
    265c:	3b080000 	blcc	202664 <startup-0x1fdfd99c>
    2660:	00000377 	andeq	r0, r0, r7, ror r3
    2664:	3001071a 	andcc	r0, r1, sl, lsl r7
    2668:	05000000 	streq	r0, [r0, #-0]
    266c:	068b01f9 			; <UNDEFINED> instruction: 0x068b01f9
    2670:	d30c0000 	movwle	r0, #49152	; 0xc000
    2674:	00000009 	andeq	r0, r0, r9
    2678:	5445531b 	strbpl	r5, [r5], #-795	; 0xfffffce5
    267c:	1a000100 	bne	2a84 <startup-0x1fffd57c>
    2680:	00300107 	eorseq	r0, r0, r7, lsl #2
    2684:	fb050000 	blx	14268e <startup-0x1febd972>
    2688:	0006a601 	andeq	sl, r6, r1, lsl #12
    268c:	033b0c00 	teqeq	fp, #0, 24
    2690:	0c000000 	stceq	0, cr0, [r0], {-0}
    2694:	0000018c 	andeq	r0, r0, ip, lsl #3
    2698:	770d0001 	strvc	r0, [sp, -r1]
    269c:	05000005 	streq	r0, [r0, #-5]
    26a0:	068b01fb 			; <UNDEFINED> instruction: 0x068b01fb
    26a4:	10160000 	andsne	r0, r6, r0
    26a8:	f0023105 			; <UNDEFINED> instruction: 0xf0023105
    26ac:	17000006 	strne	r0, [r0, -r6]
    26b0:	00524954 	subseq	r4, r2, r4, asr r9
    26b4:	82023305 	andhi	r3, r2, #335544320	; 0x14000000
    26b8:	00000003 	andeq	r0, r0, r3
    26bc:	000eca12 	andeq	ip, lr, r2, lsl sl
    26c0:	02340500 	eorseq	r0, r4, #0, 10
    26c4:	00000382 	andeq	r0, r0, r2, lsl #7
    26c8:	0db71204 	lfmeq	f1, 4, [r7, #16]!
    26cc:	35050000 	strcc	r0, [r5, #-0]
    26d0:	00038202 	andeq	r8, r3, r2, lsl #4
    26d4:	3f120800 	svccc	0x00120800
    26d8:	0500000f 	streq	r0, [r0, #-15]
    26dc:	03820236 	orreq	r0, r2, #1610612739	; 0x60000003
    26e0:	000c0000 	andeq	r0, ip, r0
    26e4:	000fe90d 	andeq	lr, pc, sp, lsl #18
    26e8:	02370500 	eorseq	r0, r7, #0, 10
    26ec:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
    26f0:	3d051016 	stccc	0, cr1, [r5, #-88]	; 0xffffffa8
    26f4:	00073a02 	andeq	r3, r7, r2, lsl #20
    26f8:	49521700 	ldmdbmi	r2, {r8, r9, sl, ip}^
    26fc:	3f050052 	svccc	0x00050052
    2700:	00038202 	andeq	r8, r3, r2, lsl #4
    2704:	78120000 	ldmdavc	r2, {}	; <UNPREDICTABLE>
    2708:	0500000e 	streq	r0, [r0, #-14]
    270c:	03820240 	orreq	r0, r2, #64, 4
    2710:	12040000 	andne	r0, r4, #0
    2714:	00000e0e 	andeq	r0, r0, lr, lsl #28
    2718:	82024105 	andhi	r4, r2, #1073741825	; 0x40000001
    271c:	08000003 	stmdaeq	r0, {r0, r1}
    2720:	00103e12 	andseq	r3, r0, r2, lsl lr
    2724:	02420500 	subeq	r0, r2, #0, 10
    2728:	00000382 	andeq	r0, r0, r2, lsl #7
    272c:	df0d000c 	svcle	0x000d000c
    2730:	0500000e 	streq	r0, [r0, #-14]
    2734:	06fc0243 	ldrbteq	r0, [ip], r3, asr #4
    2738:	08160000 	ldmdaeq	r6, {}	; <UNPREDICTABLE>
    273c:	6a024905 	bvs	94b58 <startup-0x1ff6b4a8>
    2740:	17000007 	strne	r0, [r0, -r7]
    2744:	00315246 	eorseq	r5, r1, r6, asr #4
    2748:	82024b05 	andhi	r4, r2, #5120	; 0x1400
    274c:	00000003 	andeq	r0, r0, r3
    2750:	32524617 	subscc	r4, r2, #24117248	; 0x1700000
    2754:	024c0500 	subeq	r0, ip, #0, 10
    2758:	00000382 	andeq	r0, r0, r2, lsl #7
    275c:	870d0004 	strhi	r0, [sp, -r4]
    2760:	0500000e 	streq	r0, [r0, #-14]
    2764:	0746024d 	strbeq	r0, [r6, -sp, asr #4]
    2768:	20110000 	andscs	r0, r1, r0
    276c:	02530503 	subseq	r0, r3, #12582912	; 0xc00000
    2770:	000008ac 	andeq	r0, r0, ip, lsr #17
    2774:	52434d17 	subpl	r4, r3, #1472	; 0x5c0
    2778:	02550500 	subseq	r0, r5, #0, 10
    277c:	00000382 	andeq	r0, r0, r2, lsl #7
    2780:	534d1700 	movtpl	r1, #55040	; 0xd700
    2784:	56050052 			; <UNDEFINED> instruction: 0x56050052
    2788:	00038202 	andeq	r8, r3, r2, lsl #4
    278c:	54170400 	ldrpl	r0, [r7], #-1024	; 0xfffffc00
    2790:	05005253 	streq	r5, [r0, #-595]	; 0xfffffdad
    2794:	03820257 	orreq	r0, r2, #1879048197	; 0x70000005
    2798:	12080000 	andne	r0, r8, #0
    279c:	00000de7 	andeq	r0, r0, r7, ror #27
    27a0:	82025805 	andhi	r5, r2, #327680	; 0x50000
    27a4:	0c000003 	stceq	0, cr0, [r0], {3}
    27a8:	000e8212 	andeq	r8, lr, r2, lsl r2
    27ac:	02590500 	subseq	r0, r9, #0, 10
    27b0:	00000382 	andeq	r0, r0, r2, lsl #7
    27b4:	45491710 	strbmi	r1, [r9, #-1808]	; 0xfffff8f0
    27b8:	5a050052 	bpl	142908 <startup-0x1febd6f8>
    27bc:	00038202 	andeq	r8, r3, r2, lsl #4
    27c0:	45171400 	ldrmi	r1, [r7, #-1024]	; 0xfffffc00
    27c4:	05005253 	streq	r5, [r0, #-595]	; 0xfffffdad
    27c8:	0382025b 	orreq	r0, r2, #-1342177275	; 0xb0000005
    27cc:	17180000 	ldrne	r0, [r8, -r0]
    27d0:	00525442 	subseq	r5, r2, r2, asr #8
    27d4:	82025c05 	andhi	r5, r2, #1280	; 0x500
    27d8:	1c000003 	stcne	0, cr0, [r0], {3}
    27dc:	0005d512 	andeq	sp, r5, r2, lsl r5
    27e0:	025d0500 	subseq	r0, sp, #0, 10
    27e4:	000008ac 	andeq	r0, r0, ip, lsr #17
    27e8:	0e4c1320 	cdpeq	3, 4, cr1, cr12, cr0, {1}
    27ec:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
    27f0:	0008bc02 	andeq	fp, r8, r2, lsl #24
    27f4:	13018000 	movwne	r8, #4096	; 0x1000
    27f8:	00001054 	andeq	r1, r0, r4, asr r0
    27fc:	cc025f05 	stcgt	15, cr5, [r2], {5}
    2800:	b0000008 	andlt	r0, r0, r8
    2804:	05df1301 	ldrbeq	r1, [pc, #769]	; 2b0d <startup-0x1fffd4f3>
    2808:	60050000 	andvs	r0, r5, r0
    280c:	0008dc02 	andeq	sp, r8, r2, lsl #24
    2810:	1401d000 	strne	sp, [r1], #-0
    2814:	00524d46 	subseq	r4, r2, r6, asr #26
    2818:	82026105 	andhi	r6, r2, #1073741825	; 0x40000001
    281c:	00000003 	andeq	r0, r0, r3
    2820:	0ec51302 	cdpeq	3, 12, cr1, cr5, cr2, {0}
    2824:	62050000 	andvs	r0, r5, #0
    2828:	00038202 	andeq	r8, r3, r2, lsl #4
    282c:	13020400 	movwne	r0, #9216	; 0x2400
    2830:	000005e9 	andeq	r0, r0, r9, ror #11
    2834:	77026305 	strvc	r6, [r2, -r5, lsl #6]
    2838:	08000003 	stmdaeq	r0, {r0, r1}
    283c:	0e7d1302 	cdpeq	3, 7, cr1, cr13, cr2, {0}
    2840:	64050000 	strvs	r0, [r5], #-0
    2844:	00038202 	andeq	r8, r3, r2, lsl #4
    2848:	13020c00 	movwne	r0, #11264	; 0x2c00
    284c:	000005f3 	strdeq	r0, [r0], -r3
    2850:	77026505 	strvc	r6, [r2, -r5, lsl #10]
    2854:	10000003 	andne	r0, r0, r3
    2858:	0f4a1302 	svceq	0x004a1302
    285c:	66050000 	strvs	r0, [r5], -r0
    2860:	00038202 	andeq	r8, r3, r2, lsl #4
    2864:	13021400 	movwne	r1, #9216	; 0x2400
    2868:	000005fd 	strdeq	r0, [r0], -sp
    286c:	77026705 	strvc	r6, [r2, -r5, lsl #14]
    2870:	18000003 	stmdane	r0, {r0, r1}
    2874:	0f4b1302 	svceq	0x004b1302
    2878:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
    287c:	00038202 	andeq	r8, r3, r2, lsl #4
    2880:	13021c00 	movwne	r1, #11264	; 0x2c00
    2884:	00000607 	andeq	r0, r0, r7, lsl #12
    2888:	49026905 	stmdbmi	r2, {r0, r2, r8, fp, sp, lr}
    288c:	20000006 	andcs	r0, r0, r6
    2890:	0ea81302 	cdpeq	3, 10, cr1, cr8, cr2, {0}
    2894:	6a050000 	bvs	14289c <startup-0x1febd764>
    2898:	0008ec02 	andeq	lr, r8, r2, lsl #24
    289c:	00024000 	andeq	r4, r2, r0
    28a0:	00037706 	andeq	r7, r3, r6, lsl #14
    28a4:	0008bc00 	andeq	fp, r8, r0, lsl #24
    28a8:	00800700 	addeq	r0, r0, r0, lsl #14
    28ac:	00570000 	subseq	r0, r7, r0
    28b0:	0006f006 	andeq	pc, r6, r6
    28b4:	0008cc00 	andeq	ip, r8, r0, lsl #24
    28b8:	00800700 	addeq	r0, r0, r0, lsl #14
    28bc:	00020000 	andeq	r0, r2, r0
    28c0:	00073a06 	andeq	r3, r7, r6, lsl #20
    28c4:	0008dc00 	andeq	sp, r8, r0, lsl #24
    28c8:	00800700 	addeq	r0, r0, r0, lsl #14
    28cc:	00010000 	andeq	r0, r1, r0
    28d0:	00037706 	andeq	r7, r3, r6, lsl #14
    28d4:	0008ec00 	andeq	lr, r8, r0, lsl #24
    28d8:	00800700 	addeq	r0, r0, r0, lsl #14
    28dc:	000b0000 	andeq	r0, fp, r0
    28e0:	00076a06 	andeq	r6, r7, r6, lsl #20
    28e4:	0008fc00 	andeq	pc, r8, r0, lsl #24
    28e8:	00800700 	addeq	r0, r0, r0, lsl #14
    28ec:	001b0000 	andseq	r0, fp, r0
    28f0:	000cd00d 	andeq	sp, ip, sp
    28f4:	026b0500 	rsbeq	r0, fp, #0, 10
    28f8:	00000776 	andeq	r0, r0, r6, ror r7
    28fc:	d6052816 			; <UNDEFINED> instruction: 0xd6052816
    2900:	00099403 	andeq	r9, r9, r3, lsl #8
    2904:	0adb1200 	beq	ff6c710c <APBAHBPrescTable+0xdf6c4654>
    2908:	d8050000 	stmdale	r5, {}	; <UNPREDICTABLE>
    290c:	00038203 	andeq	r8, r3, r3, lsl #4
    2910:	66120000 	ldrvs	r0, [r2], -r0
    2914:	0500000a 	streq	r0, [r0, #-10]
    2918:	038203d9 	orreq	r0, r2, #1677721603	; 0x64000003
    291c:	12040000 	andne	r0, r4, #0
    2920:	00000b8c 	andeq	r0, r0, ip, lsl #23
    2924:	8203da05 	andhi	sp, r3, #20480	; 0x5000
    2928:	08000003 	stmdaeq	r0, {r0, r1}
    292c:	000a7b12 	andeq	r7, sl, r2, lsl fp
    2930:	03db0500 	bicseq	r0, fp, #0, 10
    2934:	00000382 	andeq	r0, r0, r2, lsl #7
    2938:	4449170c 	strbmi	r1, [r9], #-1804	; 0xfffff8f4
    293c:	dc050052 	stcle	0, cr0, [r5], {82}	; 0x52
    2940:	00038203 	andeq	r8, r3, r3, lsl #4
    2944:	4f171000 	svcmi	0x00171000
    2948:	05005244 	streq	r5, [r0, #-580]	; 0xfffffdbc
    294c:	038203dd 	orreq	r0, r2, #1946157059	; 0x74000003
    2950:	12140000 	andsne	r0, r4, #0
    2954:	00000c34 	andeq	r0, r0, r4, lsr ip
    2958:	6203de05 	andvs	sp, r3, #5, 28	; 0x50
    295c:	18000003 	stmdane	r0, {r0, r1}
    2960:	000ad512 	andeq	sp, sl, r2, lsl r5
    2964:	03df0500 	bicseq	r0, pc, #0, 10
    2968:	00000362 	andeq	r0, r0, r2, ror #6
    296c:	0a3d121a 	beq	f471dc <startup-0x1f0b8e24>
    2970:	e0050000 	and	r0, r5, r0
    2974:	00038203 	andeq	r8, r3, r3, lsl #4
    2978:	41171c00 	tstmi	r7, r0, lsl #24
    297c:	05005246 	streq	r5, [r0, #-582]	; 0xfffffdba
    2980:	09a403e1 	stmibeq	r4!, {r0, r5, r6, r7, r8, r9}
    2984:	00200000 	eoreq	r0, r0, r0
    2988:	00038206 	andeq	r8, r3, r6, lsl #4
    298c:	0009a400 	andeq	sl, r9, r0, lsl #8
    2990:	00800700 	addeq	r0, r0, r0, lsl #14
    2994:	00010000 	andeq	r0, r1, r0
    2998:	0009940e 	andeq	r9, r9, lr, lsl #8
    299c:	09420d00 	stmdbeq	r2, {r8, sl, fp}^
    29a0:	e2050000 	and	r0, r5, #0
    29a4:	00090803 	andeq	r0, r9, r3, lsl #16
    29a8:	01071c00 	tsteq	r7, r0, lsl #24
    29ac:	00000030 	andeq	r0, r0, r0, lsr r0
    29b0:	09db4209 	ldmibeq	fp, {r0, r3, r9, lr}^
    29b4:	810c0000 	mrshi	r0, (UNDEF: 12)
    29b8:	0000000a 	andeq	r0, r0, sl
    29bc:	000a6d0c 	andeq	r6, sl, ip, lsl #26
    29c0:	f20c0100 	vrhadd.s8	d0, d12, d0
    29c4:	02000009 	andeq	r0, r0, #9
    29c8:	000a210c 	andeq	r2, sl, ip, lsl #2
    29cc:	02000300 	andeq	r0, r0, #0, 6
    29d0:	0000097b 	andeq	r0, r0, fp, ror r9
    29d4:	09b54709 	ldmibeq	r5!, {r0, r3, r8, r9, sl, lr}
    29d8:	071c0000 	ldreq	r0, [ip, -r0]
    29dc:	00003001 	andeq	r3, r0, r1
    29e0:	004f0900 	subeq	r0, pc, r0, lsl #18
    29e4:	0c00000a 	stceq	0, cr0, [r0], {10}
    29e8:	00000af7 	strdeq	r0, [r0], -r7
    29ec:	09c10c00 	stmibeq	r1, {sl, fp}^
    29f0:	00010000 	andeq	r0, r1, r0
    29f4:	000a5402 	andeq	r5, sl, r2, lsl #8
    29f8:	e6520900 	ldrb	r0, [r2], -r0, lsl #18
    29fc:	1c000009 	stcne	0, cr0, [r0], {9}
    2a00:	00300107 	eorseq	r0, r0, r7, lsl #2
    2a04:	5a090000 	bpl	242a0c <startup-0x1fdbd5f4>
    2a08:	00000a31 	andeq	r0, r0, r1, lsr sl
    2a0c:	000b0f0c 	andeq	r0, fp, ip, lsl #30
    2a10:	940c0000 	strls	r0, [ip], #-0
    2a14:	01000009 	tsteq	r0, r9
    2a18:	000be30c 	andeq	lr, fp, ip, lsl #6
    2a1c:	420c0200 	andmi	r0, ip, #0, 4
    2a20:	0300000a 	movweq	r0, #10
    2a24:	0b9a0200 	bleq	fe68322c <APBAHBPrescTable+0xde680774>
    2a28:	5f090000 	svcpl	0x00090000
    2a2c:	00000a0b 	andeq	r0, r0, fp, lsl #20
    2a30:	3001071c 	andcc	r0, r1, ip, lsl r7
    2a34:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2a38:	000a5c67 	andeq	r5, sl, r7, ror #24
    2a3c:	0bbb0c00 	bleq	feec5a44 <APBAHBPrescTable+0xdeec2f8c>
    2a40:	0c000000 	stceq	0, cr0, [r0], {-0}
    2a44:	00000c16 	andeq	r0, r0, r6, lsl ip
    2a48:	0bac0c01 	bleq	feb05a54 <APBAHBPrescTable+0xdeb02f9c>
    2a4c:	00020000 	andeq	r0, r2, r0
    2a50:	000c0502 	andeq	r0, ip, r2, lsl #10
    2a54:	3c6b0900 			; <UNDEFINED> instruction: 0x3c6b0900
    2a58:	0400000a 	streq	r0, [r0], #-10
    2a5c:	ac7d0908 			; <UNDEFINED> instruction: 0xac7d0908
    2a60:	0500000a 	streq	r0, [r0, #-10]
    2a64:	00000956 	andeq	r0, r0, r6, asr r9
    2a68:	03777f09 	cmneq	r7, #9, 30	; 0x24
    2a6c:	05000000 	streq	r0, [r0, #-0]
    2a70:	00000c51 	andeq	r0, r0, r1, asr ip
    2a74:	09db8209 	ldmibeq	fp, {r0, r3, r9, pc}^
    2a78:	05040000 	streq	r0, [r4, #-0]
    2a7c:	00000a0c 	andeq	r0, r0, ip, lsl #20
    2a80:	0a318509 	beq	c63eac <startup-0x1f39c154>
    2a84:	05050000 	streq	r0, [r5, #-0]
    2a88:	000009e7 	andeq	r0, r0, r7, ror #19
    2a8c:	0a008809 	beq	24ab8 <startup-0x1ffdb548>
    2a90:	05060000 	streq	r0, [r6, #-0]
    2a94:	00000b05 	andeq	r0, r0, r5, lsl #22
    2a98:	0a5c8b09 	beq	17256c4 <startup-0x1e8da93c>
    2a9c:	00070000 	andeq	r0, r7, r0
    2aa0:	000bf402 	andeq	pc, fp, r2, lsl #8
    2aa4:	678d0900 	strvs	r0, [sp, r0, lsl #18]
    2aa8:	0400000a 	streq	r0, [r0], #-10
    2aac:	44380a0c 	ldrtmi	r0, [r8], #-2572	; 0xfffff5f4
    2ab0:	0500000b 	streq	r0, [r0, #-11]
    2ab4:	00000f69 	andeq	r0, r0, r9, ror #30
    2ab8:	03573a0a 	cmpeq	r7, #40960	; 0xa000
    2abc:	05000000 	streq	r0, [r0, #-0]
    2ac0:	00000da8 	andeq	r0, r0, r8, lsr #27
    2ac4:	03473d0a 	movteq	r3, #32010	; 0x7d0a
    2ac8:	05020000 	streq	r0, [r2, #-0]
    2acc:	00001140 	andeq	r1, r0, r0, asr #2
    2ad0:	0347400a 	movteq	r4, #28682	; 0x700a
    2ad4:	05030000 	streq	r0, [r3, #-0]
    2ad8:	00000d56 	andeq	r0, r0, r6, asr sp
    2adc:	0347450a 	movteq	r4, #29962	; 0x750a
    2ae0:	05040000 	streq	r0, [r4, #-0]
    2ae4:	00000d5e 	andeq	r0, r0, lr, asr sp
    2ae8:	0347490a 	movteq	r4, #30986	; 0x790a
    2aec:	05050000 	streq	r0, [r5, #-0]
    2af0:	00001106 	andeq	r1, r0, r6, lsl #2
    2af4:	06a64c0a 	strteq	r4, [r6], sl, lsl #24
    2af8:	05060000 	streq	r0, [r6, #-0]
    2afc:	00000e13 	andeq	r0, r0, r3, lsl lr
    2b00:	06a64f0a 	strteq	r4, [r6], sl, lsl #30
    2b04:	05070000 	streq	r0, [r7, #-0]
    2b08:	0000104b 	andeq	r1, r0, fp, asr #32
    2b0c:	06a6520a 	strteq	r5, [r6], sl, lsl #4
    2b10:	05080000 	streq	r0, [r8, #-0]
    2b14:	00001164 	andeq	r1, r0, r4, ror #2
    2b18:	06a6550a 	strteq	r5, [r6], sl, lsl #10
    2b1c:	05090000 	streq	r0, [r9, #-0]
    2b20:	00001073 	andeq	r1, r0, r3, ror r0
    2b24:	06a6580a 	strteq	r5, [r6], sl, lsl #16
    2b28:	050a0000 	streq	r0, [sl, #-0]
    2b2c:	000010ec 	andeq	r1, r0, ip, ror #1
    2b30:	06a65b0a 	strteq	r5, [r6], sl, lsl #22
    2b34:	000b0000 	andeq	r0, fp, r0
    2b38:	000fc002 	andeq	ip, pc, r2
    2b3c:	b75d0a00 	ldrblt	r0, [sp, -r0, lsl #20]
    2b40:	0400000a 	streq	r0, [r0], #-10
    2b44:	c4620a0e 	strbtgt	r0, [r2], #-2574	; 0xfffff5f2
    2b48:	0500000b 	streq	r0, [r0, #-11]
    2b4c:	00000fa7 	andeq	r0, r0, r7, lsr #31
    2b50:	0357640a 	cmpeq	r7, #167772160	; 0xa000000
    2b54:	05000000 	streq	r0, [r0, #-0]
    2b58:	00000f50 	andeq	r0, r0, r0, asr pc
    2b5c:	0357680a 	cmpeq	r7, #655360	; 0xa0000
    2b60:	05020000 	streq	r0, [r2, #-0]
    2b64:	00000d2e 	andeq	r0, r0, lr, lsr #26
    2b68:	03576c0a 	cmpeq	r7, #2560	; 0xa00
    2b6c:	05040000 	streq	r0, [r4, #-0]
    2b70:	00000d75 	andeq	r0, r0, r5, ror sp
    2b74:	0357710a 	cmpeq	r7, #-2147483646	; 0x80000002
    2b78:	05060000 	streq	r0, [r6, #-0]
    2b7c:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2b80:	0357760a 	cmpeq	r7, #10485760	; 0xa00000
    2b84:	05080000 	streq	r0, [r8, #-0]
    2b88:	00000f1e 	andeq	r0, r0, lr, lsl pc
    2b8c:	0347790a 	movteq	r7, #30986	; 0x790a
    2b90:	050a0000 	streq	r0, [sl, #-0]
    2b94:	0000101d 	andeq	r1, r0, sp, lsl r0
    2b98:	03477b0a 	movteq	r7, #31498	; 0x7b0a
    2b9c:	050b0000 	streq	r0, [fp, #-0]
    2ba0:	0000100d 	andeq	r1, r0, sp
    2ba4:	03477e0a 	movteq	r7, #32266	; 0x7e0a
    2ba8:	050c0000 	streq	r0, [ip, #-0]
    2bac:	0000108e 	andeq	r1, r0, lr, lsl #1
    2bb0:	06a6810a 	strteq	r8, [r6], sl, lsl #2
    2bb4:	000d0000 	andeq	r0, sp, r0
    2bb8:	000f0802 	andeq	r0, pc, r2, lsl #16
    2bbc:	4f830a00 	svcmi	0x00830a00
    2bc0:	0400000b 	streq	r0, [r0], #-11
    2bc4:	20880a14 	addcs	r0, r8, r4, lsl sl
    2bc8:	0500000c 	streq	r0, [r0, #-12]
    2bcc:	00000f44 	andeq	r0, r0, r4, asr #30
    2bd0:	03778a0a 	cmneq	r7, #40960	; 0xa000
    2bd4:	05000000 	streq	r0, [r0, #-0]
    2bd8:	00000ea2 	andeq	r0, r0, r2, lsr #29
    2bdc:	03778d0a 	cmneq	r7, #640	; 0x280
    2be0:	1d040000 	stcne	0, cr0, [r4, #-0]
    2be4:	00454449 	subeq	r4, r5, r9, asr #8
    2be8:	0347900a 	movteq	r9, #28682	; 0x700a
    2bec:	1d080000 	stcne	0, cr0, [r8, #-0]
    2bf0:	00525452 	subseq	r5, r2, r2, asr r4
    2bf4:	0347940a 	movteq	r9, #29706	; 0x740a
    2bf8:	1d090000 	stcne	0, cr0, [r9, #-0]
    2bfc:	00434c44 	subeq	r4, r3, r4, asr #24
    2c00:	0347980a 	movteq	r9, #30730	; 0x780a
    2c04:	050a0000 	streq	r0, [sl, #-0]
    2c08:	00000b54 	andeq	r0, r0, r4, asr fp
    2c0c:	0c209c0a 	stceq	12, cr9, [r0], #-40	; 0xffffffd8
    2c10:	000b0000 	andeq	r0, fp, r0
    2c14:	00034706 	andeq	r4, r3, r6, lsl #14
    2c18:	000c3000 	andeq	r3, ip, r0
    2c1c:	00800700 	addeq	r0, r0, r0, lsl #14
    2c20:	00070000 	andeq	r0, r7, r0
    2c24:	0010cd02 	andseq	ip, r0, r2, lsl #26
    2c28:	cf9e0a00 	svcgt	0x009e0a00
    2c2c:	0400000b 	streq	r0, [r0], #-11
    2c30:	98a30a14 	stmials	r3!, {r2, r4, r9, fp}
    2c34:	0500000c 	streq	r0, [r0, #-12]
    2c38:	00000f44 	andeq	r0, r0, r4, asr #30
    2c3c:	0377a50a 	cmneq	r7, #41943040	; 0x2800000
    2c40:	05000000 	streq	r0, [r0, #-0]
    2c44:	00000ea2 	andeq	r0, r0, r2, lsr #29
    2c48:	0377a80a 	cmneq	r7, #655360	; 0xa0000
    2c4c:	1d040000 	stcne	0, cr0, [r4, #-0]
    2c50:	00454449 	subeq	r4, r5, r9, asr #8
    2c54:	0347ab0a 	movteq	sl, #31498	; 0x7b0a
    2c58:	1d080000 	stcne	0, cr0, [r8, #-0]
    2c5c:	00525452 	subseq	r5, r2, r2, asr r4
    2c60:	0347af0a 	movteq	sl, #32522	; 0x7f0a
    2c64:	1d090000 	stcne	0, cr0, [r9, #-0]
    2c68:	00434c44 	subeq	r4, r3, r4, asr #24
    2c6c:	0347b30a 	movteq	fp, #29450	; 0x730a
    2c70:	050a0000 	streq	r0, [sl, #-0]
    2c74:	00000b54 	andeq	r0, r0, r4, asr fp
    2c78:	0c20b60a 	stceq	6, cr11, [r0], #-40	; 0xffffffd8
    2c7c:	1d0b0000 	stcne	0, cr0, [fp, #-0]
    2c80:	00494d46 	subeq	r4, r9, r6, asr #26
    2c84:	0347b90a 	movteq	fp, #30986	; 0x790a
    2c88:	00130000 	andseq	r0, r3, r0
    2c8c:	000c6602 	andeq	r6, ip, r2, lsl #12
    2c90:	3bbc0a00 	blcc	fef05498 <APBAHBPrescTable+0xdef029e0>
    2c94:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    2c98:	00001270 	andeq	r1, r0, r0, ror r2
    2c9c:	4aac021a 	bmi	feb0350c <APBAHBPrescTable+0xdeb00a54>
    2ca0:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    2ca4:	02007273 	andeq	r7, r0, #805306375	; 0x30000007
    2ca8:	000309ad 	andeq	r0, r3, sp, lsr #19
    2cac:	bf050000 	svclt	0x00050000
    2cb0:	02000013 	andeq	r0, r0, #19
    2cb4:	000309ae 	andeq	r0, r3, lr, lsr #19
    2cb8:	641d0200 	ldrvs	r0, [sp], #-512	; 0xfffffe00
    2cbc:	af020072 	svcge	0x00020072
    2cc0:	00000309 	andeq	r0, r0, r9, lsl #6
    2cc4:	13c70504 	bicne	r0, r7, #4, 10	; 0x1000000
    2cc8:	b0020000 	andlt	r0, r2, r0
    2ccc:	00000309 	andeq	r0, r0, r9, lsl #6
    2cd0:	72621d06 	rsbvc	r1, r2, #384	; 0x180
    2cd4:	b1020072 	tstlt	r2, r2, ror r0
    2cd8:	00000309 	andeq	r0, r0, r9, lsl #6
    2cdc:	13490508 	movtne	r0, #38152	; 0x9508
    2ce0:	b2020000 	andlt	r0, r2, #0
    2ce4:	00000309 	andeq	r0, r0, r9, lsl #6
    2ce8:	72631d0a 	rsbvc	r1, r3, #640	; 0x280
    2cec:	b3020031 	movwlt	r0, #8241	; 0x2031
    2cf0:	00000309 	andeq	r0, r0, r9, lsl #6
    2cf4:	1351050c 	cmpne	r1, #12, 10	; 0x3000000
    2cf8:	b4020000 	strlt	r0, [r2], #-0
    2cfc:	00000309 	andeq	r0, r0, r9, lsl #6
    2d00:	72631d0e 	rsbvc	r1, r3, #896	; 0x380
    2d04:	b5020032 	strlt	r0, [r2, #-50]	; 0xffffffce
    2d08:	00000309 	andeq	r0, r0, r9, lsl #6
    2d0c:	13590510 	cmpne	r9, #16, 10	; 0x4000000
    2d10:	b6020000 	strlt	r0, [r2], -r0
    2d14:	00000309 	andeq	r0, r0, r9, lsl #6
    2d18:	72631d12 	rsbvc	r1, r3, #1152	; 0x480
    2d1c:	b7020033 	smladxlt	r2, r3, r0, r0
    2d20:	00000309 	andeq	r0, r0, r9, lsl #6
    2d24:	13610514 	cmnne	r1, #20, 10	; 0x5000000
    2d28:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    2d2c:	00000309 	andeq	r0, r0, r9, lsl #6
    2d30:	17de0516 	bfine	r0, r6, #10, #21
    2d34:	b9020000 	stmdblt	r2, {}	; <UNPREDICTABLE>
    2d38:	00000309 	andeq	r0, r0, r9, lsl #6
    2d3c:	70020018 	andvc	r0, r2, r8, lsl r0
    2d40:	02000012 	andeq	r0, r0, #18
    2d44:	000ca3ba 			; <UNDEFINED> instruction: 0x000ca3ba
    2d48:	122d1f00 	eorne	r1, sp, #0, 30
    2d4c:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    2d50:	20002860 	andcs	r2, r0, r0, ror #16
    2d54:	0000001e 	andeq	r0, r0, lr, lsl r0
    2d58:	0d779c01 	ldcleq	12, cr9, [r7, #-4]!
    2d5c:	73200000 	nopvc	{0}	; <UNPREDICTABLE>
    2d60:	77de0200 	ldrbvc	r0, [lr, r0, lsl #4]
    2d64:	0200000d 	andeq	r0, r0, #13
    2d68:	08007491 	stmdaeq	r0, {r0, r4, r7, sl, ip, sp, lr}
    2d6c:	000d7d04 	andeq	r7, sp, r4, lsl #26
    2d70:	08010300 	stmdaeq	r1, {r8, r9}
    2d74:	0000081e 	andeq	r0, r0, lr, lsl r8
    2d78:	0012011f 	andseq	r0, r2, pc, lsl r1
    2d7c:	38d90200 	ldmcc	r9, {r9}^
    2d80:	28200028 	stmdacs	r0!, {r3, r5}
    2d84:	01000000 	mrseq	r0, (UNDEF: 0)
    2d88:	000da69c 	muleq	sp, ip, r6
    2d8c:	00732000 	rsbseq	r2, r3, r0
    2d90:	0d77d902 			; <UNDEFINED> instruction: 0x0d77d902
    2d94:	91020000 	mrsls	r0, (UNDEF: 2)
    2d98:	65210074 	strvs	r0, [r1, #-116]!	; 0xffffff8c
    2d9c:	02000015 	andeq	r0, r0, #21
    2da0:	000d7dd0 	ldrdeq	r7, [sp], -r0
    2da4:	00281000 	eoreq	r1, r8, r0
    2da8:	00002820 	andeq	r2, r0, r0, lsr #16
    2dac:	219c0100 	orrscs	r0, ip, r0, lsl #2
    2db0:	00001455 	andeq	r1, r0, r5, asr r4
    2db4:	0d7dc602 	ldcleq	6, cr12, [sp, #-8]!
    2db8:	27e80000 	strbcs	r0, [r8, r0]!
    2dbc:	00282000 	eoreq	r2, r8, r0
    2dc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dc4:	0011cc1f 	andseq	ip, r1, pc, lsl ip
    2dc8:	a8be0200 	ldmge	lr!, {r9}
    2dcc:	40200027 	eormi	r0, r0, r7, lsr #32
    2dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2dd4:	000df29c 	muleq	sp, ip, r2
    2dd8:	00632000 	rsbeq	r2, r3, r0
    2ddc:	0d7dbe02 	ldcleq	14, cr11, [sp, #-8]!
    2de0:	91020000 	mrsls	r0, (UNDEF: 2)
    2de4:	b3220077 			; <UNDEFINED> instruction: 0xb3220077
    2de8:	02000014 	andeq	r0, r0, #20
    2dec:	00034086 	andeq	r4, r3, r6, lsl #1
    2df0:	0026e400 	eoreq	lr, r6, r0, lsl #8
    2df4:	0000c420 	andeq	ip, r0, r0, lsr #8
    2df8:	529c0100 	addspl	r0, ip, #0, 2
    2dfc:	2000000e 	andcs	r0, r0, lr
    2e00:	0067736d 	rsbeq	r7, r7, sp, ror #6
    2e04:	0e528602 	cdpeq	6, 5, cr8, cr2, cr2, {0}
    2e08:	91020000 	mrsls	r0, (UNDEF: 2)
    2e0c:	1788234c 	strne	r2, [r8, ip, asr #6]
    2e10:	87020000 	strhi	r0, [r2, -r0]
    2e14:	00000025 	andeq	r0, r0, r5, lsr #32
    2e18:	236f9102 	cmncs	pc, #-2147483648	; 0x80000000
    2e1c:	00001220 	andeq	r1, r0, r0, lsr #4
    2e20:	0e588802 	cdpeq	8, 5, cr8, cr8, cr2, {0}
    2e24:	91020000 	mrsls	r0, (UNDEF: 2)
    2e28:	0e1c2368 	cdpeq	3, 1, cr2, cr12, cr8, {3}
    2e2c:	89020000 	stmdbhi	r2, {}	; <UNPREDICTABLE>
    2e30:	00000c30 	andeq	r0, r0, r0, lsr ip
    2e34:	23509102 	cmpcs	r0, #-2147483648	; 0x80000000
    2e38:	000010af 	andeq	r1, r0, pc, lsr #1
    2e3c:	03478a02 	movteq	r8, #31234	; 0x7a02
    2e40:	91020000 	mrsls	r0, (UNDEF: 2)
    2e44:	04080067 	streq	r0, [r8], #-103	; 0xffffff99
    2e48:	00000087 	andeq	r0, r0, r7, lsl #1
    2e4c:	08fc0408 	ldmeq	ip!, {r3, sl}^
    2e50:	e6220000 	strt	r0, [r2], -r0
    2e54:	02000014 	andeq	r0, r0, #20
    2e58:	0003406e 	andeq	r4, r3, lr, rrx
    2e5c:	00263400 	eoreq	r3, r6, r0, lsl #8
    2e60:	0000b020 	andeq	fp, r0, r0, lsr #32
    2e64:	a29c0100 	addsge	r0, ip, #0, 2
    2e68:	2000000e 	andcs	r0, r0, lr
    2e6c:	0067736d 	rsbeq	r7, r7, sp, ror #6
    2e70:	0e526e02 	cdpeq	14, 5, cr6, cr2, cr2, {0}
    2e74:	91020000 	mrsls	r0, (UNDEF: 2)
    2e78:	17882354 			; <UNDEFINED> instruction: 0x17882354
    2e7c:	6f020000 	svcvs	0x00020000
    2e80:	00000025 	andeq	r0, r0, r5, lsr #32
    2e84:	236f9102 	cmncs	pc, #-2147483648	; 0x80000000
    2e88:	00000c7d 	andeq	r0, r0, sp, ror ip
    2e8c:	0c987002 	ldceq	0, cr7, [r8], {2}
    2e90:	91020000 	mrsls	r0, (UNDEF: 2)
    2e94:	ca1f0058 	bgt	7c2ffc <startup-0x1f83d004>
    2e98:	02000015 	andeq	r0, r0, #21
    2e9c:	00244012 	eoreq	r4, r4, r2, lsl r0
    2ea0:	0001f420 	andeq	pc, r1, r0, lsr #8
    2ea4:	089c0100 	ldmeq	ip, {r8}
    2ea8:	2400000f 	strcs	r0, [r0], #-15
    2eac:	000017d4 	ldrdeq	r1, [r0], -r4
    2eb0:	00921202 	addseq	r1, r2, r2, lsl #4
    2eb4:	91020000 	mrsls	r0, (UNDEF: 2)
    2eb8:	166e2344 	strbtne	r2, [lr], -r4, asr #6
    2ebc:	13020000 	movwne	r0, #8192	; 0x2000
    2ec0:	00000aac 	andeq	r0, r0, ip, lsr #21
    2ec4:	23649102 	cmncs	r4, #-2147483648	; 0x80000000
    2ec8:	00001377 	andeq	r1, r0, r7, ror r3
    2ecc:	0bc41402 	bleq	ff107edc <APBAHBPrescTable+0xdf105424>
    2ed0:	91020000 	mrsls	r0, (UNDEF: 2)
    2ed4:	13cf2354 	bicne	r2, pc, #84, 6	; 0x50000001
    2ed8:	4b020000 	blmi	82ee0 <startup-0x1ff7d120>
    2edc:	00000b44 	andeq	r0, r0, r4, asr #22
    2ee0:	25489102 	strbcs	r9, [r8, #-258]	; 0xfffffefe
    2ee4:	00000f63 	andeq	r0, r0, r3, ror #30
    2ee8:	200025f8 	strdcs	r2, [r0], -r8
    2eec:	00000006 	andeq	r0, r0, r6
    2ef0:	6c266502 	cfstr32vs	mvfx6, [r6], #-8
    2ef4:	0200000f 	andeq	r0, r0, #15
    2ef8:	00006c91 	muleq	r0, r1, ip
    2efc:	0017b527 	andseq	fp, r7, r7, lsr #10
    2f00:	060f0100 	streq	r0, [pc], -r0, lsl #2
    2f04:	200023e0 	andcs	r2, r0, r0, ror #7
    2f08:	00000060 	andeq	r0, r0, r0, rrx
    2f0c:	0f3d9c01 	svceq	0x003d9c01
    2f10:	9c280000 	stcls	0, cr0, [r8], #-0
    2f14:	01000017 	tsteq	r0, r7, lsl r0
    2f18:	02d9060f 	sbcseq	r0, r9, #15728640	; 0xf00000
    2f1c:	91020000 	mrsls	r0, (UNDEF: 2)
    2f20:	17552877 			; <UNDEFINED> instruction: 0x17552877
    2f24:	0f010000 	svceq	0x00010000
    2f28:	00037706 	andeq	r7, r3, r6, lsl #14
    2f2c:	70910200 	addsvc	r0, r1, r0, lsl #4
    2f30:	11982700 	orrsne	r2, r8, r0, lsl #14
    2f34:	bc010000 	stclt	0, cr0, [r1], {-0}
    2f38:	0023a805 	eoreq	sl, r3, r5, lsl #16
    2f3c:	00003820 	andeq	r3, r0, r0, lsr #16
    2f40:	639c0100 	orrsvs	r0, ip, #0, 2
    2f44:	2800000f 	stmdacs	r0, {r0, r1, r2, r3}
    2f48:	0000179c 	muleq	r0, ip, r7
    2f4c:	d905bc01 	stmdble	r5, {r0, sl, fp, ip, sp, pc}
    2f50:	02000002 	andeq	r0, r0, #2
    2f54:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    2f58:	00001369 	andeq	r1, r0, r9, ror #6
    2f5c:	03022003 	movweq	r2, #8195	; 0x2003
    2f60:	00127c2a 	andseq	r7, r2, sl, lsr #24
    2f64:	02200300 	eoreq	r0, r0, #0, 6
    2f68:	00000377 	andeq	r0, r0, r7, ror r3
    2f6c:	01010000 	mrseq	r0, (UNDEF: 1)
    2f70:	00040000 	andeq	r0, r4, r0
    2f74:	00000806 	andeq	r0, r0, r6, lsl #16
    2f78:	049a0104 	ldreq	r0, [sl], #260	; 0x104
    2f7c:	810c0000 	mrshi	r0, (UNDEF: 12)
    2f80:	94000018 	strls	r0, [r0], #-24	; 0xffffffe8
    2f84:	00000002 	andeq	r0, r0, r2
    2f88:	00000000 	andeq	r0, r0, r0
    2f8c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2f90:	0200000b 	andeq	r0, r0, #11
    2f94:	0000185e 	andeq	r1, r0, lr, asr r8
    2f98:	00300702 	eorseq	r0, r0, r2, lsl #14
    2f9c:	01030000 	mrseq	r0, (UNDEF: 3)
    2fa0:	00081508 	andeq	r1, r8, r8, lsl #10
    2fa4:	020b0400 	andeq	r0, fp, #0, 8
    2fa8:	00007010 	andeq	r7, r0, r0, lsl r0
    2fac:	18640500 	stmdane	r4!, {r8, sl}^
    2fb0:	11020000 	mrsne	r0, (UNDEF: 2)
    2fb4:	00000025 	andeq	r0, r0, r5, lsr #32
    2fb8:	175e0500 	ldrbne	r0, [lr, -r0, lsl #10]
    2fbc:	12020000 	andne	r0, r2, #0
    2fc0:	00000025 	andeq	r0, r0, r5, lsr #32
    2fc4:	16510501 	ldrbne	r0, [r1], -r1, lsl #10
    2fc8:	13020000 	movwne	r0, #8192	; 0x2000
    2fcc:	00000025 	andeq	r0, r0, r5, lsr #32
    2fd0:	15820502 	strne	r0, [r2, #1282]	; 0x502
    2fd4:	14020000 	strne	r0, [r2], #-0
    2fd8:	00000070 	andeq	r0, r0, r0, ror r0
    2fdc:	25060003 	strcs	r0, [r6, #-3]
    2fe0:	80000000 	andhi	r0, r0, r0
    2fe4:	07000000 	streq	r0, [r0, -r0]
    2fe8:	00000080 	andeq	r0, r0, r0, lsl #1
    2fec:	04030007 	streq	r0, [r3], #-7
    2ff0:	0000e507 	andeq	lr, r0, r7, lsl #10
    2ff4:	13ee0200 	mvnne	r0, #0, 4
    2ff8:	15020000 	strne	r0, [r2, #-0]
    2ffc:	00000037 	andeq	r0, r0, r7, lsr r0
    3000:	0018be08 	andseq	fp, r8, r8, lsl #28
    3004:	003c0100 	eorseq	r0, ip, r0, lsl #2
    3008:	0c200000 	stceq	0, cr0, [r0], #-0
    300c:	01000000 	mrseq	r0, (UNDEF: 0)
    3010:	187c099c 	ldmdane	ip!, {r2, r3, r4, r7, r8, fp}^
    3014:	14010000 	strne	r0, [r1], #-0
    3018:	200028c0 	andcs	r2, r0, r0, asr #17
    301c:	000000e0 	andeq	r0, r0, r0, ror #1
    3020:	00dd9c01 	sbcseq	r9, sp, r1, lsl #24
    3024:	6d0a0000 	stcvs	0, cr0, [sl, #-0]
    3028:	01006773 	tsteq	r0, r3, ror r7
    302c:	0000871b 	andeq	r8, r0, fp, lsl r7
    3030:	68910200 	ldmvs	r1, {r9}
    3034:	00292c0b 	eoreq	r2, r9, fp, lsl #24
    3038:	00002620 	andeq	r2, r0, r0, lsr #12
    303c:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    3040:	00dd2b01 	sbcseq	r2, sp, r1, lsl #22
    3044:	91020000 	mrsls	r0, (UNDEF: 2)
    3048:	0c000074 	stceq	0, cr0, [r0], {116}	; 0x74
    304c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3050:	c60d0074 			; <UNDEFINED> instruction: 0xc60d0074
    3054:	01000018 	tsteq	r0, r8, lsl r0
    3058:	00288009 	eoreq	r8, r8, r9
    305c:	00004020 	andeq	r4, r0, r0, lsr #32
    3060:	0a9c0100 	beq	fe703468 <APBAHBPrescTable+0xde7009b0>
    3064:	0067736d 	rsbeq	r7, r7, sp, ror #6
    3068:	00870c01 	addeq	r0, r7, r1, lsl #24
    306c:	91020000 	mrsls	r0, (UNDEF: 2)
    3070:	Address 0x00003070 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	26050000 	strcs	r0, [r5], -r0
  38:	00134900 	andseq	r4, r3, r0, lsl #18
  3c:	00350600 	eorseq	r0, r5, r0, lsl #12
  40:	00001349 	andeq	r1, r0, r9, asr #6
  44:	49010107 	stmdbmi	r1, {r0, r1, r2, r8}
  48:	00130113 	andseq	r0, r3, r3, lsl r1
  4c:	00210800 	eoreq	r0, r1, r0, lsl #16
  50:	0b2f1349 	bleq	bc4d7c <startup-0x1f43b284>
  54:	34090000 	strcc	r0, [r9], #-0
  58:	3a0e0300 	bcc	380c60 <startup-0x1fc7f3a0>
  5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  60:	3c193f13 	ldccc	15, cr3, [r9], {19}
  64:	0a000019 	beq	d0 <startup-0x1fffff30>
  68:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  6c:	0b3b0b3a 	bleq	ec2d5c <startup-0x1f13d2a4>
  70:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  74:	0000193c 	andeq	r1, r0, ip, lsr r9
  78:	3e01040b 	cdpcc	4, 0, cr0, cr1, cr11, {0}
  7c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
  80:	3b0b3a13 	blcc	2ce8d4 <startup-0x1fd3172c>
  84:	00130105 	andseq	r0, r3, r5, lsl #2
  88:	00280c00 	eoreq	r0, r8, r0, lsl #24
  8c:	0b1c0e03 	bleq	7038a0 <startup-0x1f8fc760>
  90:	280d0000 	stmdacs	sp, {}	; <UNPREDICTABLE>
  94:	1c080300 	stcne	3, cr0, [r8], {-0}
  98:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
  9c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a4:	00001349 	andeq	r1, r0, r9, asr #6
  a8:	0b01130f 	bleq	44cec <startup-0x1ffbb314>
  ac:	3b0b3a0b 	blcc	2ce8e0 <startup-0x1fd31720>
  b0:	00130105 	andseq	r0, r3, r5, lsl #2
  b4:	000d1000 	andeq	r1, sp, r0
  b8:	0b3a0803 	bleq	e820cc <startup-0x1f17df34>
  bc:	1349053b 	movtne	r0, #38203	; 0x953b
  c0:	00000b38 	andeq	r0, r0, r8, lsr fp
  c4:	03000d11 	movweq	r0, #3345	; 0xd11
  c8:	3b0b3a0e 	blcc	2ce908 <startup-0x1fd316f8>
  cc:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
  d0:	1200000b 	andne	r0, r0, #11
  d4:	0b0b0113 	bleq	2c0528 <startup-0x1fd3fad8>
  d8:	0b3b0b3a 	bleq	ec2dc8 <startup-0x1f13d238>
  dc:	00001301 	andeq	r1, r0, r1, lsl #6
  e0:	03000d13 	movweq	r0, #3347	; 0xd13
  e4:	3b0b3a0e 	blcc	2ce924 <startup-0x1fd316dc>
  e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  ec:	1400000b 	strne	r0, [r0], #-11
  f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  f4:	0b3b0b3a 	bleq	ec2de4 <startup-0x1f13d21c>
  f8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  fc:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 100:	03193f01 	tsteq	r9, #1, 30
 104:	3b0b3a0e 	blcc	2ce944 <startup-0x1fd316bc>
 108:	11192705 	tstne	r9, r5, lsl #14
 10c:	40061201 	andmi	r1, r6, r1, lsl #4
 110:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 114:	00001301 	andeq	r1, r0, r1, lsl #6
 118:	03000516 	movweq	r0, #1302	; 0x516
 11c:	3b0b3a0e 	blcc	2ce95c <startup-0x1fd316a4>
 120:	02134905 	andseq	r4, r3, #81920	; 0x14000
 124:	17000018 	smladne	r0, r8, r0, r0
 128:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 12c:	0b3a0e03 	bleq	e83940 <startup-0x1f17c6c0>
 130:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 134:	01111349 	tsteq	r1, r9, asr #6
 138:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 13c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 140:	18000013 	stmdane	r0, {r0, r1, r4}
 144:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 148:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 14c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 150:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 154:	03193f00 	tsteq	r9, #0, 30
 158:	3b0b3a0e 	blcc	2ce998 <startup-0x1fd31668>
 15c:	11192705 	tstne	r9, r5, lsl #14
 160:	40061201 	andmi	r1, r6, r1, lsl #4
 164:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 168:	341a0000 	ldrcc	r0, [sl], #-0
 16c:	3a080300 	bcc	200d74 <startup-0x1fdff28c>
 170:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 174:	00180213 	andseq	r0, r8, r3, lsl r2
 178:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 17c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 180:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 184:	01111927 	tsteq	r1, r7, lsr #18
 188:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 18c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 190:	1c000013 	stcne	0, cr0, [r0], {19}
 194:	0b0b000f 	bleq	2c01d8 <startup-0x1fd3fe28>
 198:	00001349 	andeq	r1, r0, r9, asr #6
 19c:	3f002e1d 	svccc	0x00002e1d
 1a0:	3a0e0319 	bcc	380e0c <startup-0x1fc7f1f4>
 1a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 1a8:	11134919 	tstne	r3, r9, lsl r9
 1ac:	40061201 	andmi	r1, r6, r1, lsl #4
 1b0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1b4:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 1b8:	03193f01 	tsteq	r9, #1, 30
 1bc:	3b0b3a0e 	blcc	2ce9fc <startup-0x1fd31604>
 1c0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 1c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1c8:	96184006 	ldrls	r4, [r8], -r6
 1cc:	13011942 	movwne	r1, #6466	; 0x1942
 1d0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1d4:	03193f00 	tsteq	r9, #0, 30
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	1119270b 	tstne	r9, fp, lsl #14
 1e0:	40061201 	andmi	r1, r6, r1, lsl #4
 1e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1e8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ec:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 1f0:	0e030b13 	vmoveq.32	d3[0], r0
 1f4:	01110e1b 	tsteq	r1, fp, lsl lr
 1f8:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1fc:	24020000 	strcs	r0, [r2], #-0
 200:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 204:	000e030b 	andeq	r0, lr, fp, lsl #6
 208:	00160300 	andseq	r0, r6, r0, lsl #6
 20c:	0b3a0e03 	bleq	e83a20 <startup-0x1f17c5e0>
 210:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 214:	24040000 	strcs	r0, [r4], #-0
 218:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 21c:	0008030b 	andeq	r0, r8, fp, lsl #6
 220:	00350500 	eorseq	r0, r5, r0, lsl #10
 224:	00001349 	andeq	r1, r0, r9, asr #6
 228:	03003406 	movweq	r3, #1030	; 0x406
 22c:	3b0b3a0e 	blcc	2cea6c <startup-0x1fd31594>
 230:	3f134905 	svccc	0x00134905
 234:	00193c19 	andseq	r3, r9, r9, lsl ip
 238:	00340700 	eorseq	r0, r4, r0, lsl #14
 23c:	0b3a0e03 	bleq	e83a50 <startup-0x1f17c5b0>
 240:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 244:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 248:	04080000 	streq	r0, [r8], #-0
 24c:	0b0b3e01 	bleq	2cfa58 <startup-0x1fd305a8>
 250:	3a13490b 	bcc	4d2684 <startup-0x1fb2d97c>
 254:	01053b0b 	tsteq	r5, fp, lsl #22
 258:	09000013 	stmdbeq	r0, {r0, r1, r4}
 25c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 260:	00000b1c 	andeq	r0, r0, ip, lsl fp
 264:	0b01130a 	bleq	44e94 <startup-0x1ffbb16c>
 268:	3b0b3a0b 	blcc	2cea9c <startup-0x1fd31564>
 26c:	00130105 	andseq	r0, r3, r5, lsl #2
 270:	000d0b00 	andeq	r0, sp, r0, lsl #22
 274:	0b3a0e03 	bleq	e83a88 <startup-0x1f17c578>
 278:	1349053b 	movtne	r0, #38203	; 0x953b
 27c:	00000b38 	andeq	r0, r0, r8, lsr fp
 280:	03000d0c 	movweq	r0, #3340	; 0xd0c
 284:	3b0b3a08 	blcc	2ceaac <startup-0x1fd31554>
 288:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 28c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 290:	13490101 	movtne	r0, #37121	; 0x9101
 294:	00001301 	andeq	r1, r0, r1, lsl #6
 298:	4900210e 	stmdbmi	r0, {r1, r2, r3, r8, sp}
 29c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 2a0:	00160f00 	andseq	r0, r6, r0, lsl #30
 2a4:	0b3a0e03 	bleq	e83ab8 <startup-0x1f17c548>
 2a8:	1349053b 	movtne	r0, #38203	; 0x953b
 2ac:	04100000 	ldreq	r0, [r0], #-0
 2b0:	0b0b3e01 	bleq	2cfabc <startup-0x1fd30544>
 2b4:	3a13490b 	bcc	4d26e8 <startup-0x1fb2d918>
 2b8:	010b3b0b 	tsteq	fp, fp, lsl #22
 2bc:	11000013 	tstne	r0, r3, lsl r0
 2c0:	0b0b0113 	bleq	2c0714 <startup-0x1fd3f8ec>
 2c4:	0b3b0b3a 	bleq	ec2fb4 <startup-0x1f13d04c>
 2c8:	00001301 	andeq	r1, r0, r1, lsl #6
 2cc:	03000d12 	movweq	r0, #3346	; 0xd12
 2d0:	3b0b3a0e 	blcc	2ceb10 <startup-0x1fd314f0>
 2d4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 2d8:	1300000b 	movwne	r0, #11
 2dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2e0:	0b3a0e03 	bleq	e83af4 <startup-0x1f17c50c>
 2e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 2e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2f0:	00130119 	andseq	r0, r3, r9, lsl r1
 2f4:	00051400 	andeq	r1, r5, r0, lsl #8
 2f8:	0b3a0e03 	bleq	e83b0c <startup-0x1f17c4f4>
 2fc:	1349053b 	movtne	r0, #38203	; 0x953b
 300:	00001802 	andeq	r1, r0, r2, lsl #16
 304:	03003415 	movweq	r3, #1045	; 0x415
 308:	3b0b3a0e 	blcc	2ceb48 <startup-0x1fd314b8>
 30c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 310:	16000018 			; <UNDEFINED> instruction: 0x16000018
 314:	0b0b000f 	bleq	2c0358 <startup-0x1fd3fca8>
 318:	00001349 	andeq	r1, r0, r9, asr #6
 31c:	3f012e17 	svccc	0x00012e17
 320:	3a0e0319 	bcc	380f8c <startup-0x1fc7f074>
 324:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 328:	11134919 	tstne	r3, r9, lsl r9
 32c:	40061201 	andmi	r1, r6, r1, lsl #4
 330:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 334:	00001301 	andeq	r1, r0, r1, lsl #6
 338:	03003418 	movweq	r3, #1048	; 0x418
 33c:	3b0b3a08 	blcc	2ceb64 <startup-0x1fd3149c>
 340:	02134905 	andseq	r4, r3, #81920	; 0x14000
 344:	19000018 	stmdbne	r0, {r3, r4}
 348:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 34c:	0b3a0e03 	bleq	e83b60 <startup-0x1f17c4a0>
 350:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 354:	06120111 			; <UNDEFINED> instruction: 0x06120111
 358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 35c:	00130119 	andseq	r0, r3, r9, lsl r1
 360:	00051a00 	andeq	r1, r5, r0, lsl #20
 364:	0b3a0e03 	bleq	e83b78 <startup-0x1f17c488>
 368:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 36c:	00001802 	andeq	r1, r0, r2, lsl #16
 370:	0300341b 	movweq	r3, #1051	; 0x41b
 374:	3b0b3a0e 	blcc	2cebb4 <startup-0x1fd3144c>
 378:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 37c:	1c000018 	stcne	0, cr0, [r0], {24}
 380:	08030034 	stmdaeq	r3, {r2, r4, r5}
 384:	0b3b0b3a 	bleq	ec3074 <startup-0x1f13cf8c>
 388:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 38c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 390:	03193f01 	tsteq	r9, #1, 30
 394:	3b0b3a0e 	blcc	2cebd4 <startup-0x1fd3142c>
 398:	1119270b 	tstne	r9, fp, lsl #14
 39c:	40061201 	andmi	r1, r6, r1, lsl #4
 3a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3a4:	01000000 	mrseq	r0, (UNDEF: 0)
 3a8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 3ac:	0e030b13 	vmoveq.32	d3[0], r0
 3b0:	01110e1b 	tsteq	r1, fp, lsl lr
 3b4:	17100612 			; <UNDEFINED> instruction: 0x17100612
 3b8:	24020000 	strcs	r0, [r2], #-0
 3bc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3c0:	000e030b 	andeq	r0, lr, fp, lsl #6
 3c4:	00160300 	andseq	r0, r6, r0, lsl #6
 3c8:	0b3a0e03 	bleq	e83bdc <startup-0x1f17c424>
 3cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3d0:	24040000 	strcs	r0, [r4], #-0
 3d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3d8:	0008030b 	andeq	r0, r8, fp, lsl #6
 3dc:	00350500 	eorseq	r0, r5, r0, lsl #10
 3e0:	00001349 	andeq	r1, r0, r9, asr #6
 3e4:	49010106 	stmdbmi	r1, {r1, r2, r8}
 3e8:	00130113 	andseq	r0, r3, r3, lsl r1
 3ec:	00210700 	eoreq	r0, r1, r0, lsl #14
 3f0:	0b2f1349 	bleq	bc511c <startup-0x1f43aee4>
 3f4:	34080000 	strcc	r0, [r8], #-0
 3f8:	3a0e0300 	bcc	381000 <startup-0x1fc7f000>
 3fc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 400:	3c193f13 	ldccc	15, cr3, [r9], {19}
 404:	09000019 	stmdbeq	r0, {r0, r3, r4}
 408:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 40c:	0b3b0b3a 	bleq	ec30fc <startup-0x1f13cf04>
 410:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 414:	0000193c 	andeq	r1, r0, ip, lsr r9
 418:	3e01040a 	cdpcc	4, 0, cr0, cr1, cr10, {0}
 41c:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 420:	3b0b3a13 	blcc	2cec74 <startup-0x1fd3138c>
 424:	00130105 	andseq	r0, r3, r5, lsl #2
 428:	00280b00 	eoreq	r0, r8, r0, lsl #22
 42c:	0b1c0e03 	bleq	703c40 <startup-0x1f8fc3c0>
 430:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
 434:	1c080300 	stcne	3, cr0, [r8], {-0}
 438:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
 43c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 440:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 444:	00001349 	andeq	r1, r0, r9, asr #6
 448:	0b01130e 	bleq	45088 <startup-0x1ffbaf78>
 44c:	3b0b3a0b 	blcc	2cec80 <startup-0x1fd31380>
 450:	00130105 	andseq	r0, r3, r5, lsl #2
 454:	000d0f00 	andeq	r0, sp, r0, lsl #30
 458:	0b3a0803 	bleq	e8246c <startup-0x1f17db94>
 45c:	1349053b 	movtne	r0, #38203	; 0x953b
 460:	00000b38 	andeq	r0, r0, r8, lsr fp
 464:	03000d10 	movweq	r0, #3344	; 0xd10
 468:	3b0b3a0e 	blcc	2ceca8 <startup-0x1fd31358>
 46c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 470:	1100000b 	tstne	r0, fp
 474:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 478:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 47c:	00001301 	andeq	r1, r0, r1, lsl #6
 480:	03000d12 	movweq	r0, #3346	; 0xd12
 484:	3b0b3a0e 	blcc	2cecc4 <startup-0x1fd3133c>
 488:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 48c:	13000005 	movwne	r0, #5
 490:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 494:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 498:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 49c:	13140000 	tstne	r4, #0
 4a0:	3a0b0b01 	bcc	2c30ac <startup-0x1fd3cf54>
 4a4:	010b3b0b 	tsteq	fp, fp, lsl #22
 4a8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 4ac:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4b0:	0b3b0b3a 	bleq	ec31a0 <startup-0x1f13ce60>
 4b4:	0b381349 	bleq	e051e0 <startup-0x1f1fae20>
 4b8:	0d160000 	ldceq	0, cr0, [r6, #-0]
 4bc:	3a080300 	bcc	2010c4 <startup-0x1fdfef3c>
 4c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c4:	000b3813 	andeq	r3, fp, r3, lsl r8
 4c8:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 4cc:	0b3a0e03 	bleq	e83ce0 <startup-0x1f17c320>
 4d0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 4d4:	01111349 	tsteq	r1, r9, asr #6
 4d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4e0:	18000013 	stmdane	r0, {r0, r1, r4}
 4e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 4e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 4ec:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4f0:	34190000 	ldrcc	r0, [r9], #-0
 4f4:	3a0e0300 	bcc	3810fc <startup-0x1fc7ef04>
 4f8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4fc:	00180213 	andseq	r0, r8, r3, lsl r2
 500:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 504:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 508:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 50c:	01111927 	tsteq	r1, r7, lsr #18
 510:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 514:	01194297 			; <UNDEFINED> instruction: 0x01194297
 518:	1b000013 	blne	56c <startup-0x1ffffa94>
 51c:	0b0b000f 	bleq	2c0560 <startup-0x1fd3faa0>
 520:	00001349 	andeq	r1, r0, r9, asr #6
 524:	3f012e1c 	svccc	0x00012e1c
 528:	3a0e0319 	bcc	381194 <startup-0x1fc7ee6c>
 52c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 530:	11134919 	tstne	r3, r9, lsl r9
 534:	40061201 	andmi	r1, r6, r1, lsl #4
 538:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 53c:	00001301 	andeq	r1, r0, r1, lsl #6
 540:	3f012e1d 	svccc	0x00012e1d
 544:	3a0e0319 	bcc	3811b0 <startup-0x1fc7ee50>
 548:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 54c:	11134919 	tstne	r3, r9, lsl r9
 550:	40061201 	andmi	r1, r6, r1, lsl #4
 554:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 558:	00001301 	andeq	r1, r0, r1, lsl #6
 55c:	3f012e1e 	svccc	0x00012e1e
 560:	3a0e0319 	bcc	3811cc <startup-0x1fc7ee34>
 564:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 568:	11134919 	tstne	r3, r9, lsl r9
 56c:	40061201 	andmi	r1, r6, r1, lsl #4
 570:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 574:	00001301 	andeq	r1, r0, r1, lsl #6
 578:	0300051f 	movweq	r0, #1311	; 0x51f
 57c:	3b0b3a0e 	blcc	2cedbc <startup-0x1fd31244>
 580:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 584:	20000018 	andcs	r0, r0, r8, lsl r0
 588:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 58c:	0b3b0b3a 	bleq	ec327c <startup-0x1f13cd84>
 590:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 594:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 598:	03193f01 	tsteq	r9, #1, 30
 59c:	3b0b3a0e 	blcc	2ceddc <startup-0x1fd31224>
 5a0:	1119270b 	tstne	r9, fp, lsl #14
 5a4:	40061201 	andmi	r1, r6, r1, lsl #4
 5a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5ac:	01000000 	mrseq	r0, (UNDEF: 0)
 5b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 5b4:	0e030b13 	vmoveq.32	d3[0], r0
 5b8:	01110e1b 	tsteq	r1, fp, lsl lr
 5bc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 5c0:	16020000 	strne	r0, [r2], -r0
 5c4:	3a0e0300 	bcc	3811cc <startup-0x1fc7ee34>
 5c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5cc:	03000013 	movweq	r0, #19
 5d0:	0b0b0024 	bleq	2c0668 <startup-0x1fd3f998>
 5d4:	0e030b3e 	vmoveq.16	d3[0], r0
 5d8:	13040000 	movwne	r0, #16384	; 0x4000
 5dc:	3a0b0b01 	bcc	2c31e8 <startup-0x1fd3ce18>
 5e0:	010b3b0b 	tsteq	fp, fp, lsl #22
 5e4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
 5e8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5ec:	0b3b0b3a 	bleq	ec32dc <startup-0x1f13cd24>
 5f0:	0b381349 	bleq	e0531c <startup-0x1f1face4>
 5f4:	01060000 	mrseq	r0, (UNDEF: 6)
 5f8:	01134901 	tsteq	r3, r1, lsl #18
 5fc:	07000013 	smladeq	r0, r3, r0, r0
 600:	13490021 	movtne	r0, #36897	; 0x9021
 604:	00000b2f 	andeq	r0, r0, pc, lsr #22
 608:	0b000f08 	bleq	4230 <startup-0x1fffbdd0>
 60c:	0013490b 	andseq	r4, r3, fp, lsl #18
 610:	00150900 	andseq	r0, r5, r0, lsl #18
 614:	00001927 	andeq	r1, r0, r7, lsr #18
 618:	0301040a 	movweq	r0, #5130	; 0x140a
 61c:	0b0b3e0e 	bleq	2cfe5c <startup-0x1fd301a4>
 620:	3a13490b 	bcc	4d2a54 <startup-0x1fb2d5ac>
 624:	010b3b0b 	tsteq	fp, fp, lsl #22
 628:	0b000013 	bleq	67c <startup-0x1ffff984>
 62c:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
 630:	00000d1c 	andeq	r0, r0, ip, lsl sp
 634:	0300280c 	movweq	r2, #2060	; 0x80c
 638:	000b1c0e 	andeq	r1, fp, lr, lsl #24
 63c:	00160d00 	andseq	r0, r6, r0, lsl #26
 640:	0b3a0e03 	bleq	e83e54 <startup-0x1f17c1ac>
 644:	1349053b 	movtne	r0, #38203	; 0x953b
 648:	350e0000 	strcc	r0, [lr, #-0]
 64c:	00134900 	andseq	r4, r3, r0, lsl #18
 650:	00240f00 	eoreq	r0, r4, r0, lsl #30
 654:	0b3e0b0b 	bleq	f83288 <startup-0x1f07cd78>
 658:	00000803 	andeq	r0, r0, r3, lsl #16
 65c:	49002610 	stmdbmi	r0, {r4, r9, sl, sp}
 660:	11000013 	tstne	r0, r3, lsl r0
 664:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 668:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 66c:	00001301 	andeq	r1, r0, r1, lsl #6
 670:	03000d12 	movweq	r0, #3346	; 0xd12
 674:	3b0b3a0e 	blcc	2ceeb4 <startup-0x1fd3114c>
 678:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 67c:	1300000b 	movwne	r0, #11
 680:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 684:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 688:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 68c:	0d140000 	ldceq	0, cr0, [r4, #-0]
 690:	3a080300 	bcc	201298 <startup-0x1fdfed68>
 694:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 698:	00053813 	andeq	r3, r5, r3, lsl r8
 69c:	00211500 	eoreq	r1, r1, r0, lsl #10
 6a0:	052f1349 	streq	r1, [pc, #-841]!	; 35f <startup-0x1ffffca1>
 6a4:	13160000 	tstne	r6, #0
 6a8:	3a0b0b01 	bcc	2c32b4 <startup-0x1fd3cd4c>
 6ac:	01053b0b 	tsteq	r5, fp, lsl #22
 6b0:	17000013 	smladne	r0, r3, r0, r0
 6b4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 6b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6bc:	0b381349 	bleq	e053e8 <startup-0x1f1fac18>
 6c0:	34180000 	ldrcc	r0, [r8], #-0
 6c4:	3a0e0300 	bcc	3812cc <startup-0x1fc7ed34>
 6c8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 6cc:	3c193f13 	ldccc	15, cr3, [r9], {19}
 6d0:	19000019 	stmdbne	r0, {r0, r3, r4}
 6d4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 6d8:	0b3b0b3a 	bleq	ec33c8 <startup-0x1f13cc38>
 6dc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 6e0:	0000193c 	andeq	r1, r0, ip, lsr r9
 6e4:	3e01041a 	cfmvdlrcc	mvd1, r0
 6e8:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
 6ec:	3b0b3a13 	blcc	2cef40 <startup-0x1fd310c0>
 6f0:	00130105 	andseq	r0, r3, r5, lsl #2
 6f4:	00281b00 	eoreq	r1, r8, r0, lsl #22
 6f8:	0b1c0803 	bleq	70270c <startup-0x1f8fd8f4>
 6fc:	041c0000 	ldreq	r0, [ip], #-0
 700:	0b0b3e01 	bleq	2cff0c <startup-0x1fd300f4>
 704:	3a13490b 	bcc	4d2b38 <startup-0x1fb2d4c8>
 708:	010b3b0b 	tsteq	fp, fp, lsl #22
 70c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 710:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 714:	0b3b0b3a 	bleq	ec3404 <startup-0x1f13cbfc>
 718:	0b381349 	bleq	e05444 <startup-0x1f1fabbc>
 71c:	131e0000 	tstne	lr, #0
 720:	0b0e0301 	bleq	38132c <startup-0x1fc7ecd4>
 724:	3b0b3a0b 	blcc	2cef58 <startup-0x1fd310a8>
 728:	0013010b 	andseq	r0, r3, fp, lsl #2
 72c:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
 730:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 734:	0b3b0b3a 	bleq	ec3424 <startup-0x1f13cbdc>
 738:	01111927 	tsteq	r1, r7, lsr #18
 73c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 740:	01194296 			; <UNDEFINED> instruction: 0x01194296
 744:	20000013 	andcs	r0, r0, r3, lsl r0
 748:	08030005 	stmdaeq	r3, {r0, r2}
 74c:	0b3b0b3a 	bleq	ec343c <startup-0x1f13cbc4>
 750:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 754:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 758:	03193f00 	tsteq	r9, #0, 30
 75c:	3b0b3a0e 	blcc	2cef9c <startup-0x1fd31064>
 760:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 764:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 768:	97184006 	ldrls	r4, [r8, -r6]
 76c:	00001942 	andeq	r1, r0, r2, asr #18
 770:	3f012e22 	svccc	0x00012e22
 774:	3a0e0319 	bcc	3813e0 <startup-0x1fc7ec20>
 778:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 77c:	11134919 	tstne	r3, r9, lsl r9
 780:	40061201 	andmi	r1, r6, r1, lsl #4
 784:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 788:	00001301 	andeq	r1, r0, r1, lsl #6
 78c:	03003423 	movweq	r3, #1059	; 0x423
 790:	3b0b3a0e 	blcc	2cefd0 <startup-0x1fd31030>
 794:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 798:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
 79c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 7a0:	0b3b0b3a 	bleq	ec3490 <startup-0x1f13cb70>
 7a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 7a8:	1d250000 	stcne	0, cr0, [r5, #-0]
 7ac:	11133101 	tstne	r3, r1, lsl #2
 7b0:	58061201 	stmdapl	r6, {r0, r9, ip}
 7b4:	000b590b 	andeq	r5, fp, fp, lsl #18
 7b8:	00052600 	andeq	r2, r5, r0, lsl #12
 7bc:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
 7c0:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 7c4:	3a0e0301 	bcc	3813d0 <startup-0x1fc7ec30>
 7c8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 7cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 7d0:	97184006 	ldrls	r4, [r8, -r6]
 7d4:	13011942 	movwne	r1, #6466	; 0x1942
 7d8:	05280000 	streq	r0, [r8, #-0]!
 7dc:	3a0e0300 	bcc	3813e4 <startup-0x1fc7ec1c>
 7e0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7e4:	00180213 	andseq	r0, r8, r3, lsl r2
 7e8:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
 7ec:	0b3a0e03 	bleq	e84000 <startup-0x1f17c000>
 7f0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 7f4:	00000b20 	andeq	r0, r0, r0, lsr #22
 7f8:	0300052a 	movweq	r0, #1322	; 0x52a
 7fc:	3b0b3a0e 	blcc	2cf03c <startup-0x1fd30fc4>
 800:	00134905 	andseq	r4, r3, r5, lsl #18
 804:	11010000 	mrsne	r0, (UNDEF: 1)
 808:	130e2501 	movwne	r2, #58625	; 0xe501
 80c:	1b0e030b 	blne	381440 <startup-0x1fc7ebc0>
 810:	1117550e 	tstne	r7, lr, lsl #10
 814:	00171001 	andseq	r1, r7, r1
 818:	00160200 	andseq	r0, r6, r0, lsl #4
 81c:	0b3a0e03 	bleq	e84030 <startup-0x1f17bfd0>
 820:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 824:	24030000 	strcs	r0, [r3], #-0
 828:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 82c:	000e030b 	andeq	r0, lr, fp, lsl #6
 830:	01130400 	tsteq	r3, r0, lsl #8
 834:	0b3a0b0b 	bleq	e83468 <startup-0x1f17cb98>
 838:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 83c:	0d050000 	stceq	0, cr0, [r5, #-0]
 840:	3a0e0300 	bcc	381448 <startup-0x1fc7ebb8>
 844:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 848:	000b3813 	andeq	r3, fp, r3, lsl r8
 84c:	01010600 	tsteq	r1, r0, lsl #12
 850:	13011349 	movwne	r1, #4937	; 0x1349
 854:	21070000 	mrscs	r0, (UNDEF: 7)
 858:	2f134900 	svccs	0x00134900
 85c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
 860:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 864:	0b3a0e03 	bleq	e84078 <startup-0x1f17bf88>
 868:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 86c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 870:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 874:	09000019 	stmdbeq	r0, {r0, r3, r4}
 878:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 87c:	0b3a0e03 	bleq	e84090 <startup-0x1f17bf70>
 880:	01110b3b 	tsteq	r1, fp, lsr fp
 884:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 888:	01194296 			; <UNDEFINED> instruction: 0x01194296
 88c:	0a000013 	beq	8e0 <startup-0x1ffff720>
 890:	08030034 	stmdaeq	r3, {r2, r4, r5}
 894:	0b3b0b3a 	bleq	ec3584 <startup-0x1f13ca7c>
 898:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 89c:	0b0b0000 	bleq	2c08a4 <startup-0x1fd3f75c>
 8a0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 8a4:	0c000006 	stceq	0, cr0, [r0], {6}
 8a8:	0b0b0024 	bleq	2c0940 <startup-0x1fd3f6c0>
 8ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 8b0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 8b4:	03193f01 	tsteq	r9, #1, 30
 8b8:	3b0b3a0e 	blcc	2cf0f8 <startup-0x1fd30f08>
 8bc:	1119270b 	tstne	r9, fp, lsl #14
 8c0:	40061201 	andmi	r1, r6, r1, lsl #4
 8c4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 8c8:	Address 0x000008c8 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	0e230002 	cdpeq	0, 2, cr0, cr3, cr2, {0}
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000cc4 	andcs	r0, r0, r4, asr #25
  34:	0000050e 	andeq	r0, r0, lr, lsl #10
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	144a0002 	strbne	r0, [sl], #-2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200011d4 	ldrdcs	r1, [r0], -r4
  54:	000011d2 	ldrdeq	r1, [r0], -r2
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	1ff40002 	svcne	0x00f40002
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200023a8 	andcs	r2, r0, r8, lsr #7
  74:	000004d6 	ldrdeq	r0, [r0], -r6
	...
  80:	00000024 	andeq	r0, r0, r4, lsr #32
  84:	2f6e0002 	svccs	0x006e0002
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20002880 	andcs	r2, r0, r0, lsl #17
  94:	00000120 	andeq	r0, r0, r0, lsr #2
  98:	20000000 	andcs	r0, r0, r0
  9c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000319 	andeq	r0, r0, r9, lsl r3
   4:	013c0002 	teqeq	ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	697a616e 	ldmdbvs	sl!, {r1, r2, r3, r5, r6, r8, sp, lr}^
  28:	6f442f66 	svcvs	0x00442f66
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	696e764f 	stmdbvs	lr!, {r0, r1, r2, r3, r6, r9, sl, ip, sp, lr}^
  38:	325f676e 	subscc	r6, pc, #28835840	; 0x1b80000
  3c:	6e61632f 	cdpvs	3, 6, cr6, cr1, cr15, {1}
  40:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
  44:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  48:	61657363 	cmnvs	r5, r3, ror #6
  4c:	635c7070 	cmpvs	ip, #112	; 0x70
  50:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  54:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  58:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffe90 <APBAHBPrescTable+0xdfffd3d8>
  5c:	63675c73 	cmnvs	r7, #29440	; 0x7300
  60:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  64:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  68:	6f6e2d6d 	svcvs	0x006e2d6d
  6c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  70:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  74:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  78:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  7c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  80:	00656e69 	rsbeq	r6, r5, r9, ror #28
  84:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  88:	70616573 	rsbvc	r6, r1, r3, ror r5
  8c:	6f635c70 	svcvs	0x00635c70
  90:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  94:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  98:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  9c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  a0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  a4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  a8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  ac:	61652d65 	cmnvs	r5, r5, ror #26
  b0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
  b4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  b8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
  bc:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
  c0:	61632f2e 	cmnvs	r3, lr, lsr #30
  c4:	6e692f6e 	cdpvs	15, 6, cr2, cr9, cr14, {3}
  c8:	73000063 	movwvc	r0, #99	; 0x63
  cc:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
  d0:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
  d4:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
  d8:	0100632e 	tsteq	r0, lr, lsr #6
  dc:	645f0000 	ldrbvs	r0, [pc], #-0	; e4 <startup-0x1fffff1c>
  e0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
  e4:	745f746c 	ldrbvc	r7, [pc], #-1132	; ec <startup-0x1fffff14>
  e8:	73657079 	cmnvc	r5, #121	; 0x79
  ec:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  f0:	735f0000 	cmpvc	pc, #0
  f4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
  f8:	00682e74 	rsbeq	r2, r8, r4, ror lr
  fc:	63000003 	movwvs	r0, #3
 100:	5f65726f 	svcpl	0x0065726f
 104:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 108:	00040068 	andeq	r0, r4, r8, rrx
 10c:	73797300 	cmnvc	r9, #0, 6
 110:	5f6d6574 	svcpl	0x006d6574
 114:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 118:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 11c:	00682e78 	rsbeq	r2, r8, r8, ror lr
 120:	73000004 	movwvc	r0, #4
 124:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 128:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 12c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 130:	74730000 	ldrbtvc	r0, [r3], #-0
 134:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 138:	5f787834 	svcpl	0x00787834
 13c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 140:	00040068 	andeq	r0, r4, r8, rrx
 144:	05000000 	streq	r0, [r0, #-0]
 148:	00001002 	andeq	r1, r0, r2
 14c:	01d50320 	bicseq	r0, r5, r0, lsr #6
 150:	3f693001 	svccc	0x00693001
 154:	4d4d3f69 	stclmi	15, cr3, [sp, #-420]	; 0xfffffe5c
 158:	034c3f69 	movteq	r3, #53097	; 0xcf69
 15c:	3f6be417 	svccc	0x006be417
 160:	740f034b 	strvc	r0, [pc], #-843	; 168 <startup-0x1ffffe98>
 164:	003d2f3d 	eorseq	r2, sp, sp, lsr pc
 168:	40020402 	andmi	r0, r2, r2, lsl #8
 16c:	02040200 	andeq	r0, r4, #0, 4
 170:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 174:	02003d02 	andeq	r3, r0, #2, 26	; 0x80
 178:	58060104 	stmdapl	r6, {r2, r8}
 17c:	4e5a4c06 	cdpmi	12, 5, cr4, cr10, cr6, {0}
 180:	0b032f3e 	bleq	cbe80 <startup-0x1ff34180>
 184:	3f32674a 	svccc	0x0032674a
 188:	033d694d 	teqeq	sp, #1261568	; 0x134000
 18c:	4b6a7415 	blmi	1a9d1e8 <startup-0x1e562e18>
 190:	6c661403 	cfstrdvs	mvd1, [r6], #-12
 194:	0b033f3f 	bleq	cfe98 <startup-0x1ff30168>
 198:	20790366 	rsbscs	r0, r9, r6, ror #6
 19c:	243d233d 	ldrtcs	r2, [sp], #-829	; 0xfffffcc3
 1a0:	6a740f03 	bvs	1d03db4 <startup-0x1e2fc24c>
 1a4:	6626034b 	strtvs	r0, [r6], -fp, asr #6
 1a8:	3e2dbb7c 	vmovcc.16	d13[3], fp
 1ac:	69660d03 	stmdbvs	r6!, {r0, r1, r8, sl, fp}^
 1b0:	661a034b 	ldrvs	r0, [sl], -fp, asr #6
 1b4:	2f03835d 	svccs	0x0003835d
 1b8:	034b6974 	movteq	r6, #47476	; 0xb974
 1bc:	ad6b6619 	stclge	6, cr6, [fp, #-100]!	; 0xffffff9c
 1c0:	69740c03 	ldmdbvs	r4!, {r0, r1, sl, fp}^
 1c4:	660e034b 	strvs	r0, [lr], -fp, asr #6
 1c8:	15034b69 	strne	r4, [r3, #-2921]	; 0xfffff497
 1cc:	3f345966 	svccc	0x00345966
 1d0:	033d694d 	teqeq	sp, #1261568	; 0x134000
 1d4:	34599015 	ldrbcc	r9, [r9], #-21	; 0xffffffeb
 1d8:	3d694d3f 	stclcc	13, cr4, [r9, #-252]!	; 0xffffff04
 1dc:	74019503 	strvc	r9, [r1], #-1283	; 0xfffffafd
 1e0:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; bc <startup-0x1fffff44>
 1e4:	0c033d4d 	stceq	13, cr3, [r3], {77}	; 0x4d
 1e8:	03672f66 	cmneq	r7, #408	; 0x198
 1ec:	334b6617 	movtcc	r6, #46615	; 0xb617
 1f0:	3d4d4d3f 	stclcc	13, cr4, [sp, #-252]	; 0xffffff04
 1f4:	4b661003 	blmi	1984208 <startup-0x1e67bdf8>
 1f8:	4d4d3f33 	stclmi	15, cr3, [sp, #-204]	; 0xffffff34
 1fc:	820f033d 	andhi	r0, pc, #-201326592	; 0xf4000000
 200:	4d3f334b 	ldcmi	3, cr3, [pc, #-300]!	; dc <startup-0x1fffff24>
 204:	24033d5b 	strcs	r3, [r3], #-3419	; 0xfffff2a5
 208:	5abd4b90 	bpl	fef53050 <APBAHBPrescTable+0xdef50598>
 20c:	3d223d77 	stccc	13, cr3, [r2, #-476]!	; 0xfffffe24
 210:	3f5a6726 	svccc	0x005a6726
 214:	8383cbdb 	orrhi	ip, r3, #224256	; 0x36c00
 218:	59253d22 	stmdbpl	r5!, {r1, r5, r8, sl, fp, ip, sp}
 21c:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
 220:	6769683d 			; <UNDEFINED> instruction: 0x6769683d
 224:	0367683d 	cmneq	r7, #3997696	; 0x3d0000
 228:	334bba3f 	movtcc	fp, #47679	; 0xba3f
 22c:	694d3f84 	stmdbvs	sp, {r2, r7, r8, r9, sl, fp, ip, sp}^
 230:	0a038340 	beq	e0f38 <startup-0x1ff1f0c8>
 234:	034b6a9e 	movteq	r6, #47774	; 0xba9e
 238:	4b69660c 	blmi	1a59a70 <startup-0x1e5a6590>
 23c:	4e660d03 	cdpmi	13, 6, cr0, cr6, cr3, {0}
 240:	7410033d 	ldrvc	r0, [r0], #-829	; 0xfffffcc3
 244:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 248:	10034b5b 	andne	r4, r3, fp, asr fp
 24c:	4d334b74 	vldmdbmi	r3!, {d4-<overflow reg d61>}
 250:	034b694d 	movteq	r6, #47437	; 0xb94d
 254:	334b8214 	movtcc	r8, #45588	; 0xb214
 258:	4b4d4d4d 	blmi	1353794 <startup-0x1ecac86c>
 25c:	4b821403 	blmi	fe085270 <APBAHBPrescTable+0xde0827b8>
 260:	4d4d4d33 	stclmi	13, cr4, [sp, #-204]	; 0xffffff34
 264:	8211034b 	andshi	r0, r1, #738197505	; 0x2c000001
 268:	4d4d334b 	stclmi	3, cr3, [sp, #-300]	; 0xfffffed4
 26c:	15034b4d 	strne	r4, [r3, #-2893]	; 0xfffff4b3
 270:	033e4e82 	teqeq	lr, #2080	; 0x820
 274:	4c797425 	cfldrdmi	mvd7, [r9], #-148	; 0xffffff6c
 278:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 27c:	4c797413 	cfldrdmi	mvd7, [r9], #-76	; 0xffffffb4
 280:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 284:	4c79740f 	cfldrdmi	mvd7, [r9], #-60	; 0xffffffc4
 288:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 28c:	4c797427 	cfldrdmi	mvd7, [r9], #-156	; 0xffffff64
 290:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 294:	4c797420 	cfldrdmi	mvd7, [r9], #-128	; 0xffffff80
 298:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 29c:	4c79741d 	cfldrdmi	mvd7, [r9], #-116	; 0xffffff8c
 2a0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2a4:	4c797410 	cfldrdmi	mvd7, [r9], #-64	; 0xffffffc0
 2a8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2ac:	4c79740c 	cfldrdmi	mvd7, [r9], #-48	; 0xffffffd0
 2b0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2b4:	4c787424 	cfldrdmi	mvd7, [r8], #-144	; 0xffffff70
 2b8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2bc:	4c78741d 	cfldrdmi	mvd7, [r8], #-116	; 0xffffff8c
 2c0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2c4:	4c787425 	cfldrdmi	mvd7, [r8], #-148	; 0xffffff6c
 2c8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2cc:	4c787414 	cfldrdmi	mvd7, [r8], #-80	; 0xffffffb0
 2d0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2d4:	4c787410 	cfldrdmi	mvd7, [r8], #-64	; 0xffffffc0
 2d8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2dc:	4c787428 	cfldrdmi	mvd7, [r8], #-160	; 0xffffff60
 2e0:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2e4:	4c787421 	cfldrdmi	mvd7, [r8], #-132	; 0xffffff7c
 2e8:	03761e6c 	cmneq	r6, #108, 28	; 0x6c0
 2ec:	4d947422 	cfldrsmi	mvf7, [r4, #136]	; 0x88
 2f0:	03ae1e97 			; <UNDEFINED> instruction: 0x03ae1e97
 2f4:	2f676617 	svccs	0x00676617
 2f8:	3e59502f 	cdpcc	0, 5, cr5, cr9, cr15, {1}
 2fc:	404e3e4c 	submi	r3, lr, ip, asr #28
 300:	4d5c7659 	ldclmi	6, cr7, [ip, #-356]	; 0xfffffe9c
 304:	660a033d 			; <UNDEFINED> instruction: 0x660a033d
 308:	11037530 	tstne	r3, r0, lsr r5
 30c:	68506758 	ldmdavs	r0, {r3, r4, r6, r8, r9, sl, sp, lr}^
 310:	033d4d5c 	teqeq	sp, #92, 26	; 0x1700
 314:	4b6c6611 	blmi	1b19b60 <startup-0x1e4e64a0>
 318:	01000602 	tsteq	r0, r2, lsl #12
 31c:	00022a01 	andeq	r2, r2, r1, lsl #20
 320:	3e000200 	cdpcc	2, 0, cr0, cr0, cr0, {0}
 324:	02000001 	andeq	r0, r0, #1
 328:	0d0efb01 	vstreq	d15, [lr, #-4]
 32c:	01010100 	mrseq	r0, (UNDEF: 17)
 330:	00000001 	andeq	r0, r0, r1
 334:	01000001 	tsteq	r0, r1
 338:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff8fd <APBAHBPrescTable+0xdfffce45>
 33c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 340:	7a616e2f 	bvc	185bc04 <startup-0x1e7a43fc>
 344:	442f6669 	strtmi	r6, [pc], #-1641	; 34c <startup-0x1ffffcb4>
 348:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 34c:	73746e65 	cmnvc	r4, #1616	; 0x650
 350:	6e764f2f 	cdpvs	15, 7, cr4, cr6, cr15, {1}
 354:	5f676e69 	svcpl	0x00676e69
 358:	61632f32 	cmnvs	r3, r2, lsr pc
 35c:	72732f6e 	rsbsvc	r2, r3, #440	; 0x1b8
 360:	3a630063 	bcc	18c04f4 <startup-0x1e73fb0c>
 364:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 368:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 36c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 370:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 374:	6f6f745c 	svcvs	0x006f745c
 378:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 37c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 380:	615c6d72 	cmpvs	ip, r2, ror sp
 384:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 388:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 38c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 390:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 394:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 398:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 39c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 3a0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 3a4:	61657363 	cmnvs	r5, r3, ror #6
 3a8:	635c7070 	cmpvs	ip, #112	; 0x70
 3ac:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 3b0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 3b4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1ec <startup-0x1ffffe14>
 3b8:	63675c73 	cmnvs	r7, #29440	; 0x7300
 3bc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 3c0:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 3c4:	6f6e2d6d 	svcvs	0x006e2d6d
 3c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 3cc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 3d0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 3d4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 3d8:	00737973 	rsbseq	r7, r3, r3, ror r9
 3dc:	632f2e2e 			; <UNDEFINED> instruction: 0x632f2e2e
 3e0:	692f6e61 	stmdbvs	pc!, {r0, r5, r6, r9, sl, fp, sp, lr}	; <UNPREDICTABLE>
 3e4:	0000636e 	andeq	r6, r0, lr, ror #6
 3e8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 3ec:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 3f0:	70675f78 	rsbvc	r5, r7, r8, ror pc
 3f4:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
 3f8:	00000100 	andeq	r0, r0, r0, lsl #2
 3fc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 400:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 404:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 408:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 40c:	00000200 	andeq	r0, r0, r0, lsl #4
 410:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 414:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 418:	00030068 	andeq	r0, r3, r8, rrx
 41c:	726f6300 	rsbvc	r6, pc, #0, 6
 420:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 424:	00682e34 	rsbeq	r2, r8, r4, lsr lr
 428:	73000004 	movwvc	r0, #4
 42c:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
 430:	74735f6d 	ldrbtvc	r5, [r3], #-3949	; 0xfffff093
 434:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 438:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 43c:	00040068 	andeq	r0, r4, r8, rrx
 440:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 444:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 448:	682e7878 	stmdavs	lr!, {r3, r4, r5, r6, fp, ip, sp, lr}
 44c:	00000400 	andeq	r0, r0, r0, lsl #8
 450:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 454:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 458:	70675f78 	rsbvc	r5, r7, r8, ror pc
 45c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 460:	00000400 	andeq	r0, r0, r0, lsl #8
 464:	02050000 	andeq	r0, r5, #0
 468:	20000cc4 	andcs	r0, r0, r4, asr #25
 46c:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
 470:	034b4c4e 	movteq	r4, #48206	; 0xbc4e
 474:	4a034a38 	bmi	d2d5c <startup-0x1ff2d2a4>
 478:	034b4c20 	movteq	r4, #48160	; 0xbc20
 47c:	4f034a33 	svcmi	0x00034a33
 480:	034b4c20 	movteq	r4, #48160	; 0xbc20
 484:	54034a2e 	strpl	r4, [r3], #-2606	; 0xfffff5d2
 488:	034b4c20 	movteq	r4, #48160	; 0xbc20
 48c:	59034a29 	stmdbpl	r3, {r0, r3, r5, r9, fp, lr}
 490:	034b4c20 	movteq	r4, #48160	; 0xbc20
 494:	5e034a24 	vmlapl.f32	s8, s6, s9
 498:	034b4c20 	movteq	r4, #48160	; 0xbc20
 49c:	63034a1f 	movwvs	r4, #14879	; 0x3a1f
 4a0:	034b4c20 	movteq	r4, #48160	; 0xbc20
 4a4:	68034a1a 	stmdavs	r3, {r1, r3, r4, r9, fp, lr}
 4a8:	034b4c20 	movteq	r4, #48160	; 0xbc20
 4ac:	6e034a15 			; <UNDEFINED> instruction: 0x6e034a15
 4b0:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 4b4:	7303660f 	movwvc	r6, #13839	; 0x360f
 4b8:	03674c20 	cmneq	r7, #32, 24	; 0x2000
 4bc:	7a03660a 	bvc	d9cec <startup-0x1ff26314>
 4c0:	69674c20 	stmdbvs	r7!, {r5, sl, fp, lr}^
 4c4:	90080c03 	andls	r0, r8, r3, lsl #24
 4c8:	660a0359 			; <UNDEFINED> instruction: 0x660a0359
 4cc:	4c5a5a3e 	vmovmi	r5, sl, s29, s30
 4d0:	0200bcad 	andeq	fp, r0, #44288	; 0xad00
 4d4:	4a060104 	bmi	1808ec <startup-0x1fe7f714>
 4d8:	c0ad5006 	adcgt	r5, sp, r6
 4dc:	00bbccad 	adcseq	ip, fp, sp, lsr #25
 4e0:	03020402 	movweq	r0, #9218	; 0x2402
 4e4:	0200ba62 	andeq	fp, r0, #401408	; 0x62000
 4e8:	3c060104 	stfccs	f0, [r6], {4}
 4ec:	3c210306 	stccc	3, cr0, [r1], #-24	; 0xffffffe8
 4f0:	3d3d4c52 	ldccc	12, cr4, [sp, #-328]!	; 0xfffffeb8
 4f4:	033d3d3d 	teqeq	sp, #3904	; 0xf40
 4f8:	42757410 	rsbsmi	r7, r5, #16, 8	; 0x10000000
 4fc:	3e4c3e5a 	mcrcc	14, 2, r3, cr12, cr10, {2}
 500:	1c033d3e 	stcne	13, cr3, [r3], {62}	; 0x3e
 504:	6850754a 	ldmdavs	r0, {r1, r3, r6, r8, sl, ip, sp, lr}^
 508:	033d4c5c 	teqeq	sp, #92, 24	; 0x5c00
 50c:	3d4e4a0a 	vstrcc	s9, [lr, #-40]	; 0xffffffd8
 510:	754a0c03 	strbvc	r0, [sl, #-3075]	; 0xfffff3fd
 514:	4c5c6850 	mrrcmi	8, 5, r6, ip, cr0
 518:	4a0a033d 	bmi	281214 <startup-0x1fd7edec>
 51c:	0f033d4e 	svceq	0x00033d4e
 520:	034b794a 	movteq	r7, #47434	; 0xb94a
 524:	4b794a0f 	blmi	1e52d68 <startup-0x1e1ad298>
 528:	c04a1003 	subgt	r1, sl, r3
 52c:	4c1e504c 	ldcmi	0, cr5, [lr], {76}	; 0x4c
 530:	784a0b03 	stmdavc	sl, {r0, r1, r8, r9, fp}^
 534:	4a0b034b 	bmi	2c1268 <startup-0x1fd3ed98>
 538:	ce037578 	cfrshl64gt	mvdx3, mvdx8, r7
 53c:	2fbb4a00 	svccs	0x00bb4a00
 540:	c9089f35 	stmdbgt	r8, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 544:	04029fbb 	streq	r9, [r2], #-4027	; 0xfffff045
 548:	8d010100 	stfhis	f0, [r1, #-0]
 54c:	02000003 	andeq	r0, r0, #3
 550:	00013c00 	andeq	r3, r1, r0, lsl #24
 554:	fb010200 	blx	40d5e <startup-0x1ffbf2a2>
 558:	01000d0e 	tsteq	r0, lr, lsl #26
 55c:	00010101 	andeq	r0, r1, r1, lsl #2
 560:	00010000 	andeq	r0, r1, r0
 564:	3a430100 	bcc	10c096c <startup-0x1ef3f694>
 568:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 56c:	6e2f7372 	mcrvs	3, 1, r7, cr15, cr2, {3}
 570:	66697a61 	strbtvs	r7, [r9], -r1, ror #20
 574:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 578:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 57c:	4f2f7374 	svcmi	0x002f7374
 580:	6e696e76 	mcrvs	14, 3, r6, cr9, cr6, {3}
 584:	2f325f67 	svccs	0x00325f67
 588:	2f6e6163 	svccs	0x006e6163
 58c:	00637273 	rsbeq	r7, r3, r3, ror r2
 590:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 594:	70616573 	rsbvc	r6, r1, r3, ror r5
 598:	6f635c70 	svcvs	0x00635c70
 59c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 5a0:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 5a4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 5a8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 5ac:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 5b0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 5b4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 5b8:	61652d65 	cmnvs	r5, r5, ror #26
 5bc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 5c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 5c4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 5c8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 5cc:	6300656e 	movwvs	r6, #1390	; 0x56e
 5d0:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 5d4:	70706165 	rsbsvc	r6, r0, r5, ror #2
 5d8:	646f635c 	strbtvs	r6, [pc], #-860	; 5e0 <startup-0x1ffffa20>
 5dc:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 5e0:	6f745c65 	svcvs	0x00745c65
 5e4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 5e8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 5ec:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 5f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 5f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 5f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 5fc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 600:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 604:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 608:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
 60c:	6e61632f 	cdpvs	3, 6, cr6, cr1, cr15, {1}
 610:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 614:	74730000 	ldrbtvc	r0, [r3], #-0
 618:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 61c:	5f787834 	svcpl	0x00787834
 620:	2e6e6163 	powcsez	f6, f6, f3
 624:	00010063 	andeq	r0, r1, r3, rrx
 628:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 62c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 630:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 634:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 638:	00020068 	andeq	r0, r2, r8, rrx
 63c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 640:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 644:	0300682e 	movweq	r6, #2094	; 0x82e
 648:	6f630000 	svcvs	0x00630000
 64c:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 650:	682e346d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, ip, sp}
 654:	00000400 	andeq	r0, r0, r0, lsl #8
 658:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 65c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 660:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 664:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 668:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 66c:	74730000 	ldrbtvc	r0, [r3], #-0
 670:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 674:	2e787834 	mrccs	8, 3, r7, cr8, cr4, {1}
 678:	00040068 	andeq	r0, r4, r8, rrx
 67c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 680:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
 684:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
 688:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
 68c:	00000400 	andeq	r0, r0, r0, lsl #8
 690:	02050000 	andeq	r0, r5, #0
 694:	200011d4 	ldrdcs	r1, [r0], -r4
 698:	0101a703 	tsteq	r1, r3, lsl #14
 69c:	03684d4e 	cmneq	r8, #4992	; 0x1380
 6a0:	681c6609 	ldmdavs	ip, {r0, r3, r9, sl, sp, lr}
 6a4:	740c0368 	strvc	r0, [ip], #-872	; 0xfffffc98
 6a8:	10034b59 	andne	r4, r3, r9, asr fp
 6ac:	2269772e 	rsbcs	r7, r9, #12058624	; 0xb80000
 6b0:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 6b4:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 6b8:	4c5d6850 	mrrcmi	8, 5, r6, sp, cr0
 6bc:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
 6c0:	78784c78 	ldmdavc	r8!, {r3, r4, r5, r6, sl, fp, lr}^
 6c4:	4c78784c 	ldclmi	8, cr7, [r8], #-304	; 0xfffffed0
 6c8:	784c7878 	stmdavc	ip, {r3, r4, r5, r6, fp, ip, sp, lr}^
 6cc:	223b3d78 	eorscs	r3, fp, #120, 26	; 0x1e00
 6d0:	223b223b 	eorscs	r2, fp, #-1342177277	; 0xb0000003
 6d4:	77351d3b 			; <UNDEFINED> instruction: 0x77351d3b
 6d8:	003a2230 	eorseq	r2, sl, r0, lsr r2
 6dc:	06010402 	streq	r0, [r1], -r2, lsl #8
 6e0:	68500666 	ldmdavs	r0, {r1, r2, r5, r6, r9, sl}^
 6e4:	033d4f5c 	teqeq	sp, #92, 30	; 0x170
 6e8:	364b740a 	strbcc	r7, [fp], -sl, lsl #8
 6ec:	4dafa169 	stfmid	f2, [pc, #420]!	; 898 <startup-0x1ffff768>
 6f0:	4b3a3db1 	blmi	e8fdbc <startup-0x1f170244>
 6f4:	3a3d512d 	bcc	f54bb0 <startup-0x1f0ab450>
 6f8:	4d6b2d4b 	stclmi	13, cr2, [fp, #-300]!	; 0xfffffed4
 6fc:	4b3a3da1 	blmi	e8fd88 <startup-0x1f170278>
 700:	3a3d4f2d 	bcc	f543bc <startup-0x1f0abc44>
 704:	4d6c2d4b 	stclmi	13, cr2, [ip, #-300]!	; 0xfffffed4
 708:	af4da2bf 	svcge	0x004da2bf
 70c:	a24ca24d 	subge	sl, ip, #-805306364	; 0xd0000004
 710:	3f4e6ead 	svccc	0x004e6ead
 714:	3f3f3f3f 	svccc	0x003f3f3f
 718:	3f3f3f3f 	svccc	0x003f3f3f
 71c:	6b523d3f 	blvs	148fc20 <startup-0x1eb703e0>
 720:	adbd9fa1 	ldcge	15, cr9, [sp, #644]!	; 0x284
 724:	79820c03 	stmibvc	r2, {r0, r1, sl, fp}
 728:	681e7b4d 	ldmdavs	lr, {r0, r2, r3, r6, r8, r9, fp, ip, sp, lr}
 72c:	78740f03 	ldmdavc	r4!, {r0, r1, r8, r9, sl, fp}^
 730:	bbbb694d 	bllt	feedac6c <APBAHBPrescTable+0xdeed81b4>
 734:	03ba0c03 			; <UNDEFINED> instruction: 0x03ba0c03
 738:	ad772079 	ldclge	0, cr2, [r7, #-484]!	; 0xfffffe1c
 73c:	1e03aead 	cdpne	14, 0, cr10, cr3, cr13, {5}
 740:	92525966 	subsls	r5, r2, #1671168	; 0x198000
 744:	925a925a 	subsls	r9, sl, #-1610612731	; 0xa0000005
 748:	e5694d5c 	strb	r4, [r9, #-3420]!	; 0xfffff2a4
 74c:	962d9f4d 	strtls	r9, [sp], -sp, asr #30
 750:	2d222d9f 	stccs	13, cr2, [r2, #-636]!	; 0xfffffd84
 754:	08757a1f 	ldmdaeq	r5!, {r0, r1, r2, r3, r4, r9, fp, ip, sp, lr}^
 758:	3d3f082f 	ldccc	8, cr0, [pc, #-188]!	; 6a4 <startup-0x1ffff95c>
 75c:	223b223b 	eorscs	r2, fp, #-1342177277	; 0xb0000003
 760:	782c3039 	stmdavc	ip!, {r0, r3, r4, r5, ip, sp}
 764:	3b223b3d 	blcc	88f460 <startup-0x1f770ba0>
 768:	2c303922 			; <UNDEFINED> instruction: 0x2c303922
 76c:	033dd879 	teqeq	sp, #7929856	; 0x790000
 770:	34754a0a 	ldrbtcc	r4, [r5], #-2570	; 0xfffff5f6
 774:	59225985 	stmdbpl	r2!, {r0, r2, r7, r8, fp, ip, lr}
 778:	2f225922 	svccs	0x00225922
 77c:	2f930822 	svccs	0x00930822
 780:	2f212f22 	svccs	0x00212f22
 784:	2f222f21 	svccs	0x00222f21
 788:	2f212f21 	svccs	0x00212f21
 78c:	2f222f21 	svccs	0x00222f21
 790:	12080903 	andne	r0, r8, #49152	; 0xc000
 794:	82090379 	andhi	r0, r9, #-469762047	; 0xe4000001
 798:	67207903 	strvs	r7, [r0, -r3, lsl #18]!
 79c:	75217521 	strvc	r7, [r1, #-1313]!	; 0xfffffadf
 7a0:	4a1f0324 	bmi	7c1438 <startup-0x1f83ebc8>
 7a4:	cc4cbb95 	mcrrgt	11, 9, fp, ip, cr5
 7a8:	cad8cabd 	bgt	ff6332a4 <APBAHBPrescTable+0xdf6307ec>
 7ac:	c9c9c9bb 	stmibgt	r9, {r0, r1, r3, r4, r5, r7, r8, fp, lr, pc}^
 7b0:	cbc9c9bb 	blgt	ff272ea4 <APBAHBPrescTable+0xdf2703ec>
 7b4:	681e6d4c 	ldmdavs	lr, {r2, r3, r6, r8, sl, fp, sp, lr}
 7b8:	794a0903 	stmdbvc	sl, {r0, r1, r8, fp}^
 7bc:	681e6d4c 	ldmdavs	lr, {r2, r3, r6, r8, sl, fp, sp, lr}
 7c0:	754a0903 	strbvc	r0, [sl, #-2307]	; 0xfffff6fd
 7c4:	4c924c4e 	ldcmi	12, cr4, [r2], {78}	; 0x4e
 7c8:	033d4c94 	teqeq	sp, #148, 24	; 0x9400
 7cc:	4d754a20 	vldmdbmi	r5!, {s9-s40}
 7d0:	22854d34 	addcs	r4, r5, #52, 26	; 0xd00
 7d4:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 7d8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 7dc:	5b5c6840 	blpl	171a8e4 <startup-0x1e8e571c>
 7e0:	3a22774d 	bcc	89e51c <startup-0x1f761ae4>
 7e4:	01040200 	mrseq	r0, R12_usr
 7e8:	40065806 	andmi	r5, r6, r6, lsl #16
 7ec:	4d5b5c5a 	ldclmi	12, cr5, [fp, #-360]	; 0xfffffe98
 7f0:	003a2285 	eorseq	r2, sl, r5, lsl #5
 7f4:	06010402 	streq	r0, [r1], -r2, lsl #8
 7f8:	68400666 	stmdavs	r0, {r1, r2, r5, r6, r9, sl}^
 7fc:	3d4d5d5c 	stclcc	13, cr5, [sp, #-368]	; 0xfffffe90
 800:	85504b6e 	ldrbhi	r4, [r0, #-2926]	; 0xfffff492
 804:	523d4d69 	eorspl	r4, sp, #6720	; 0x1a40
 808:	77502f4b 	ldrbvc	r2, [r0, -fp, asr #30]
 80c:	02003a22 	andeq	r3, r0, #139264	; 0x22000
 810:	66060104 	strvs	r0, [r6], -r4, lsl #2
 814:	4d694006 	stclmi	0, cr4, [r9, #-24]!	; 0xffffffe8
 818:	6628033d 			; <UNDEFINED> instruction: 0x6628033d
 81c:	3d85504b 	stccc	0, cr5, [r5, #300]	; 0x12c
 820:	4b4a0e03 	blmi	1284034 <startup-0x1ed7bfcc>
 824:	032f5b50 			; <UNDEFINED> instruction: 0x032f5b50
 828:	504b4a09 	subpl	r4, fp, r9, lsl #20
 82c:	c2032f5b 	andgt	r2, r3, #364	; 0x16c
 830:	4d7a4a01 	vldmdbmi	sl!, {s9}
 834:	03761e6d 	cmneq	r6, #1744	; 0x6d0
 838:	51594a18 	cmppl	r9, r8, lsl sl
 83c:	5b5d775b 	blpl	175e5b0 <startup-0x1e8a1a50>
 840:	5b5d775b 	blpl	175e5b4 <startup-0x1e8a1a4c>
 844:	5b5d775b 	blpl	175e5b8 <startup-0x1e8a1a48>
 848:	5e5d775b 	mrcpl	7, 2, r7, cr13, cr11, {2}
 84c:	3d4e5d77 	stclcc	13, cr5, [lr, #-476]	; 0xfffffe24
 850:	594a1403 	stmdbpl	sl, {r0, r1, sl, ip}^
 854:	1b034d33 	blne	d3d28 <startup-0x1ff2c2d8>
 858:	2069033c 	rsbcs	r0, r9, ip, lsr r3
 85c:	12035b4c 	andne	r5, r3, #76, 22	; 0x13000
 860:	2070033c 	rsbscs	r0, r0, ip, lsr r3
 864:	3c0d035b 	stccc	3, cr0, [sp], {91}	; 0x5b
 868:	5b207503 	blpl	81dc7c <startup-0x1f7e2384>
 86c:	033f1d44 	teqeq	pc, #68, 26	; 0x1100
 870:	50597418 	subspl	r7, r9, r8, lsl r4
 874:	163b0269 	ldrtne	r0, [fp], -r9, ror #4
 878:	239f23ad 	orrscs	r2, pc, #-1275068414	; 0xb4000002
 87c:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
 880:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
 884:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
 888:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
 88c:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
 890:	239f239f 	orrscs	r2, pc, #2080374786	; 0x7c000002
 894:	3d4e344b 	cfstrdcc	mvd3, [lr, #-300]	; 0xfffffed4
 898:	5d661603 	stclpl	6, cr1, [r6, #-12]!
 89c:	03f23b03 	mvnseq	r3, #3072	; 0xc00
 8a0:	3b032045 	blcc	c89bc <startup-0x1ff37644>
 8a4:	2045034a 	subcs	r0, r5, sl, asr #6
 8a8:	03f23b03 	mvnseq	r3, #3072	; 0xc00
 8ac:	3b032045 	blcc	c89c8 <startup-0x1ff37638>
 8b0:	204903ba 	strhcs	r0, [r9], #-58	; 0xffffffc6
 8b4:	233d233d 	teqcs	sp, #-201326592	; 0xf4000000
 8b8:	233d233d 	teqcs	sp, #-201326592	; 0xf4000000
 8bc:	233d233d 	teqcs	sp, #-201326592	; 0xf4000000
 8c0:	233e233d 	teqcs	lr, #-201326592	; 0xf4000000
 8c4:	233e233e 	teqcs	lr, #-134217728	; 0xf8000000
 8c8:	3e233d3e 	mcrcc	13, 1, r3, cr3, cr14, {1}
 8cc:	0c03243e 	cfstrseq	mvf2, [r3], {62}	; 0x3e
 8d0:	4d4c5974 	vstrmi.16	s11, [ip, #-232]	; 0xffffff18	; <UNPREDICTABLE>
 8d4:	023d4c5d 	eorseq	r4, sp, #23808	; 0x5d00
 8d8:	01010004 	tsteq	r1, r4
 8dc:	0000023c 	andeq	r0, r0, ip, lsr r2
 8e0:	01600002 	cmneq	r0, r2
 8e4:	01020000 	mrseq	r0, (UNDEF: 2)
 8e8:	000d0efb 	strdeq	r0, [sp], -fp
 8ec:	01010101 	tsteq	r1, r1, lsl #2
 8f0:	01000000 	mrseq	r0, (UNDEF: 0)
 8f4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 8f8:	61632f2e 	cmnvs	r3, lr, lsr #30
 8fc:	6e692f6e 	cdpvs	15, 6, cr2, cr9, cr14, {3}
 900:	3a430063 	bcc	10c0a94 <startup-0x1ef3f56c>
 904:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 908:	6e2f7372 	mcrvs	3, 1, r7, cr15, cr2, {3}
 90c:	66697a61 	strbtvs	r7, [r9], -r1, ror #20
 910:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 914:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 918:	4f2f7374 	svcmi	0x002f7374
 91c:	6e696e76 	mcrvs	14, 3, r6, cr9, cr6, {3}
 920:	2f325f67 	svccs	0x00325f67
 924:	2f6e6163 	svccs	0x006e6163
 928:	00637273 	rsbeq	r7, r3, r3, ror r2
 92c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 930:	70616573 	rsbvc	r6, r1, r3, ror r5
 934:	6f635c70 	svcvs	0x00635c70
 938:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 93c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 940:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 944:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 948:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 94c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 950:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 954:	61652d65 	cmnvs	r5, r5, ror #26
 958:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 95c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 960:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 964:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 968:	6300656e 	movwvs	r6, #1390	; 0x56e
 96c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 970:	70706165 	rsbsvc	r6, r0, r5, ror #2
 974:	646f635c 	strbtvs	r6, [pc], #-860	; 97c <startup-0x1ffff684>
 978:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 97c:	6f745c65 	svcvs	0x00745c65
 980:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 984:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 988:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 98c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 990:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 994:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 998:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 99c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 9a0:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 9a4:	63000073 	movwvs	r0, #115	; 0x73
 9a8:	5f65726f 	svcpl	0x0065726f
 9ac:	2e346d63 	cdpcs	13, 3, cr6, cr4, cr3, {3}
 9b0:	00010068 	andeq	r0, r1, r8, rrx
 9b4:	6e616300 	cdpvs	3, 6, cr6, cr1, cr0, {0}
 9b8:	0200632e 	andeq	r6, r0, #-1207959552	; 0xb8000000
 9bc:	6f630000 	svcvs	0x00630000
 9c0:	635f6572 	cmpvs	pc, #478150656	; 0x1c800000
 9c4:	6e75466d 	cdpvs	6, 7, cr4, cr5, cr13, {3}
 9c8:	00682e63 	rsbeq	r2, r8, r3, ror #28
 9cc:	63000001 	movwvs	r0, #1
 9d0:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
 9d4:	00000100 	andeq	r0, r0, r0, lsl #2
 9d8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 9dc:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
 9e0:	00682e78 	rsbeq	r2, r8, r8, ror lr
 9e4:	5f000001 	svcpl	0x00000001
 9e8:	61666564 	cmnvs	r6, r4, ror #10
 9ec:	5f746c75 	svcpl	0x00746c75
 9f0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 9f4:	00682e73 	rsbeq	r2, r8, r3, ror lr
 9f8:	5f000003 	svcpl	0x00000003
 9fc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 a00:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 a04:	00000400 	andeq	r0, r0, r0, lsl #8
 a08:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
 a0c:	735f6d65 	cmpvc	pc, #6464	; 0x1940
 a10:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 a14:	78783466 	ldmdavc	r8!, {r1, r2, r5, r6, sl, ip, sp}^
 a18:	0100682e 	tsteq	r0, lr, lsr #16
 a1c:	74730000 	ldrbtvc	r0, [r3], #-0
 a20:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 a24:	5f787834 	svcpl	0x00787834
 a28:	6f697067 	svcvs	0x00697067
 a2c:	0100682e 	tsteq	r0, lr, lsr #16
 a30:	74730000 	ldrbtvc	r0, [r3], #-0
 a34:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
 a38:	5f787834 	svcpl	0x00787834
 a3c:	2e6e6163 	powcsez	f6, f6, f3
 a40:	00010068 	andeq	r0, r1, r8, rrx
 a44:	05000000 	streq	r0, [r0, #-0]
 a48:	0023a802 	eoreq	sl, r3, r2, lsl #16
 a4c:	0bbc0320 	bleq	fef016d4 <APBAHBPrescTable+0xdeefec1c>
 a50:	03e56801 	mvneq	r6, #65536	; 0x10000
 a54:	757400d0 	ldrbvc	r0, [r4, #-208]!	; 0xffffff30
 a58:	d71fcb4b 	ldrle	ip, [pc, -fp, asr #22]
 a5c:	fd030204 	stc2	2, cr0, [r3, #-16]
 a60:	5a4e9073 	bpl	13a4c34 <startup-0x1ec5b3cc>
 a64:	4f674b4b 	svcmi	0x00674b4b
 a68:	3d596867 	ldclcc	8, cr6, [r9, #-412]	; 0xfffffe64
 a6c:	753d3d3d 	ldrvc	r3, [sp, #-3389]!	; 0xfffff2c3
 a70:	3d3d3d59 	ldccc	13, cr3, [sp, #-356]!	; 0xfffffe9c
 a74:	3d4b763d 	stclcc	6, cr7, [fp, #-244]	; 0xffffff0c
 a78:	763d3d3d 			; <UNDEFINED> instruction: 0x763d3d3d
 a7c:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
 a80:	3d4b6a3d 	vstrcc	s13, [fp, #-244]	; 0xffffff0c
 a84:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 a88:	4d3d3d3d 	ldcmi	13, cr3, [sp, #-244]!	; 0xffffff0c
 a8c:	3d3d3d4b 	ldccc	13, cr3, [sp, #-300]!	; 0xfffffed4
 a90:	3d433d3d 	stclcc	13, cr3, [r3, #-244]	; 0xffffff0c
 a94:	833e3d3d 	teqhi	lr, #3904	; 0xf40
 a98:	03044c5a 	movweq	r4, #19546	; 0x4c5a
 a9c:	5803bf03 	stmdapl	r3, {r0, r1, r8, r9, sl, fp, ip, sp, pc}
 aa0:	c4030204 	strgt	r0, [r3], #-516	; 0xfffffdfc
 aa4:	3d4b3c7c 	stclcc	12, cr3, [fp, #-496]	; 0xfffffe10
 aa8:	914edb67 	cmpls	lr, r7, ror #22
 aac:	839f8431 	orrshi	r8, pc, #822083584	; 0x31000000
 ab0:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
 ab4:	02005a03 	andeq	r5, r0, #12288	; 0x3000
 ab8:	00c60304 	sbceq	r0, r6, r4, lsl #6
 abc:	06010402 	streq	r0, [r1], -r2, lsl #8
 ac0:	00780658 	rsbseq	r0, r8, r8, asr r6
 ac4:	21010402 	tstcs	r1, r2, lsl #8
 ac8:	4d304c95 	ldcmi	12, cr4, [r0, #-596]!	; 0xfffffdac
 acc:	4b3d3d9f 	blmi	f50150 <startup-0x1f0afeb0>
 ad0:	02005a3d 	andeq	r5, r0, #249856	; 0x3d000
 ad4:	00590304 	subseq	r0, r9, r4, lsl #6
 ad8:	c7030402 	strgt	r0, [r3, -r2, lsl #8]
 adc:	01040200 	mrseq	r0, R12_usr
 ae0:	78065806 	stmdavc	r6, {r1, r2, fp, ip, lr}
 ae4:	034b4bae 	movteq	r4, #48046	; 0xbbae
 ae8:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
 aec:	03210104 			; <UNDEFINED> instruction: 0x03210104
 af0:	00688215 	rsbeq	r8, r8, r5, lsl r2
 af4:	06010402 	streq	r0, [r1], -r2, lsl #8
 af8:	59750620 	ldmdbpl	r5!, {r5, r9, sl}^
 afc:	33683d4b 	cmncc	r8, #4800	; 0x12c0
 b00:	5a4b2f75 	bpl	12cc8dc <startup-0x1ed33724>
 b04:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 b08:	06200601 	strteq	r0, [r0], -r1, lsl #12
 b0c:	4b684b76 	blmi	1a138ec <startup-0x1e5ec714>
 b10:	4c4c7321 	mcrrmi	3, 2, r7, ip, cr1
 b14:	023e4b4c 	eorseq	r4, lr, #76, 22	; 0x13000
 b18:	01010004 	tsteq	r1, r4
 b1c:	000000c0 	andeq	r0, r0, r0, asr #1
 b20:	00670002 	rsbeq	r0, r7, r2
 b24:	01020000 	mrseq	r0, (UNDEF: 2)
 b28:	000d0efb 	strdeq	r0, [sp], -fp
 b2c:	01010101 	tsteq	r1, r1, lsl #2
 b30:	01000000 	mrseq	r0, (UNDEF: 0)
 b34:	43010000 	movwmi	r0, #4096	; 0x1000
 b38:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 b3c:	2f737265 	svccs	0x00737265
 b40:	697a616e 	ldmdbvs	sl!, {r1, r2, r3, r5, r6, r8, sp, lr}^
 b44:	6f442f66 	svcvs	0x00442f66
 b48:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 b4c:	2f73746e 	svccs	0x0073746e
 b50:	696e764f 	stmdbvs	lr!, {r0, r1, r2, r3, r6, r9, sl, ip, sp, lr}^
 b54:	325f676e 	subscc	r6, pc, #28835840	; 0x1b80000
 b58:	616c412f 	cmnvs	ip, pc, lsr #2
 b5c:	435f6d72 	cmpmi	pc, #7296	; 0x1c80
 b60:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 b64:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 b68:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
 b6c:	6e61632f 	cdpvs	3, 6, cr6, cr1, cr15, {1}
 b70:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 b74:	74730000 	ldrbtvc	r0, [r3], #-0
 b78:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 b7c:	00632e70 	rsbeq	r2, r3, r0, ror lr
 b80:	63000001 	movwvs	r0, #1
 b84:	682e6e61 	stmdavs	lr!, {r0, r5, r6, r9, sl, fp, sp, lr}
 b88:	00000200 	andeq	r0, r0, r0, lsl #4
 b8c:	02050000 	andeq	r0, r5, #0
 b90:	20002880 	andcs	r2, r0, r0, lsl #17
 b94:	674d3d1a 	smlaldvs	r3, sp, sl, sp
 b98:	934b1f5b 	movtls	r1, #48987	; 0xbf5b
 b9c:	4d4c4c3d 	stclmi	12, cr4, [ip, #-244]	; 0xffffff0c
 ba0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 ba4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 ba8:	4b4d4c3d 	blmi	1353ca4 <startup-0x1ecac35c>
 bac:	03040200 	movweq	r0, #16896	; 0x4200
 bb0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 bb4:	02009d03 	andeq	r9, r0, #3, 26	; 0xc0
 bb8:	3c060104 	stfccs	f0, [r6], {4}
 bbc:	3d3d3e06 	ldccc	14, cr3, [sp, #-24]!	; 0xffffffe8
 bc0:	03594b4b 	cmpeq	r9, #76800	; 0x12c00
 bc4:	10024a78 	andne	r4, r2, r8, ror sl
 bc8:	00010100 	andeq	r0, r1, r0, lsl #2
 bcc:	00000205 	andeq	r0, r0, r5, lsl #4
 bd0:	3b032000 	blcc	c8bd8 <startup-0x1ff37428>
 bd4:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
 bd8:	025e0104 	subseq	r0, lr, #4, 2
 bdc:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5f434352 	svcpl	0x00434352
       4:	4b4c4348 	blmi	1310d2c <startup-0x1ecef2d4>
       8:	43435200 	movtmi	r5, #12800	; 0x3200
       c:	45534c5f 	ldrbmi	r4, [r3, #-3167]	; 0xfffff3a1
      10:	42504100 	subsmi	r4, r0, #0, 2
      14:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
      18:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
      1c:	505f4343 	subspl	r4, pc, r3, asr #6
      20:	41534c4c 	cmpmi	r3, ip, asr #24
      24:	646d4349 	strbtvs	r4, [sp], #-841	; 0xfffffcb7
      28:	43435200 	movtmi	r5, #12800	; 0x3200
      2c:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
      30:	44494153 	strbmi	r4, [r9], #-339	; 0xfffffead
      34:	00517669 	subseq	r7, r1, r9, ror #12
      38:	5f434352 	svcpl	0x00434352
      3c:	534c4c50 	movtpl	r4, #52304	; 0xcc50
      40:	69444941 	stmdbvs	r4, {r0, r6, r8, fp, lr}^
      44:	73005276 	movwvc	r5, #630	; 0x276
      48:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
      4c:	67657273 			; <UNDEFINED> instruction: 0x67657273
      50:	53595300 	cmppl	r9, #0, 6
      54:	5f4b4c43 	svcpl	0x004b4c43
      58:	71657246 	cmnvc	r5, r6, asr #4
      5c:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
      60:	6c700079 	ldclvs	0, cr0, [r0], #-484	; 0xfffffe1c
      64:	70006d6c 	andvc	r6, r0, ip, ror #26
      68:	00706c6c 	rsbseq	r6, r0, ip, ror #24
      6c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      70:	5f38746e 	svcpl	0x0038746e
      74:	43520074 	cmpmi	r2, #116	; 0x74
      78:	434d5f43 	movtmi	r5, #57155	; 0xdf43
      7c:	6f53314f 	svcvs	0x0053314f
      80:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
      84:	43435200 	movtmi	r5, #12800	; 0x3200
      88:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
      8c:	72655031 	rsbvc	r5, r5, #49	; 0x31
      90:	52687069 	rsbpl	r7, r8, #105	; 0x69
      94:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
      98:	00646d43 	rsbeq	r6, r4, r3, asr #26
      9c:	4e4c4c50 	mcrmi	12, 2, r4, cr12, cr0, {2}
      a0:	43435200 	movtmi	r5, #12800	; 0x3200
      a4:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
      a8:	534c4c50 	movtpl	r4, #52304	; 0xcc50
      ac:	6c434941 	mcrrvs	9, 4, r4, r3, cr1	; <UNPREDICTABLE>
      b0:	7669446b 	strbtvc	r4, [r9], -fp, ror #8
      b4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
      b8:	50006769 	andpl	r6, r0, r9, ror #14
      bc:	00504c4c 	subseq	r4, r0, ip, asr #24
      c0:	514c4c50 	cmppl	ip, r0, asr ip
      c4:	43435200 	movtmi	r5, #12800	; 0x3200
      c8:	656c435f 	strbvs	r4, [ip, #-863]!	; 0xfffffca1
      cc:	54497261 	strbpl	r7, [r9], #-609	; 0xfffffd9f
      d0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
      d4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
      d8:	6c007469 	cfstrsvs	mvf7, [r0], {105}	; 0x69
      dc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      e0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      e4:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
      e8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      ec:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      f0:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
      f4:	52004d4c 	andpl	r4, r0, #76, 26	; 0x1300
      f8:	415f4343 	cmpmi	pc, r3, asr #6
      fc:	50314248 	eorspl	r4, r1, r8, asr #4
     100:	70697265 	rsbvc	r7, r9, r5, ror #4
     104:	48410068 	stmdami	r1, {r3, r5, r6}^
     108:	504c3142 	subpl	r3, ip, r2, asr #2
     10c:	00524e45 	subseq	r4, r2, r5, asr #28
     110:	5f434352 	svcpl	0x00434352
     114:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     118:	5200736b 	andpl	r7, r0, #-1409286143	; 0xac000001
     11c:	415f4343 	cmpmi	pc, r3, asr #6
     120:	50324250 	eorspl	r4, r2, r0, asr r2
     124:	70697265 	rsbvc	r7, r9, r5, ror #4
     128:	6f6c4368 	svcvs	0x006c4368
     12c:	504c6b63 	subpl	r6, ip, r3, ror #22
     130:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     134:	00646d43 	rsbeq	r6, r4, r3, asr #26
     138:	434b4344 	movtmi	r4, #45892	; 0xb344
     13c:	00524746 	subseq	r4, r2, r6, asr #14
     140:	5f434352 	svcpl	0x00434352
     144:	61656c43 	cmnvs	r5, r3, asr #24
     148:	616c4672 	smcvs	50274	; 0xc462
     14c:	48410067 	stmdami	r1, {r0, r1, r2, r5, r6}^
     150:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     154:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
     158:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     15c:	6d740054 	ldclvs	0, cr0, [r4, #-336]!	; 0xfffffeb0
     160:	67657270 			; <UNDEFINED> instruction: 0x67657270
     164:	4c435000 	marmi	acc0, r5, r3
     168:	465f324b 	ldrbmi	r3, [pc], -fp, asr #4
     16c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     170:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     174:	43435200 	movtmi	r5, #12800	; 0x3200
     178:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     17c:	72655032 	rsbvc	r5, r5, #50	; 0x32
     180:	43687069 	cmnmi	r8, #105	; 0x69
     184:	6b636f6c 	blvs	18dbf3c <startup-0x1e7240c4>
     188:	00646d43 	rsbeq	r6, r4, r3, asr #26
     18c:	42414e45 	submi	r4, r1, #1104	; 0x450
     190:	4100454c 	tstmi	r0, ip, asr #10
     194:	52324250 	eorspl	r4, r2, #80, 4
     198:	00525453 	subseq	r5, r2, r3, asr r4
     19c:	5f434352 	svcpl	0x00434352
     1a0:	4b4c4350 	blmi	1310ee8 <startup-0x1ecef118>
     1a4:	6e6f4331 	mcrvs	3, 3, r4, cr15, cr1, {1}
     1a8:	00676966 	rsbeq	r6, r7, r6, ror #18
     1ac:	5f434352 	svcpl	0x00434352
     1b0:	33424841 	movtcc	r4, #10305	; 0x2841
     1b4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     1b8:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     1bc:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     1c0:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     1c4:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     1c8:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     1cc:	416b636f 	cmnmi	fp, pc, ror #6
     1d0:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     1d4:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     1d8:	43520067 	cmpmi	r2, #103	; 0x67
     1dc:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     1e0:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     1e4:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     1e8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     1ec:	646d4374 	strbtvs	r4, [sp], #-884	; 0xfffffc8c
     1f0:	43435200 	movtmi	r5, #12800	; 0x3200
     1f4:	4c43485f 	mcrrmi	8, 5, r4, r3, cr15
     1f8:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     1fc:	00676966 	rsbeq	r6, r7, r6, ror #18
     200:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     204:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     208:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     20c:	43520074 	cmpmi	r2, #116	; 0x74
     210:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     214:	4b4c4353 	blmi	1310f68 <startup-0x1ecef098>
     218:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     21c:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     220:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     224:	6f434553 	svcvs	0x00434553
     228:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     22c:	43435200 	movtmi	r5, #12800	; 0x3200
     230:	414c465f 	cmpmi	ip, pc, asr r6
     234:	3a430047 	bcc	10c0358 <startup-0x1ef3fca8>
     238:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     23c:	6e2f7372 	mcrvs	3, 1, r7, cr15, cr2, {3}
     240:	66697a61 	strbtvs	r7, [r9], -r1, ror #20
     244:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     248:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     24c:	4f2f7374 	svcmi	0x002f7374
     250:	6e696e76 	mcrvs	14, 3, r6, cr9, cr6, {3}
     254:	2f325f67 	svccs	0x00325f67
     258:	2f6e6163 	svccs	0x006e6163
     25c:	2f637273 	svccs	0x00637273
     260:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     264:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     268:	63725f78 	cmnvs	r2, #120, 30	; 0x1e0
     26c:	00632e63 	rsbeq	r2, r3, r3, ror #28
     270:	5377654e 	cmnpl	r7, #327155712	; 0x13800000
     274:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     278:	4c4c5000 	marmi	acc0, r5, ip
     27c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     280:	43435200 	movtmi	r5, #12800	; 0x3200
     284:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
     288:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
     28c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     290:	00646d43 	rsbeq	r6, r4, r3, asr #26
     294:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
     298:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
     29c:	7a616e5c 	bvc	185bc14 <startup-0x1e7a43ec>
     2a0:	445c6669 	ldrbmi	r6, [ip], #-1641	; 0xfffff997
     2a4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
     2a8:	73746e65 	cmnvc	r4, #1616	; 0x650
     2ac:	6e764f5c 	mrcvs	15, 3, r4, cr6, cr12, {2}
     2b0:	5f676e69 	svcpl	0x00676e69
     2b4:	6c415c32 	mcrrvs	12, 3, r5, r1, cr2
     2b8:	5f6d7261 	svcpl	0x006d7261
     2bc:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     2c0:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
     2c4:	5f007265 	svcpl	0x00007265
     2c8:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     2cc:	5f323374 	svcpl	0x00323374
     2d0:	72450074 	subvc	r0, r5, #116	; 0x74
     2d4:	53726f72 	cmnpl	r2, #456	; 0x1c8
     2d8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     2dc:	43520073 	cmpmi	r2, #115	; 0x73
     2e0:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
     2e4:	756f534c 	strbvc	r5, [pc, #-844]!	; ffffffa0 <APBAHBPrescTable+0xdfffd4e8>
     2e8:	00656372 	rsbeq	r6, r5, r2, ror r3
     2ec:	5f434352 	svcpl	0x00434352
     2f0:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
     2f4:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
     2f8:	756f534b 	strbvc	r5, [pc, #-843]!	; ffffffb5 <APBAHBPrescTable+0xdfffd4fd>
     2fc:	00656372 	rsbeq	r6, r5, r2, ror r3
     300:	5f434352 	svcpl	0x00434352
     304:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     308:	48726f46 	ldmdami	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
     30c:	74534553 	ldrbvc	r4, [r3], #-1363	; 0xfffffaad
     310:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0xfffffd9f
     314:	43480070 	movtmi	r0, #32880	; 0x8070
     318:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
     31c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     320:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     324:	43435200 	movtmi	r5, #12800	; 0x3200
     328:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
     32c:	72655031 	rsbvc	r5, r5, #49	; 0x31
     330:	00687069 	rsbeq	r7, r8, r9, rrx
     334:	766c6c70 			; <UNDEFINED> instruction: 0x766c6c70
     338:	44006f63 	strmi	r6, [r0], #-3939	; 0xfffff09d
     33c:	42415349 	submi	r5, r1, #603979777	; 0x24000001
     340:	5300454c 	movwpl	r4, #1356	; 0x54c
     344:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     348:	726f436d 	rsbvc	r4, pc, #-1275068415	; 0xb4000001
     34c:	6f6c4365 	svcvs	0x006c4365
     350:	52006b63 	andpl	r6, r0, #101376	; 0x18c00
     354:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 250 <startup-0x1ffffdb0>
     358:	43314f43 	teqmi	r1, #268	; 0x10c
     35c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     360:	43520067 	cmpmi	r2, #103	; 0x67
     364:	59535f43 	ldmdbpl	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     368:	4b4c4353 	blmi	13110bc <startup-0x1eceef44>
     36c:	43435200 	movtmi	r5, #12800	; 0x3200
     370:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     374:	43533249 	cmpmi	r3, #-1879048188	; 0x90000004
     378:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     37c:	545f4343 	ldrbpl	r4, [pc], #-835	; 384 <startup-0x1ffffc7c>
     380:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     384:	70006665 	andvc	r6, r0, r5, ror #12
     388:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     38c:	43435200 	movtmi	r5, #12800	; 0x3200
     390:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
     394:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     398:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     39c:	43520065 	cmpmi	r2, #101	; 0x65
     3a0:	41535f43 	cmpmi	r3, r3, asr #30
     3a4:	6f6c4249 	svcvs	0x006c4249
     3a8:	43416b63 	movtmi	r6, #7011	; 0x1b63
     3ac:	6f534b4c 	svcvs	0x00534b4c
     3b0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     3b4:	43435200 	movtmi	r5, #12800	; 0x3200
     3b8:	4941535f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
     3bc:	636f6c42 	cmnvs	pc, #16896	; 0x4200
     3c0:	4c43426b 	sfmmi	f4, 2, [r3], {107}	; 0x6b
     3c4:	756f534b 	strbvc	r5, [pc, #-843]!	; 81 <startup-0x1fffff7f>
     3c8:	00656372 	rsbeq	r6, r5, r2, ror r3
     3cc:	5f434352 	svcpl	0x00434352
     3d0:	4344544c 	movtmi	r5, #17484	; 0x444c
     3d4:	444b4c43 	strbmi	r4, [fp], #-3139	; 0xfffff3bd
     3d8:	6f437669 	svcvs	0x00437669
     3dc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     3e0:	6f687300 	svcvs	0x00687300
     3e4:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
     3e8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     3ec:	2064656e 	rsbcs	r6, r4, lr, ror #10
     3f0:	00746e69 	rsbseq	r6, r4, r9, ror #28
     3f4:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     3f8:	46435332 			; <UNDEFINED> instruction: 0x46435332
     3fc:	52005247 	andpl	r5, r0, #1879048196	; 0x70000004
     400:	415f4343 	cmpmi	pc, r3, asr #6
     404:	50324248 	eorspl	r4, r2, r8, asr #4
     408:	70697265 	rsbvc	r7, r9, r5, ror #4
     40c:	6f6c4368 	svcvs	0x006c4368
     410:	504c6b63 	subpl	r6, ip, r3, ror #22
     414:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     418:	00646d43 	rsbeq	r6, r4, r3, asr #26
     41c:	5f434352 	svcpl	0x00434352
     420:	494c4c50 	stmdbmi	ip, {r4, r6, sl, fp, lr}^
     424:	6f435332 	svcvs	0x00435332
     428:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     42c:	43435200 	movtmi	r5, #12800	; 0x3200
     430:	4953485f 	ldmdbmi	r3, {r0, r1, r2, r3, r4, r6, fp, lr}^
     434:	00646d43 	rsbeq	r6, r4, r3, asr #26
     438:	5f434352 	svcpl	0x00434352
     43c:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     440:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     444:	41006870 	tstmi	r0, r0, ror r8
     448:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
     44c:	524e4550 	subpl	r4, lr, #80, 10	; 0x14000000
     450:	43435200 	movtmi	r5, #12800	; 0x3200
     454:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
     458:	72655033 	rsbvc	r5, r5, #51	; 0x33
     45c:	00687069 	rsbeq	r7, r8, r9, rrx
     460:	5f434352 	svcpl	0x00434352
     464:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
     468:	00766944 	rsbseq	r6, r6, r4, asr #18
     46c:	5f434352 	svcpl	0x00434352
     470:	50494153 	subpl	r4, r9, r3, asr r1
     474:	32494c4c 	subcc	r4, r9, #76, 24	; 0x4c00
     478:	6b6c4353 	blvs	1b111cc <startup-0x1e4eee34>
     47c:	43766944 	cmnmi	r6, #68, 18	; 0x110000
     480:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     484:	43520067 	cmpmi	r2, #103	; 0x67
     488:	54525f43 	ldrbpl	r5, [r2], #-3907	; 0xfffff0bd
     48c:	4b4c4343 	blmi	13111a0 <startup-0x1eceee60>
     490:	00646d43 	rsbeq	r6, r4, r3, asr #26
     494:	4f525245 	svcmi	0x00525245
     498:	4e470052 	mcrmi	0, 2, r0, cr7, cr2, {2}
     49c:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
     4a0:	2e372039 	mrccs	0, 1, r2, cr7, cr9, {1}
     4a4:	20312e32 	eorscs	r2, r1, r2, lsr lr
     4a8:	37313032 			; <UNDEFINED> instruction: 0x37313032
     4ac:	34303930 	ldrtcc	r3, [r0], #-2352	; 0xfffff6d0
     4b0:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
     4b4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     4b8:	5b202965 	blpl	80aa54 <startup-0x1f7f55ac>
     4bc:	2f4d5241 	svccs	0x004d5241
     4c0:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
     4c4:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
     4c8:	622d372d 	eorvs	r3, sp, #11796480	; 0xb40000
     4cc:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
     4d0:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
     4d4:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     4d8:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     4dc:	30323535 	eorscc	r3, r2, r5, lsr r5
     4e0:	2d205d34 	stccs	13, cr5, [r0, #-208]!	; 0xffffff30
     4e4:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     4e8:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     4ec:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     4f0:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     4f4:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
     4f8:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
     4fc:	616f6c66 	cmnvs	pc, r6, ror #24
     500:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
     504:	6f733d69 	svcvs	0x00733d69
     508:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
     50c:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     510:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     514:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
     518:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
     51c:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
     520:	672d206d 	strvs	r2, [sp, -sp, rrx]!
     524:	304f2d20 	subcc	r2, pc, r0, lsr #26
     528:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
     52c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
     530:	43520039 	cmpmi	r2, #57	; 0x39
     534:	6c435f43 	mcrrvs	15, 4, r5, r3, cr3
     538:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
     53c:	72756365 	rsbsvc	r6, r5, #-1811939327	; 0x94000001
     540:	53797469 	cmnpl	r9, #1761607680	; 0x69000000
     544:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     548:	646d436d 	strbtvs	r4, [sp], #-877	; 0xfffffc93
     54c:	43435200 	movtmi	r5, #12800	; 0x3200
     550:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     554:	44533249 	ldrbmi	r3, [r3], #-585	; 0xfffffdb7
     558:	00517669 	subseq	r7, r1, r9, ror #12
     55c:	5f434352 	svcpl	0x00434352
     560:	534c4c50 	movtpl	r4, #52304	; 0xcc50
     564:	6f434941 	svcvs	0x00434941
     568:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     56c:	42484100 	submi	r4, r8, #0, 2
     570:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
     574:	4600524e 	strmi	r5, [r0], -lr, asr #4
     578:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     57c:	616e6f69 	cmnvs	lr, r9, ror #30
     580:	6174536c 	cmnvs	r4, ip, ror #6
     584:	52006574 	andpl	r6, r0, #116, 10	; 0x1d000000
     588:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 484 <startup-0x1ffffb7c>
     58c:	44314f43 	ldrtmi	r4, [r1], #-3907	; 0xfffff0bd
     590:	52007669 	andpl	r7, r0, #110100480	; 0x6900000
     594:	415f4343 	cmpmi	pc, r3, asr #6
     598:	50324250 	eorspl	r4, r2, r0, asr r2
     59c:	70697265 	rsbvc	r7, r9, r5, ror #4
     5a0:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
     5a4:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
     5a8:	43520064 	cmpmi	r2, #100	; 0x64
     5ac:	434d5f43 	movtmi	r5, #57155	; 0xdf43
     5b0:	6f53324f 	svcvs	0x0053324f
     5b4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     5b8:	43435200 	movtmi	r5, #12800	; 0x3200
     5bc:	5332495f 	teqpl	r2, #1556480	; 0x17c000
     5c0:	534b4c43 	movtpl	r4, #48195	; 0xbc43
     5c4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     5c8:	4c500065 	mrrcmi	0, 6, r0, r0, cr5	; <UNPREDICTABLE>
     5cc:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     5d0:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     5d4:	53455200 	movtpl	r5, #20992	; 0x5200
     5d8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     5dc:	52003044 	andpl	r3, r0, #68	; 0x44
     5e0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     5e4:	31444556 	cmpcc	r4, r6, asr r5
     5e8:	53455200 	movtpl	r5, #20992	; 0x5200
     5ec:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     5f0:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     5f4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     5f8:	33444556 	movtcc	r4, #17750	; 0x4556
     5fc:	53455200 	movtpl	r5, #20992	; 0x5200
     600:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     604:	52003444 	andpl	r3, r0, #68, 8	; 0x44000000
     608:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     60c:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
     610:	53455200 	movtpl	r5, #20992	; 0x5200
     614:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
     618:	52003644 	andpl	r3, r0, #68, 12	; 0x4400000
     61c:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
     620:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     624:	74536761 	ldrbvc	r6, [r3], #-1889	; 0xfffff89f
     628:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     62c:	43435200 	movtmi	r5, #12800	; 0x3200
     630:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     634:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     638:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     63c:	535f4343 	cmppl	pc, #201326593	; 0xc000001
     640:	6c424941 	mcrrvs	9, 4, r4, r2, cr1	; <UNPREDICTABLE>
     644:	426b636f 	rsbmi	r6, fp, #-1140850687	; 0xbc000001
     648:	434b4c43 	movtmi	r4, #48195	; 0xbc43
     64c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     650:	4c500067 	mrrcmi	0, 6, r0, r0, cr7	; <UNPREDICTABLE>
     654:	4941534c 	stmdbmi	r1, {r2, r3, r6, r8, r9, ip, lr}^
     658:	5449004e 	strbpl	r0, [r9], #-78	; 0xffffffb2
     65c:	78525f4d 	ldmdavc	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     660:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     664:	50007265 	andpl	r7, r0, r5, ror #4
     668:	41534c4c 	cmpmi	r3, ip, asr #24
     66c:	50005149 	andpl	r5, r0, r9, asr #2
     670:	41534c4c 	cmpmi	r3, ip, asr #24
     674:	73005249 	movwvc	r5, #585	; 0x249
     678:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     67c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     680:	43435200 	movtmi	r5, #12800	; 0x3200
     684:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     688:	504b4c43 	subpl	r4, fp, r3, asr #24
     68c:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     690:	72656c61 	rsbvc	r6, r5, #24832	; 0x6100
     694:	43435200 	movtmi	r5, #12800	; 0x3200
     698:	4c4c505f 	mcrrmi	0, 5, r5, ip, cr15
     69c:	00646d43 	rsbeq	r6, r4, r3, asr #26
     6a0:	5f434352 	svcpl	0x00434352
     6a4:	31424841 	cmpcc	r2, r1, asr #16
     6a8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     6ac:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     6b0:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     6b4:	4100646d 	tstmi	r0, sp, ror #8
     6b8:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
     6bc:	4100524e 	tstmi	r0, lr, asr #4
     6c0:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
     6c4:	00525453 	subseq	r5, r2, r3, asr r4
     6c8:	33424841 	movtcc	r4, #10305	; 0x2841
     6cc:	00524e45 	subseq	r4, r2, r5, asr #28
     6d0:	5f434352 	svcpl	0x00434352
     6d4:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     6d8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     6dc:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0xfffff790
     6e0:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
     6e4:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     6e8:	415f4343 	cmpmi	pc, r3, asr #6
     6ec:	50314250 	eorspl	r4, r1, r0, asr r2
     6f0:	70697265 	rsbvc	r7, r9, r5, ror #4
     6f4:	6f6c4368 	svcvs	0x006c4368
     6f8:	504c6b63 	subpl	r6, ip, r3, ror #22
     6fc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     700:	00646d43 	rsbeq	r6, r4, r3, asr #26
     704:	5f434352 	svcpl	0x00434352
     708:	4b4c4350 	blmi	1311450 <startup-0x1eceebb0>
     70c:	6e6f4332 	mcrvs	3, 3, r4, cr15, cr2, {1}
     710:	00676966 	rsbeq	r6, r7, r6, ror #18
     714:	5f434352 	svcpl	0x00434352
     718:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     71c:	6f534b4c 	svcvs	0x00534b4c
     720:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     724:	43435200 	movtmi	r5, #12800	; 0x3200
     728:	4553485f 	ldrbmi	r4, [r3, #-2143]	; 0xfffff7a1
     72c:	4c435000 	marmi	acc0, r5, r3
     730:	465f314b 	ldrbmi	r3, [pc], -fp, asr #2
     734:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     738:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     73c:	42504100 	subsmi	r4, r0, #0, 2
     740:	50424841 	subpl	r4, r2, r1, asr #16
     744:	63736572 	cmnvs	r3, #478150656	; 0x1c800000
     748:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
     74c:	43520065 	cmpmi	r2, #101	; 0x65
     750:	64415f43 	strbvs	r5, [r1], #-3907	; 0xfffff0bd
     754:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
     758:	43495348 	movtmi	r5, #37704	; 0x9348
     75c:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
     760:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     764:	61566e6f 	cmpvs	r6, pc, ror #28
     768:	0065756c 	rsbeq	r7, r5, ip, ror #10
     76c:	73657368 	cmnvc	r5, #104, 6	; 0xa0000001
     770:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     774:	4c500073 	mrrcmi	0, 7, r0, r0, cr3	; <UNPREDICTABLE>
     778:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     77c:	4352004e 	cmpmi	r2, #78	; 0x4e
     780:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xfffff0bd
     784:	6f6c4374 	svcvs	0x006c4374
     788:	46736b63 	ldrbtmi	r6, [r3], -r3, ror #22
     78c:	00716572 	rsbseq	r6, r1, r2, ror r5
     790:	5f434352 	svcpl	0x00434352
     794:	32425041 	subcc	r5, r2, #65	; 0x41
     798:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     79c:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     7a0:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
     7a4:	5f00646d 	svcpl	0x0000646d
     7a8:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     7ac:	5f363174 	svcpl	0x00363174
     7b0:	48410074 	stmdami	r1, {r2, r4, r5, r6}^
     7b4:	53523242 	cmppl	r2, #536870916	; 0x20000004
     7b8:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
     7bc:	445f4343 	ldrbmi	r4, [pc], #-835	; 7c4 <startup-0x1ffff83c>
     7c0:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     7c4:	4c500074 	mrrcmi	0, 7, r0, r0, cr4	; <UNPREDICTABLE>
     7c8:	5332494c 	teqpl	r2, #76, 18	; 0x130000
     7cc:	5f5f0052 	svcpl	0x005f0052
     7d0:	33746e69 	cmncc	r4, #1680	; 0x690
     7d4:	00745f32 	rsbseq	r5, r4, r2, lsr pc
     7d8:	5f434352 	svcpl	0x00434352
     7dc:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     7e0:	61745354 	cmnvs	r4, r4, asr r3
     7e4:	00737574 	rsbseq	r7, r3, r4, ror r5
     7e8:	31425041 	cmpcc	r2, r1, asr #32
     7ec:	00524e45 	subseq	r4, r2, r5, asr #28
     7f0:	32424841 	subcc	r4, r2, #4259840	; 0x410000
     7f4:	00524e45 	subseq	r4, r2, r5, asr #28
     7f8:	5f434352 	svcpl	0x00434352
     7fc:	33424841 	movtcc	r4, #10305	; 0x2841
     800:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
     804:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
     808:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     80c:	646f4d50 	strbtvs	r4, [pc], #-3408	; 814 <startup-0x1ffff7ec>
     810:	646d4365 	strbtvs	r4, [sp], #-869	; 0xfffffc9b
     814:	736e7500 	cmnvc	lr, #0, 10
     818:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     81c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     820:	73007261 	movwvc	r7, #609	; 0x261
     824:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     828:	6f637075 	svcvs	0x00637075
     82c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
     830:	43520072 	cmpmi	r2, #114	; 0x72
     834:	50415f43 	subpl	r5, r1, r3, asr #30
     838:	65503242 	ldrbvs	r3, [r0, #-578]	; 0xfffffdbe
     83c:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     840:	43435200 	movtmi	r5, #12800	; 0x3200
     844:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
     848:	504b4c43 	subpl	r4, fp, r3, asr #24
     84c:	43736572 	cmnmi	r3, #478150656	; 0x1c800000
     850:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     854:	43520067 	cmpmi	r2, #103	; 0x67
     858:	32495f43 	subcc	r5, r9, #268	; 0x10c
     85c:	4b4c4353 	blmi	13115b0 <startup-0x1eceea50>
     860:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     864:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
     868:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 764 <startup-0x1ffff89c>
     86c:	43324f43 	teqmi	r2, #268	; 0x10c
     870:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     874:	53530067 	cmppl	r3, #103	; 0x67
     878:	00524743 	subseq	r4, r2, r3, asr #14
     87c:	33424841 	movtcc	r4, #10305	; 0x2841
     880:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
     884:	50410052 	subpl	r0, r1, r2, asr r0
     888:	53523142 	cmppl	r2, #-2147483632	; 0x80000010
     88c:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
     890:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
     894:	6d434953 	vstrvs.16	s9, [r3, #-166]	; 0xffffff5a	; <UNPREDICTABLE>
     898:	44420064 	strbmi	r0, [r2], #-100	; 0xffffff9c
     89c:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
     8a0:	415f4343 	cmpmi	pc, r3, asr #6
     8a4:	50314250 	eorspl	r4, r1, r0, asr r2
     8a8:	70697265 	rsbvc	r7, r9, r5, ror #4
     8ac:	6f6c4368 	svcvs	0x006c4368
     8b0:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     8b4:	43520064 	cmpmi	r2, #100	; 0x64
     8b8:	54495f43 	strbpl	r5, [r9], #-3907	; 0xfffff0bd
     8bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     8c0:	53006769 	movwpl	r6, #1897	; 0x769
     8c4:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
     8c8:	52005353 	andpl	r5, r0, #1275068417	; 0x4c000001
     8cc:	505f4343 	subspl	r4, pc, r3, asr #6
     8d0:	6f434c4c 	svcvs	0x00434c4c
     8d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     8d8:	43435200 	movtmi	r5, #12800	; 0x3200
     8dc:	6f6c435f 	svcvs	0x006c435f
     8e0:	54736b63 	ldrbtpl	r6, [r3], #-2915	; 0xfffff49d
     8e4:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     8e8:	41006665 	tstmi	r0, r5, ror #12
     8ec:	45314248 	ldrmi	r4, [r1, #-584]!	; 0xfffffdb8
     8f0:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
     8f4:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
     8f8:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
     8fc:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
     900:	00676966 	rsbeq	r6, r7, r6, ror #18
     904:	736c6c70 	cmnvc	ip, #112, 24	; 0x7000
     908:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     90c:	43520065 	cmpmi	r2, #101	; 0x65
     910:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     914:	65503142 	ldrbvs	r3, [r0, #-322]	; 0xfffffebe
     918:	68706972 	ldmdavs	r0!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     91c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     920:	4d504c6b 	ldclmi	12, cr4, [r0, #-428]	; 0xfffffe54
     924:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
     928:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
     92c:	415f4343 	cmpmi	pc, r3, asr #6
     930:	50334248 	eorspl	r4, r3, r8, asr #4
     934:	70697265 	rsbvc	r7, r9, r5, ror #4
     938:	6f6c4368 	svcvs	0x006c4368
     93c:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
     940:	50470064 	subpl	r0, r7, r4, rrx
     944:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 94c <startup-0x1ffff6b4>
     948:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     94c:	70006665 	andvc	r6, r0, r5, ror #12
     950:	6f706e69 	svcvs	0x00706e69
     954:	50470073 	subpl	r0, r7, r3, ror r0
     958:	505f4f49 	subspl	r4, pc, r9, asr #30
     95c:	42006e69 	andmi	r6, r0, #1680	; 0x690
     960:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
     964:	47005445 	strmi	r5, [r0, -r5, asr #8]
     968:	5f4f4950 	svcpl	0x004f4950
     96c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     970:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     974:	61447475 	hvcvs	18245	; 0x4745
     978:	47006174 	smlsdxmi	r0, r4, r1, r6
     97c:	4d4f4950 	vstrmi.16	s9, [pc, #-160]	; 8e4 <startup-0x1ffff71c>	; <UNPREDICTABLE>
     980:	5f65646f 	svcpl	0x0065646f
     984:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     988:	00666544 	rsbeq	r6, r6, r4, asr #10
     98c:	4f495047 	svcmi	0x00495047
     990:	0046415f 	subeq	r4, r6, pc, asr r1
     994:	4f495047 	svcmi	0x00495047
     998:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     99c:	325f6465 	subscc	r6, pc, #1694498816	; 0x65000000
     9a0:	7a484d35 	bvc	1213e7c <startup-0x1edec184>
     9a4:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
     9a8:	50470070 	subpl	r0, r7, r0, ror r0
     9ac:	535f4f49 	cmppl	pc, #292	; 0x124
     9b0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     9b4:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     9b8:	69420074 	stmdbvs	r2, {r2, r4, r5, r6}^
     9bc:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
     9c0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9c4:	544f5f4f 	strbpl	r5, [pc], #-3919	; 9cc <startup-0x1ffff634>
     9c8:	5f657079 	svcpl	0x00657079
     9cc:	4200444f 	andmi	r4, r0, #1325400064	; 0x4f000000
     9d0:	525f7469 	subspl	r7, pc, #1761607680	; 0x69000000
     9d4:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
     9d8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     9dc:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
     9e0:	42657469 	rsbmi	r7, r5, #1761607680	; 0x69000000
     9e4:	47007469 	strmi	r7, [r0, -r9, ror #8]
     9e8:	5f4f4950 	svcpl	0x004f4950
     9ec:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     9f0:	50470065 	subpl	r0, r7, r5, rrx
     9f4:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 8d8 <startup-0x1ffff728>
     9f8:	5f65646f 	svcpl	0x0065646f
     9fc:	47004641 	strmi	r4, [r0, -r1, asr #12]
     a00:	5f4f4950 	svcpl	0x004f4950
     a04:	42746553 	rsbsmi	r6, r4, #348127232	; 0x14c00000
     a08:	00737469 	rsbseq	r7, r3, r9, ror #8
     a0c:	4f495047 	svcmi	0x00495047
     a10:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0xfffffca1
     a14:	47006465 	strmi	r6, [r0, -r5, ror #8]
     a18:	5f4f4950 	svcpl	0x004f4950
     a1c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     a20:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a24:	6f4d5f4f 	svcvs	0x004d5f4f
     a28:	415f6564 	cmpmi	pc, r4, ror #10
     a2c:	5047004e 	subpl	r0, r7, lr, asr #32
     a30:	525f4f49 	subspl	r4, pc, #292	; 0x124
     a34:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     a38:	73746942 	cmnvc	r4, #1081344	; 0x108000
     a3c:	4b434c00 	blmi	10d3a44 <startup-0x1ef2c5bc>
     a40:	50470052 	subpl	r0, r7, r2, asr r0
     a44:	535f4f49 	cmppl	pc, #292	; 0x124
     a48:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
     a4c:	3030315f 	eorscc	r3, r0, pc, asr r1
     a50:	007a484d 	rsbseq	r4, sl, sp, asr #16
     a54:	4f495047 	svcmi	0x00495047
     a58:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     a5c:	79545f65 	ldmdbvc	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     a60:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     a64:	544f0066 	strbpl	r0, [pc], #-102	; a6c <startup-0x1ffff594>
     a68:	52455059 	subpl	r5, r5, #89	; 0x59
     a6c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a70:	6f4d5f4f 	svcvs	0x004d5f4f
     a74:	4f5f6564 	svcmi	0x005f6564
     a78:	50005455 	andpl	r5, r0, r5, asr r4
     a7c:	52445055 	subpl	r5, r4, #85	; 0x55
     a80:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     a84:	6f4d5f4f 	svcvs	0x004d5f4f
     a88:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     a8c:	5047004e 	subpl	r0, r7, lr, asr #32
     a90:	445f4f49 	ldrbmi	r4, [pc], #-3913	; a98 <startup-0x1ffff568>
     a94:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     a98:	3a430074 	bcc	10c0c70 <startup-0x1ef3f390>
     a9c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
     aa0:	6e2f7372 	mcrvs	3, 1, r7, cr15, cr2, {3}
     aa4:	66697a61 	strbtvs	r7, [r9], -r1, ror #20
     aa8:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
     aac:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
     ab0:	4f2f7374 	svcmi	0x002f7374
     ab4:	6e696e76 	mcrvs	14, 3, r6, cr9, cr6, {3}
     ab8:	2f325f67 	svccs	0x00325f67
     abc:	2f6e6163 	svccs	0x006e6163
     ac0:	2f637273 	svccs	0x00637273
     ac4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     ac8:	78346632 	ldmdavc	r4!, {r1, r4, r5, r9, sl, sp, lr}
     acc:	70675f78 	rsbvc	r5, r7, r8, ror pc
     ad0:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
     ad4:	52534200 	subspl	r4, r3, #0, 4
     ad8:	4d004852 	stcmi	8, cr4, [r0, #-328]	; 0xfffffeb8
     adc:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
     ae0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ae4:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xfffff0b1
     ae8:	6e496461 	cdpvs	4, 4, cr6, cr9, cr1, {3}
     aec:	44747570 	ldrbtmi	r7, [r4], #-1392	; 0xfffffa90
     af0:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
     af4:	47007469 	strmi	r7, [r0, -r9, ror #8]
     af8:	5f4f4950 	svcpl	0x004f4950
     afc:	7079544f 	rsbsvc	r5, r9, pc, asr #8
     b00:	50505f65 	subspl	r5, r0, r5, ror #30
     b04:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b08:	75505f4f 	ldrbvc	r5, [r0, #-3919]	; 0xfffff0b1
     b0c:	47006450 	smlsdmi	r0, r0, r4, r6
     b10:	5f4f4950 	svcpl	0x004f4950
     b14:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     b18:	4d325f64 	ldcmi	15, cr5, [r2, #-400]!	; 0xfffffe70
     b1c:	47007a48 	strmi	r7, [r0, -r8, asr #20]
     b20:	5f4f4950 	svcpl	0x004f4950
     b24:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     b28:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0xfffffbad
     b2c:	50007463 	andpl	r7, r0, r3, ror #8
     b30:	5674726f 	ldrbtpl	r7, [r4], -pc, ror #4
     b34:	47006c61 	strmi	r6, [r0, -r1, ror #24]
     b38:	5f4f4950 	svcpl	0x004f4950
     b3c:	536e6950 	cmnpl	lr, #80, 18	; 0x140000
     b40:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     b44:	50470065 	subpl	r0, r7, r5, rrx
     b48:	525f4f49 	subspl	r4, pc, #292	; 0x124
     b4c:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     b50:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     b54:	61746144 	cmnvs	r4, r4, asr #2
     b58:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b5c:	69505f4f 	ldmdbvs	r0, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     b60:	636f4c6e 	cmnvs	pc, #28160	; 0x6e00
     b64:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     b68:	00676966 	rsbeq	r6, r7, r6, ror #18
     b6c:	41746942 	cmnmi	r4, r2, asr #18
     b70:	6f697463 	svcvs	0x00697463
     b74:	7563006e 	strbvc	r0, [r3, #-110]!	; 0xffffff92
     b78:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     b7c:	6e697074 	mcrvs	0, 3, r7, cr9, cr4, {3}
     b80:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     b84:	72575f4f 	subsvc	r5, r7, #316	; 0x13c
     b88:	00657469 	rsbeq	r7, r5, r9, ror #8
     b8c:	4550534f 	ldrbmi	r5, [r0, #-847]	; 0xfffffcb1
     b90:	00524445 	subseq	r4, r2, r5, asr #8
     b94:	4f495047 	svcmi	0x00495047
     b98:	50470078 	subpl	r0, r7, r8, ror r0
     b9c:	70534f49 	subsvc	r4, r3, r9, asr #30
     ba0:	5f646565 	svcpl	0x00646565
     ba4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     ba8:	00666544 	rsbeq	r6, r6, r4, asr #10
     bac:	4f495047 	svcmi	0x00495047
     bb0:	5075505f 	rsbspl	r5, r5, pc, asr r0
     bb4:	4f445f64 	svcmi	0x00445f64
     bb8:	47004e57 	smlsdmi	r0, r7, lr, r4
     bbc:	5f4f4950 	svcpl	0x004f4950
     bc0:	64507550 	ldrbvs	r7, [r0], #-1360	; 0xfffffab0
     bc4:	504f4e5f 	subpl	r4, pc, pc, asr lr	; <UNPREDICTABLE>
     bc8:	004c4c55 	subeq	r4, ip, r5, asr ip
     bcc:	4f495047 	svcmi	0x00495047
     bd0:	676f545f 			; <UNDEFINED> instruction: 0x676f545f
     bd4:	42656c67 	rsbmi	r6, r5, #26368	; 0x6700
     bd8:	00737469 	rsbseq	r7, r3, r9, ror #8
     bdc:	706d6574 	rsbvc	r6, sp, r4, ror r5
     be0:	4700325f 	smlsdmi	r0, pc, r2, r3	; <UNPREDICTABLE>
     be4:	5f4f4950 	svcpl	0x004f4950
     be8:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
     bec:	30355f64 	eorscc	r5, r5, r4, ror #30
     bf0:	007a484d 	rsbseq	r4, sl, sp, asr #16
     bf4:	4f495047 	svcmi	0x00495047
     bf8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     bfc:	70795474 	rsbsvc	r5, r9, r4, ror r4
     c00:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     c04:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c08:	5075504f 	rsbspl	r5, r5, pc, asr #32
     c0c:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     c10:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     c14:	50470066 	subpl	r0, r7, r6, rrx
     c18:	505f4f49 	subspl	r4, pc, r9, asr #30
     c1c:	5f645075 	svcpl	0x00645075
     c20:	47005055 	smlsdmi	r0, r5, r0, r5
     c24:	5f4f4950 	svcpl	0x004f4950
     c28:	416e6950 	cmnmi	lr, r0, asr r9
     c2c:	6e6f4346 	cdpvs	3, 6, cr4, cr15, cr6, {2}
     c30:	00676966 	rsbeq	r6, r7, r6, ror #18
     c34:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
     c38:	5047004c 	subpl	r0, r7, ip, asr #32
     c3c:	525f4f49 	subspl	r4, pc, #292	; 0x124
     c40:	4f646165 	svcmi	0x00646165
     c44:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
     c48:	74614474 	strbtvc	r4, [r1], #-1140	; 0xfffffb8c
     c4c:	74694261 	strbtvc	r4, [r9], #-609	; 0xfffffd9f
     c50:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     c54:	6f4d5f4f 	svcvs	0x004d5f4f
     c58:	43006564 	movwmi	r6, #1380	; 0x564
     c5c:	445f4e41 	ldrbmi	r4, [pc], #-3649	; c64 <startup-0x1ffff39c>
     c60:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     c64:	61430074 	hvcvs	12292	; 0x3004
     c68:	4d78526e 	lfmmi	f5, 2, [r8, #-440]!	; 0xfffffe48
     c6c:	43006773 	movwmi	r6, #1907	; 0x773
     c70:	435f4e41 	cmpmi	pc, #1040	; 0x410
     c74:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     c78:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     c7c:	4d785200 	lfmmi	f5, 2, [r8, #-0]
     c80:	61737365 	cmnvs	r3, r5, ror #6
     c84:	43006567 	movwmi	r6, #1383	; 0x567
     c88:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
     c8c:	2f737265 	svccs	0x00737265
     c90:	697a616e 	ldmdbvs	sl!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     c94:	6f442f66 	svcvs	0x00442f66
     c98:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
     c9c:	2f73746e 	svccs	0x0073746e
     ca0:	696e764f 	stmdbvs	lr!, {r0, r1, r2, r3, r6, r9, sl, ip, sp, lr}^
     ca4:	325f676e 	subscc	r6, pc, #28835840	; 0x1b80000
     ca8:	6e61632f 	cdpvs	3, 6, cr6, cr1, cr15, {1}
     cac:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     cb0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     cb4:	34663233 	strbtcc	r3, [r6], #-563	; 0xfffffdcd
     cb8:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
     cbc:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
     cc0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     cc4:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     cc8:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     ccc:	0074696e 	rsbseq	r6, r4, lr, ror #18
     cd0:	5f4e4143 	svcpl	0x004e4143
     cd4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     cd8:	00666544 	rsbeq	r6, r6, r4, asr #10
     cdc:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
     ce0:	61747370 	cmnvs	r4, r0, ror r3
     ce4:	00737574 	rsbseq	r7, r3, r4, ror r5
     ce8:	5f4e4143 	svcpl	0x004e4143
     cec:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     cf0:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     cf4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0xfffffb97
     cf8:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
     cfc:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     d00:	4649465f 			; <UNDEFINED> instruction: 0x4649465f
     d04:	6c65524f 	sfmvs	f5, 2, [r5], #-316	; 0xfffffec4
     d08:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     d0c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     d10:	4354545f 	cmpmi	r4, #1593835520	; 0x5f000000
     d14:	6f4d6d6f 	svcvs	0x004d6d6f
     d18:	6d436564 	cfstr64vs	mvdx6, [r3, #-400]	; 0xfffffe70
     d1c:	656d0064 	strbvs	r0, [sp, #-100]!	; 0xffffff9c
     d20:	67617373 			; <UNDEFINED> instruction: 0x67617373
     d24:	65705f65 	ldrbvs	r5, [r0, #-3941]!	; 0xfffff09b
     d28:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     d2c:	41430067 	cmpmi	r3, r7, rrx
     d30:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     d34:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     d38:	6b73614d 	blvs	1cd9274 <startup-0x1e326d8c>
     d3c:	69486449 	stmdbvs	r8, {r0, r3, r6, sl, sp, lr}^
     d40:	43006867 	movwmi	r6, #2151	; 0x867
     d44:	545f4e41 	ldrbpl	r4, [pc], #-3649	; d4c <startup-0x1ffff2b4>
     d48:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
     d4c:	5374696d 	cmnpl	r4, #1785856	; 0x1b4000
     d50:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     d54:	41430073 	hvcmi	12291	; 0x3003
     d58:	53425f4e 	movtpl	r5, #12110	; 0x2f4e
     d5c:	41430031 	cmpmi	r3, r1, lsr r0
     d60:	53425f4e 	movtpl	r5, #12110	; 0x2f4e
     d64:	41430032 	cmpmi	r3, r2, lsr r0
     d68:	61425f4e 	cmpvs	r2, lr, asr #30
     d6c:	754e6b6e 	strbvc	r6, [lr, #-2926]	; 0xfffff492
     d70:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     d74:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     d78:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
     d7c:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!	; 0xfffffe30
     d80:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     d84:	776f4c64 	strbvc	r4, [pc, -r4, ror #24]!
     d88:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     d8c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     d90:	5442534c 	strbpl	r5, [r2], #-844	; 0xfffffcb4
     d94:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
     d98:	4574696d 	ldrbmi	r6, [r4, #-2413]!	; 0xfffff693
     d9c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     da0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     da4:	00726574 	rsbseq	r6, r2, r4, ror r5
     da8:	5f4e4143 	svcpl	0x004e4143
     dac:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     db0:	61747300 	cmnvs	r4, r0, lsl #6
     db4:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
     db8:	00524c44 	subseq	r4, r2, r4, asr #24
     dbc:	5f4e4143 	svcpl	0x004e4143
     dc0:	4c746547 	cfldr64mi	mvdx6, [r4], #-284	; 0xfffffee4
     dc4:	45747361 	ldrbmi	r7, [r4, #-865]!	; 0xfffffc9f
     dc8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     dcc:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     dd0:	696e4900 	stmdbvs	lr!, {r8, fp, lr}^
     dd4:	61745374 	cmnvs	r4, r4, ror r3
     dd8:	00737574 	rsbseq	r7, r3, r4, ror r5
     ddc:	5f4e4143 	svcpl	0x004e4143
     de0:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
     de4:	52007055 	andpl	r7, r0, #85	; 0x55
     de8:	00523046 	subseq	r3, r2, r6, asr #32
     dec:	5f4e4143 	svcpl	0x004e4143
     df0:	636e6143 	cmnvs	lr, #-1073741808	; 0xc0000010
     df4:	72546c65 	subsvc	r6, r4, #25856	; 0x6500
     df8:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     dfc:	43007469 	movwmi	r7, #1129	; 0x469
     e00:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     e04:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     e08:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     e0c:	44520074 	ldrbmi	r0, [r2], #-116	; 0xffffff8c
     e10:	4300524c 	movwmi	r5, #588	; 0x24c
     e14:	415f4e41 	cmpmi	pc, r1, asr #28
     e18:	004d4f42 	subeq	r4, sp, r2, asr #30
     e1c:	654d7854 	strbvs	r7, [sp, #-2132]	; 0xfffff7ac
     e20:	67617373 			; <UNDEFINED> instruction: 0x67617373
     e24:	41430065 	cmpmi	r3, r5, rrx
     e28:	654d5f4e 	strbvs	r5, [sp, #-3918]	; 0xfffff0b2
     e2c:	67617373 			; <UNDEFINED> instruction: 0x67617373
     e30:	6e655065 	cdpvs	0, 6, cr5, cr5, cr5, {3}
     e34:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     e38:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     e3c:	616c535f 	cmnvs	ip, pc, asr r3
     e40:	74536576 	ldrbvc	r6, [r3], #-1398	; 0xfffffa8a
     e44:	42747261 	rsbsmi	r7, r4, #268435462	; 0x10000006
     e48:	006b6e61 	rsbeq	r6, fp, r1, ror #28
     e4c:	4d785473 	cfldrdmi	mvd5, [r8, #-460]!	; 0xfffffe34
     e50:	426c6961 	rsbmi	r6, ip, #1589248	; 0x184000
     e54:	4300786f 	movwmi	r7, #2159	; 0x86f
     e58:	4f5f4e41 	svcmi	0x005f4e41
     e5c:	61726570 	cmnvs	r2, r0, ror r5
     e60:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     e64:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     e68:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
     e6c:	00747365 	rsbseq	r7, r4, r5, ror #6
     e70:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     e74:	0074756f 	rsbseq	r7, r4, pc, ror #10
     e78:	52544452 	subspl	r4, r4, #1375731712	; 0x52000000
     e7c:	31534600 	cmpcc	r3, r0, lsl #12
     e80:	46520052 			; <UNDEFINED> instruction: 0x46520052
     e84:	43005231 	movwmi	r5, #561	; 0x231
     e88:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     e8c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     e90:	67655272 			; <UNDEFINED> instruction: 0x67655272
     e94:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
     e98:	79545f72 	ldmdbvc	r4, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e9c:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     ea0:	78450066 	stmdavc	r5, {r1, r2, r5, r6}^
     ea4:	00644974 	rsbeq	r4, r4, r4, ror r9
     ea8:	6c694673 	stclvs	6, cr4, [r9], #-460	; 0xfffffe34
     eac:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
     eb0:	73696765 	cmnvc	r9, #26476544	; 0x1940000
     eb4:	00726574 	rsbseq	r6, r2, r4, ror r5
     eb8:	5f4e4143 	svcpl	0x004e4143
     ebc:	6e617254 	mcrvs	2, 3, r7, cr1, cr4, {2}
     ec0:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
     ec4:	314d4600 	cmpcc	sp, r0, lsl #12
     ec8:	44540052 	ldrbmi	r0, [r4], #-82	; 0xffffffae
     ecc:	43005254 	movwmi	r5, #596	; 0x254
     ed0:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
     ed4:	41430054 	qdaddmi	r0, r4, r3
     ed8:	6e495f4e 	cdpvs	15, 4, cr5, cr9, cr14, {2}
     edc:	43007469 	movwmi	r7, #1129	; 0x469
     ee0:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     ee4:	4d4f4649 	stclmi	6, cr4, [pc, #-292]	; dc8 <startup-0x1ffff238>
     ee8:	426c6961 	rsbmi	r6, ip, #1589248	; 0x184000
     eec:	545f786f 	ldrbpl	r7, [pc], #-2159	; ef4 <startup-0x1ffff10c>
     ef0:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     ef4:	43006665 	movwmi	r6, #1637	; 0x665
     ef8:	535f4e41 	cmppl	pc, #1040	; 0x410
     efc:	7065656c 	rsbvc	r6, r5, ip, ror #10
     f00:	5f744900 	svcpl	0x00744900
     f04:	00746942 	rsbseq	r6, r4, r2, asr #18
     f08:	5f4e4143 	svcpl	0x004e4143
     f0c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     f10:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
     f14:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     f18:	65446570 	strbvs	r6, [r4, #-1392]	; 0xfffffa90
     f1c:	41430066 	cmpmi	r3, r6, rrx
     f20:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
     f24:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
     f28:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     f2c:	43007265 	movwmi	r7, #613	; 0x265
     f30:	475f4e41 	ldrbmi	r4, [pc, -r1, asr #28]
     f34:	54497465 	strbpl	r7, [r9], #-1125	; 0xfffffb9b
     f38:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     f3c:	54007375 	strpl	r7, [r0], #-885	; 0xfffffc8b
     f40:	00524844 	subseq	r4, r2, r4, asr #16
     f44:	49647453 	stmdbmi	r4!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     f48:	46460064 	strbmi	r0, [r6], -r4, rrx
     f4c:	00523141 	subseq	r3, r2, r1, asr #2
     f50:	5f4e4143 	svcpl	0x004e4143
     f54:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     f58:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
     f5c:	00776f4c 	rsbseq	r6, r7, ip, asr #30
     f60:	5f4e4143 	svcpl	0x004e4143
     f64:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
     f68:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     f6c:	6572505f 	ldrbvs	r5, [r2, #-95]!	; 0xffffffa1
     f70:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
     f74:	77007265 	strvc	r7, [r0, -r5, ror #4]
     f78:	5f746961 	svcpl	0x00746961
     f7c:	6b616c73 	blvs	185c150 <startup-0x1e7a3eb0>
     f80:	46494600 	strbmi	r4, [r9], -r0, lsl #12
     f84:	6d754e4f 	ldclvs	14, cr4, [r5, #-316]!	; 0xfffffec4
     f88:	00726562 	rsbseq	r6, r2, r2, ror #10
     f8c:	6f727265 	svcvs	0x00727265
     f90:	646f6372 	strbtvs	r6, [pc], #-882	; f98 <startup-0x1ffff068>
     f94:	65700065 	ldrbvs	r0, [r0, #-101]!	; 0xffffff9b
     f98:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
     f9c:	74696267 	strbtvc	r6, [r9], #-615	; 0xfffffd99
     fa0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     fa4:	43007375 	movwmi	r7, #885	; 0x375
     fa8:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
     fac:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
     fb0:	48644972 	stmdami	r4!, {r1, r4, r5, r6, r8, fp, lr}^
     fb4:	00686769 	rsbeq	r6, r8, r9, ror #14
     fb8:	5f4e4143 	svcpl	0x004e4143
     fbc:	00676552 	rsbeq	r6, r7, r2, asr r5
     fc0:	5f4e4143 	svcpl	0x004e4143
     fc4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     fc8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     fcc:	00666544 	rsbeq	r6, r6, r4, asr #10
     fd0:	5f4e4143 	svcpl	0x004e4143
     fd4:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
     fd8:	49467265 	stmdbmi	r6, {r0, r2, r5, r6, r9, ip, sp, lr}^
     fdc:	73414f46 	movtvc	r4, #8006	; 0x1f46
     fe0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     fe4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     fe8:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     fec:	4d78545f 	cfldrdmi	mvd5, [r8, #-380]!	; 0xfffffe84
     ff0:	426c6961 	rsbmi	r6, ip, #1589248	; 0x184000
     ff4:	545f786f 	ldrbpl	r7, [pc], #-2159	; ffc <startup-0x1ffff004>
     ff8:	44657079 	strbtmi	r7, [r5], #-121	; 0xffffff87
     ffc:	43006665 	movwmi	r6, #1637	; 0x665
    1000:	445f4e41 	ldrbmi	r4, [pc], #-3649	; 1008 <startup-0x1fffeff8>
    1004:	72464742 	subvc	r4, r6, #17301504	; 0x1080000
    1008:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
    100c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1010:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    1014:	53726574 	cmnpl	r2, #116, 10	; 0x1d000000
    1018:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    101c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1020:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    1024:	4d726574 	cfldr64mi	mvdx6, [r2, #-464]!	; 0xfffffe30
    1028:	0065646f 	rsbeq	r6, r5, pc, ror #8
    102c:	5f4e4143 	svcpl	0x004e4143
    1030:	7265704f 	rsbvc	r7, r5, #79	; 0x4f
    1034:	6e697461 	cdpvs	4, 6, cr7, cr9, cr1, {3}
    1038:	646f4d67 	strbtvs	r4, [pc], #-3431	; 1040 <startup-0x1fffefc0>
    103c:	44520065 	ldrbmi	r0, [r2], #-101	; 0xffffff9b
    1040:	66005248 	strvs	r5, [r0], -r8, asr #4
    1044:	7467616c 	strbtvc	r6, [r7], #-364	; 0xfffffe94
    1048:	4300706d 	movwmi	r7, #109	; 0x6d
    104c:	415f4e41 	cmpmi	pc, r1, asr #28
    1050:	004d5557 	subeq	r5, sp, r7, asr r5
    1054:	46494673 			; <UNDEFINED> instruction: 0x46494673
    1058:	69614d4f 	stmdbvs	r1!, {r0, r1, r2, r3, r6, r8, sl, fp, lr}^
    105c:	786f426c 	stmdavc	pc!, {r2, r3, r5, r6, r9, lr}^	; <UNPREDICTABLE>
    1060:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1064:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    1068:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    106c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1070:	43007375 	movwmi	r7, #885	; 0x375
    1074:	525f4e41 	subspl	r4, pc, #1040	; 0x410
    1078:	004d4c46 	subeq	r4, sp, r6, asr #24
    107c:	5f4e4143 	svcpl	0x004e4143
    1080:	6f435449 	svcvs	0x00435449
    1084:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1088:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    108c:	41430078 	hvcmi	12296	; 0x3008
    1090:	69465f4e 	stmdbvs	r6, {r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1094:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1098:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    109c:	69746176 	ldmdbvs	r4!, {r1, r2, r4, r5, r6, r8, sp, lr}^
    10a0:	43006e6f 	movwmi	r6, #3695	; 0xe6f
    10a4:	525f4e41 	subspl	r4, pc, #1040	; 0x410
    10a8:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    10ac:	54006576 	strpl	r6, [r0], #-1398	; 0xfffffa8a
    10b0:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
    10b4:	4d74696d 			; <UNDEFINED> instruction: 0x4d74696d
    10b8:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    10bc:	4300786f 	movwmi	r7, #2159	; 0x86f
    10c0:	6b636568 	blvs	18da668 <startup-0x1e725998>
    10c4:	74535449 	ldrbvc	r5, [r3], #-1097	; 0xfffffbb7
    10c8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    10cc:	6e614300 	cdpvs	3, 6, cr4, cr1, cr0, {0}
    10d0:	734d7854 	movtvc	r7, #55380	; 0xd854
    10d4:	41430067 	cmpmi	r3, r7, rrx
    10d8:	6c435f4e 	mcrrvs	15, 4, r5, r3, cr14
    10dc:	49726165 	ldmdbmi	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    10e0:	6e655054 	mcrvs	0, 3, r5, cr5, cr4, {2}
    10e4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    10e8:	00746942 	rsbseq	r6, r4, r2, asr #18
    10ec:	5f4e4143 	svcpl	0x004e4143
    10f0:	50465854 	subpl	r5, r6, r4, asr r8
    10f4:	61727400 	cmnvs	r2, r0, lsl #8
    10f8:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    10fc:	616d5f74 	smcvs	54772	; 0xd5f4
    1100:	6f626c69 	svcvs	0x00626c69
    1104:	41430078 	hvcmi	12296	; 0x3008
    1108:	54545f4e 	ldrbpl	r5, [r4], #-3918	; 0xfffff0b2
    110c:	43004d43 	movwmi	r4, #3395	; 0xd43
    1110:	475f4e41 	ldrbmi	r4, [pc, -r1, asr #28]
    1114:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0xfffffb9b
    1118:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    111c:	72724565 	rsbsvc	r4, r2, #423624704	; 0x19400000
    1120:	6f43726f 	svcvs	0x0043726f
    1124:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    1128:	69660072 	stmdbvs	r6!, {r1, r4, r5, r6}^
    112c:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    1130:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    1134:	5f726562 	svcpl	0x00726562
    1138:	5f746962 	svcpl	0x00746962
    113c:	00736f70 	rsbseq	r6, r3, r0, ror pc
    1140:	5f4e4143 	svcpl	0x004e4143
    1144:	00574a53 	subseq	r4, r7, r3, asr sl
    1148:	656b6177 	strbvs	r6, [fp, #-375]!	; 0xfffffe89
    114c:	74737075 	ldrbtvc	r7, [r3], #-117	; 0xffffff8b
    1150:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1154:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    1158:	6c69465f 	stclvs	6, cr4, [r9], #-380	; 0xfffffe84
    115c:	49726574 	ldmdbmi	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1160:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1164:	5f4e4143 	svcpl	0x004e4143
    1168:	5452414e 	ldrbpl	r4, [r2], #-334	; 0xfffffeb2
    116c:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
    1170:	63615f74 	cmnvs	r1, #116, 30	; 0x1d0
    1174:	5352006b 	cmppl	r2, #107	; 0x6b
    1178:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    117c:	52003144 	andpl	r3, r0, #68, 2
    1180:	575f4354 			; <UNDEFINED> instruction: 0x575f4354
    1184:	5f50554b 	svcpl	0x0050554b
    1188:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    118c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1190:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    1194:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1198:	4349564e 	movtmi	r5, #38478	; 0x964e
    119c:	616e455f 	cmnvs	lr, pc, asr r5
    11a0:	49656c62 	stmdbmi	r5!, {r1, r5, r6, sl, fp, sp, lr}^
    11a4:	44005152 	strmi	r5, [r0], #-338	; 0xfffffeae
    11a8:	5f31414d 	svcpl	0x0031414d
    11ac:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    11b0:	5f366d61 	svcpl	0x00366d61
    11b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    11b8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    11bc:	50555f38 	subspl	r5, r5, r8, lsr pc
    11c0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    11c4:	495f3331 	ldmdbmi	pc, {r0, r4, r5, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    11c8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    11cc:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    11d0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    11d4:	414d4400 	cmpmi	sp, r0, lsl #8
    11d8:	74535f32 	ldrbvc	r5, [r3], #-3890	; 0xfffff0ce
    11dc:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    11e0:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    11e4:	56006e51 			; <UNDEFINED> instruction: 0x56006e51
    11e8:	00524f54 	subseq	r4, r2, r4, asr pc
    11ec:	33495053 	movtcc	r5, #36947	; 0x9053
    11f0:	5152495f 	cmppl	r2, pc, asr r9
    11f4:	4c46006e 	mcrrmi	0, 6, r0, r6, cr14
    11f8:	5f485341 	svcpl	0x00485341
    11fc:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1200:	61737500 	cmnvs	r3, r0, lsl #10
    1204:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
    1208:	00646e65 	rsbeq	r6, r4, r5, ror #28
    120c:	494d4344 	stmdbmi	sp, {r2, r6, r8, r9, lr}^
    1210:	5152495f 	cmppl	r2, pc, asr r9
    1214:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    1218:	495f324d 	ldmdbmi	pc, {r0, r2, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    121c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1220:	706e6163 	rsbvc	r6, lr, r3, ror #2
    1224:	0074726f 	rsbseq	r7, r4, pc, ror #4
    1228:	52504349 	subspl	r4, r0, #603979777	; 0x24000001
    122c:	4d554400 	cfldrdmi	mvd4, [r5, #-0]
    1230:	41430050 	qdaddmi	r0, r0, r3
    1234:	525f324e 	subspl	r3, pc, #-536870908	; 0xe0000004
    1238:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
    123c:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1240:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1244:	495f3654 	ldmdbmi	pc, {r2, r4, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
    1248:	006e5152 	rsbeq	r5, lr, r2, asr r1
    124c:	32495053 	subcc	r5, r9, #83	; 0x53
    1250:	5152495f 	cmppl	r2, pc, asr r9
    1254:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    1258:	425f384d 	subsmi	r3, pc, #5046272	; 0x4d0000
    125c:	545f4b52 	ldrbpl	r4, [pc], #-2898	; 1264 <startup-0x1fffed9c>
    1260:	32314d49 	eorscc	r4, r1, #4672	; 0x1240
    1264:	5152495f 	cmppl	r2, pc, asr r9
    1268:	4941006e 	stmdbmi	r1, {r1, r2, r3, r5, r6}^
    126c:	00524352 	subseq	r4, r2, r2, asr r3
    1270:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1274:	50430054 	subpl	r0, r3, r4, asr r0
    1278:	00444955 	subeq	r4, r4, r5, asr r9
    127c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    1280:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
    1284:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    1288:	61657274 	smcvs	22308	; 0x5724
    128c:	495f356d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    1290:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1294:	314d4954 	cmpcc	sp, r4, asr r9
    1298:	4752545f 			; <UNDEFINED> instruction: 0x4752545f
    129c:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 1128 <startup-0x1fffeed8>
    12a0:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    12a4:	495f3131 	ldmdbmi	pc, {r0, r4, r5, r8, ip, sp}^	; <UNPREDICTABLE>
    12a8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    12ac:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0xfffff6ad
    12b0:	5f6b6369 	svcpl	0x006b6369
    12b4:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    12b8:	41535500 	cmpmi	r3, r0, lsl #10
    12bc:	5f335452 	svcpl	0x00335452
    12c0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    12c4:	53434900 	movtpl	r4, #14592	; 0x3900
    12c8:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    12cc:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    12d0:	61657274 	smcvs	22308	; 0x5724
    12d4:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    12d8:	006e5152 	rsbeq	r5, lr, r2, asr r1
    12dc:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    12e0:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    12e4:	346d6165 	strbtcc	r6, [sp], #-357	; 0xfffffe9b
    12e8:	5152495f 	cmppl	r2, pc, asr r9
    12ec:	4149006e 	cmpmi	r9, lr, rrx
    12f0:	49005242 	stmdbmi	r0, {r1, r6, r9, ip, lr}
    12f4:	5f314332 	svcpl	0x00314332
    12f8:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    12fc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1300:	324e4143 	subcc	r4, lr, #-1073741808	; 0xc0000010
    1304:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
    1308:	5152495f 	cmppl	r2, pc, asr r9
    130c:	4954006e 	ldmdbmi	r4, {r1, r2, r3, r5, r6}^
    1310:	495f354d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    1314:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1318:	67617355 			; <UNDEFINED> instruction: 0x67617355
    131c:	75614665 	strbvc	r4, [r1, #-1637]!	; 0xfffff99b
    1320:	495f746c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1324:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1328:	5f424353 	svcpl	0x00424353
    132c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1330:	53464400 	movtpl	r4, #25600	; 0x6400
    1334:	41430052 	qdaddmi	r0, r2, r3
    1338:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
    133c:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
    1340:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1344:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
    1348:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
    134c:	32646573 	rsbcc	r6, r4, #482344960	; 0x1cc00000
    1350:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
    1354:	33646573 	cmncc	r4, #482344960	; 0x1cc00000
    1358:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
    135c:	34646573 	strbtcc	r6, [r4], #-1395	; 0xfffffa8d
    1360:	756e5500 	strbvc	r5, [lr, #-1280]!	; 0xfffffb00
    1364:	35646573 	strbcc	r6, [r4, #-1395]!	; 0xfffffa8d
    1368:	735f5f00 	cmpvc	pc, #0, 30
    136c:	425f7465 	subsmi	r7, pc, #1694498816	; 0x65000000
    1370:	50455341 	subpl	r5, r5, r1, asr #6
    1374:	43004952 	movwmi	r4, #2386	; 0x952
    1378:	465f4e41 	ldrbmi	r4, [pc], -r1, asr #28
    137c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1380:	696e4972 	stmdbvs	lr!, {r1, r4, r5, r6, r8, fp, lr}^
    1384:	72745374 	rsbsvc	r5, r4, #116, 6	; 0xd0000001
    1388:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0xfffffc8b
    138c:	54006572 	strpl	r6, [r0], #-1394	; 0xfffffa8e
    1390:	5f344d49 	svcpl	0x00344d49
    1394:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1398:	43485300 	movtmi	r5, #33536	; 0x8300
    139c:	53005253 	movwpl	r5, #595	; 0x253
    13a0:	00524954 	subseq	r4, r2, r4, asr r9
    13a4:	31433249 	cmpcc	r3, r9, asr #4
    13a8:	5f56455f 	svcpl	0x0056455f
    13ac:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    13b0:	53414800 	movtpl	r4, #6144	; 0x1800
    13b4:	4e525f48 	cdpmi	15, 5, cr5, cr2, cr8, {2}
    13b8:	52495f47 	subpl	r5, r9, #284	; 0x11c
    13bc:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
    13c0:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    13c4:	55003064 	strpl	r3, [r0, #-100]	; 0xffffff9c
    13c8:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
    13cc:	43003164 	movwmi	r3, #356	; 0x164
    13d0:	495f4e41 	ldmdbmi	pc, {r0, r6, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    13d4:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    13d8:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    13dc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    13e0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
    13e4:	43435f31 	movtmi	r5, #16177	; 0x3f31
    13e8:	5152495f 	cmppl	r2, pc, asr r9
    13ec:	4143006e 	cmpmi	r3, lr, rrx
    13f0:	67734d4e 	ldrbvs	r4, [r3, -lr, asr #26]!
    13f4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    13f8:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    13fc:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1400:	314e4143 	cmpcc	lr, r3, asr #2
    1404:	5f58545f 	svcpl	0x0058545f
    1408:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    140c:	414d4400 	cmpmi	sp, r0, lsl #8
    1410:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
    1414:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1418:	52495f35 	subpl	r5, r9, #53, 30	; 0xd4
    141c:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    1420:	5f384d49 	svcpl	0x00384d49
    1424:	5f475254 	svcpl	0x00475254
    1428:	5f4d4f43 	svcpl	0x004d4f43
    142c:	314d4954 	cmpcc	sp, r4, asr r9
    1430:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    1434:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    1438:	5f32414d 	svcpl	0x0032414d
    143c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    1440:	5f376d61 	svcpl	0x00376d61
    1444:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1448:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    144c:	5f53465f 	svcpl	0x0053465f
    1450:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1454:	73745f00 	cmnvc	r4, #0, 30
    1458:	61686374 	smcvs	34356	; 0x8634
    145c:	6f4e0072 	svcvs	0x004e0072
    1460:	73614d6e 	cmnvc	r1, #7040	; 0x1b80
    1464:	6c62616b 	stfvse	f6, [r2], #-428	; 0xfffffe54
    1468:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    146c:	5152495f 	cmppl	r2, pc, asr r9
    1470:	5757006e 	ldrbpl	r0, [r7, -lr, rrx]
    1474:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1478:	006e5152 	rsbeq	r5, lr, r2, asr r1
    147c:	5f47544f 	svcpl	0x0047544f
    1480:	575f5348 	ldrbpl	r5, [pc, -r8, asr #6]
    1484:	5f50554b 	svcpl	0x0050554b
    1488:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    148c:	6d654d00 	stclvs	13, cr4, [r5, #-0]
    1490:	4d79726f 	lfmmi	f7, 2, [r9, #-444]!	; 0xfffffe44
    1494:	67616e61 	strbvs	r6, [r1, -r1, ror #28]!
    1498:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    149c:	52495f74 	subpl	r5, r9, #116, 30	; 0x1d0
    14a0:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    14a4:	5f504d41 	svcpl	0x00504d41
    14a8:	4d415453 	cfstrdmi	mvd5, [r1, #-332]	; 0xfffffeb4
    14ac:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
    14b0:	63006e51 	movwvs	r6, #3665	; 0xe51
    14b4:	735f6e61 	cmpvc	pc, #1552	; 0x610
    14b8:	00646e65 	rsbeq	r6, r4, r5, ror #28
    14bc:	314e4143 	cmpcc	lr, r3, asr #2
    14c0:	4543535f 	strbmi	r5, [r3, #-863]	; 0xfffffca1
    14c4:	5152495f 	cmppl	r2, pc, asr r9
    14c8:	5249006e 	subpl	r0, r9, #110	; 0x6e
    14cc:	545f6e51 	ldrbpl	r6, [pc], #-3665	; 14d4 <startup-0x1fffeb2c>
    14d0:	00657079 	rsbeq	r7, r5, r9, ror r0
    14d4:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    14d8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    14dc:	306d6165 	rsbcc	r6, sp, r5, ror #2
    14e0:	5152495f 	cmppl	r2, pc, asr r9
    14e4:	6163006e 	cmnvs	r3, lr, rrx
    14e8:	65725f6e 	ldrbvs	r5, [r2, #-3950]!	; 0xfffff092
    14ec:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    14f0:	32490065 	subcc	r0, r9, #101	; 0x65
    14f4:	455f3243 	ldrbmi	r3, [pc, #-579]	; 12b9 <startup-0x1fffed47>
    14f8:	52495f52 	subpl	r5, r9, #328	; 0x148
    14fc:	42006e51 	andmi	r6, r0, #1296	; 0x510
    1500:	61467375 	hvcvs	26421	; 0x6735
    1504:	5f746c75 	svcpl	0x00746c75
    1508:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    150c:	52415500 	subpl	r5, r1, #0, 10
    1510:	495f3554 	ldmdbmi	pc, {r2, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    1514:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1518:	314d4954 	cmpcc	sp, r4, asr r9
    151c:	4b52425f 	blmi	1491ea0 <startup-0x1eb6e160>
    1520:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    1524:	52495f39 	subpl	r5, r9, #57, 30	; 0xe4
    1528:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    152c:	5f374d49 	svcpl	0x00374d49
    1530:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1534:	48544500 	ldmdami	r4, {r8, sl, lr}^
    1538:	554b575f 	strbpl	r5, [fp, #-1887]	; 0xfffff8a1
    153c:	52495f50 	subpl	r5, r9, #80, 30	; 0x140
    1540:	4f006e51 	svcmi	0x00006e51
    1544:	485f4754 	ldmdami	pc, {r2, r4, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1548:	52495f53 	subpl	r5, r9, #332	; 0x14c
    154c:	53006e51 	movwpl	r6, #3665	; 0xe51
    1550:	5f314950 	svcpl	0x00314950
    1554:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1558:	43565300 	cmpmi	r6, #0, 6
    155c:	5f6c6c61 	svcpl	0x006c6c61
    1560:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1564:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
    1568:	61686374 	smcvs	34356	; 0x8634
    156c:	50460072 	subpl	r0, r6, r2, ror r0
    1570:	52495f55 	subpl	r5, r9, #340	; 0x154
    1574:	55006e51 	strpl	r6, [r0, #-3665]	; 0xfffff1af
    1578:	34545241 	ldrbcc	r5, [r4], #-577	; 0xfffffdbf
    157c:	5152495f 	cmppl	r2, pc, asr r9
    1580:	7562006e 	strbvc	r0, [r2, #-110]!	; 0xffffff92
    1584:	4f006666 	svcmi	0x00006666
    1588:	465f4754 			; <UNDEFINED> instruction: 0x465f4754
    158c:	4b575f53 	blmi	15d92e0 <startup-0x1ea26d20>
    1590:	495f5055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, lr}^	; <UNPREDICTABLE>
    1594:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1598:	364d4954 			; <UNDEFINED> instruction: 0x364d4954
    159c:	4341445f 	movtmi	r4, #5215	; 0x145f
    15a0:	5152495f 	cmppl	r2, pc, asr r9
    15a4:	3249006e 	subcc	r0, r9, #110	; 0x6e
    15a8:	455f3243 	ldrbmi	r3, [pc, #-579]	; 136d <startup-0x1fffec93>
    15ac:	52495f56 	subpl	r5, r9, #344	; 0x158
    15b0:	42006e51 	andmi	r6, r0, #1296	; 0x510
    15b4:	00524146 	subseq	r4, r2, r6, asr #2
    15b8:	31414d44 	cmpcc	r1, r4, asr #26
    15bc:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    15c0:	316d6165 	cmncc	sp, r5, ror #2
    15c4:	5152495f 	cmppl	r2, pc, asr r9
    15c8:	6163006e 	cmnvs	r3, lr, rrx
    15cc:	695f316e 	ldmdbvs	pc, {r1, r2, r3, r5, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    15d0:	0074696e 	rsbseq	r6, r4, lr, ror #18
    15d4:	32414d44 	subcc	r4, r1, #68, 26	; 0x1100
    15d8:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    15dc:	336d6165 	cmncc	sp, #1073741849	; 0x40000019
    15e0:	5152495f 	cmppl	r2, pc, asr r9
    15e4:	4143006e 	cmpmi	r3, lr, rrx
    15e8:	545f324e 	ldrbpl	r3, [pc], #-590	; 15f0 <startup-0x1fffea10>
    15ec:	52495f58 	subpl	r5, r9, #88, 30	; 0x160
    15f0:	56006e51 			; <UNDEFINED> instruction: 0x56006e51
    15f4:	4664696f 	strbtmi	r6, [r4], -pc, ror #18
    15f8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
    15fc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1600:	31414d44 	cmpcc	r1, r4, asr #26
    1604:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
    1608:	306d6165 	rsbcc	r6, sp, r5, ror #2
    160c:	5152495f 	cmppl	r2, pc, asr r9
    1610:	5452006e 	ldrbpl	r0, [r2], #-110	; 0xffffff92
    1614:	6c415f43 	mcrrvs	15, 4, r5, r1, cr3
    1618:	5f6d7261 	svcpl	0x006d7261
    161c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1620:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1624:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1628:	49006570 	stmdbmi	r0, {r4, r5, r6, r8, sl, sp, lr}
    162c:	5f334332 	svcpl	0x00334332
    1630:	495f5245 	ldmdbmi	pc, {r0, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    1634:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1638:	50595243 	subspl	r5, r9, r3, asr #4
    163c:	5152495f 	cmppl	r2, pc, asr r9
    1640:	5845006e 	stmdapl	r5, {r1, r2, r3, r5, r6}^
    1644:	35314954 	ldrcc	r4, [r1, #-2388]!	; 0xfffff6ac
    1648:	5f30315f 	svcpl	0x0030315f
    164c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1650:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    1654:	00687467 	rsbeq	r7, r8, r7, ror #8
    1658:	334d4954 	movtcc	r4, #55636	; 0xd954
    165c:	5152495f 	cmppl	r2, pc, asr r9
    1660:	5355006e 	cmppl	r5, #110	; 0x6e
    1664:	31545241 	cmpcc	r4, r1, asr #4
    1668:	5152495f 	cmppl	r2, pc, asr r9
    166c:	5047006e 	subpl	r0, r7, lr, rrx
    1670:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    1674:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1678:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    167c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
    1680:	2f3a4300 	svccs	0x003a4300
    1684:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1688:	616e2f73 	smcvs	58099	; 0xe2f3
    168c:	2f66697a 	svccs	0x0066697a
    1690:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
    1694:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1698:	764f2f73 			; <UNDEFINED> instruction: 0x764f2f73
    169c:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    16a0:	632f325f 			; <UNDEFINED> instruction: 0x632f325f
    16a4:	732f6e61 			; <UNDEFINED> instruction: 0x732f6e61
    16a8:	632f6372 			; <UNDEFINED> instruction: 0x632f6372
    16ac:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
    16b0:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
    16b4:	58525f32 	ldmdapl	r2, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
    16b8:	52495f31 	subpl	r5, r9, #49, 30	; 0xc4
    16bc:	41006e51 	tstmi	r0, r1, asr lr
    16c0:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    16c4:	006e5152 	rsbeq	r5, lr, r2, asr r1
    16c8:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    16cc:	44565000 	ldrbmi	r5, [r6], #-0
    16d0:	5152495f 	cmppl	r2, pc, asr r9
    16d4:	4641006e 	strbmi	r0, [r1], -lr, rrx
    16d8:	46005253 			; <UNDEFINED> instruction: 0x46005253
    16dc:	5f434d53 	svcpl	0x00434d53
    16e0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    16e4:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    16e8:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
    16ec:	006e5152 	rsbeq	r5, lr, r2, asr r1
    16f0:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
    16f4:	414d4400 	cmpmi	sp, r0, lsl #8
    16f8:	74535f31 	ldrbvc	r5, [r3], #-3889	; 0xfffff0cf
    16fc:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1700:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    1704:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    1708:	5f32414d 	svcpl	0x0032414d
    170c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    1710:	5f366d61 	svcpl	0x00366d61
    1714:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1718:	62654400 	rsbvs	r4, r5, #0, 8
    171c:	6f4d6775 	svcvs	0x004d6775
    1720:	6f74696e 	svcvs	0x0074696e
    1724:	52495f72 	subpl	r5, r9, #456	; 0x1c8
    1728:	49006e51 	stmdbmi	r0, {r0, r4, r6, r9, sl, fp, sp, lr}
    172c:	5f334332 	svcpl	0x00334332
    1730:	495f5645 	ldmdbmi	pc, {r0, r2, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    1734:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1738:	5f485445 	svcpl	0x00485445
    173c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1740:	464d4d00 	strbmi	r4, [sp], -r0, lsl #26
    1744:	4d4d0052 	stclmi	0, cr0, [sp, #-328]	; 0xfffffeb8
    1748:	00524146 	subseq	r4, r2, r6, asr #2
    174c:	5f434352 	svcpl	0x00434352
    1750:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1754:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
    1758:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    175c:	6f6e0079 	svcvs	0x006e0079
    1760:	64496564 	strbvs	r6, [r9], #-1380	; 0xfffffa9c
    1764:	41534900 	cmpmi	r3, r0, lsl #18
    1768:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
    176c:	535f3141 	cmppl	pc, #1073741840	; 0x40000010
    1770:	61657274 	smcvs	22308	; 0x5724
    1774:	495f336d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    1778:	006e5152 	rsbeq	r5, lr, r2, asr r1
    177c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1780:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    1784:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1788:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
    178c:	49540078 	ldmdbmi	r4, {r3, r4, r5, r6}^
    1790:	555f314d 	ldrbpl	r3, [pc, #-333]	; 164b <startup-0x1fffe9b5>
    1794:	49545f50 	ldmdbmi	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    1798:	5f30314d 	svcpl	0x0030314d
    179c:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    17a0:	47544f00 	ldrbmi	r4, [r4, -r0, lsl #30]
    17a4:	5f53485f 	svcpl	0x0053485f
    17a8:	5f315045 	svcpl	0x00315045
    17ac:	5f54554f 	svcpl	0x0054554f
    17b0:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    17b4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    17b8:	65535f43 	ldrbvs	r5, [r3, #-3907]	; 0xfffff0bd
    17bc:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
    17c0:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
    17c4:	41430079 	hvcmi	12297	; 0x3009
    17c8:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
    17cc:	495f3158 	ldmdbmi	pc, {r3, r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    17d0:	006e5152 	rsbeq	r5, lr, r2, asr r1
    17d4:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    17d8:	70757272 	rsbsvc	r7, r5, r2, ror r2
    17dc:	74670074 	strbtvc	r0, [r7], #-116	; 0xffffff8c
    17e0:	45007270 	strmi	r7, [r0, #-624]	; 0xfffffd90
    17e4:	39495458 	stmdbcc	r9, {r3, r4, r6, sl, ip, lr}^
    17e8:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
    17ec:	006e5152 	rsbeq	r5, lr, r2, asr r1
    17f0:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    17f4:	52495f34 	subpl	r5, r9, #52, 30	; 0xd0
    17f8:	54006e51 	strpl	r6, [r0], #-3665	; 0xfffff1af
    17fc:	5f384d49 	svcpl	0x00384d49
    1800:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1804:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1808:	4f494453 	svcmi	0x00494453
    180c:	5152495f 	cmppl	r2, pc, asr r9
    1810:	5043006e 	subpl	r0, r3, lr, rrx
    1814:	00524341 	subseq	r4, r2, r1, asr #6
    1818:	52505349 	subspl	r5, r0, #603979777	; 0x24000001
    181c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0xfffffb00
    1820:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
    1824:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1828:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
    182c:	495f5653 	ldmdbmi	pc, {r0, r1, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    1830:	006e5152 	rsbeq	r5, lr, r2, asr r1
    1834:	5f47544f 	svcpl	0x0047544f
    1838:	455f5348 	ldrbmi	r5, [pc, #-840]	; 14f8 <startup-0x1fffeb08>
    183c:	495f3150 	ldmdbmi	pc, {r4, r6, r8, ip, sp}^	; <UNPREDICTABLE>
    1840:	52495f4e 	subpl	r5, r9, #312	; 0x138
    1844:	44006e51 	strmi	r6, [r0], #-3665	; 0xfffff1af
    1848:	5f31414d 	svcpl	0x0031414d
    184c:	65727453 	ldrbvs	r7, [r2, #-1107]!	; 0xfffffbad
    1850:	5f376d61 	svcpl	0x00376d61
    1854:	6e515249 	cdpvs	2, 5, cr5, cr1, cr9, {2}
    1858:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0xfffff700
    185c:	63750052 	cmnvs	r5, #82	; 0x52
    1860:	00726168 	rsbseq	r6, r2, r8, ror #2
    1864:	4967736d 	stmdbmi	r7!, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1868:	4d440064 	stclmi	0, cr0, [r4, #-400]	; 0xfffffe70
    186c:	535f3241 	cmppl	pc, #268435460	; 0x10000004
    1870:	61657274 	smcvs	22308	; 0x5724
    1874:	495f326d 	ldmdbmi	pc, {r0, r2, r3, r5, r6, r9, ip, sp}^	; <UNPREDICTABLE>
    1878:	006e5152 	rsbeq	r5, lr, r2, asr r1
    187c:	6e69616d 	powvsez	f6, f1, #5.0
    1880:	2f3a4300 	svccs	0x003a4300
    1884:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1888:	616e2f73 	smcvs	58099	; 0xe2f3
    188c:	2f66697a 	svccs	0x0066697a
    1890:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
    1894:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
    1898:	764f2f73 			; <UNDEFINED> instruction: 0x764f2f73
    189c:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    18a0:	412f325f 			; <UNDEFINED> instruction: 0x412f325f
    18a4:	6d72616c 	ldfvse	f6, [r2, #-432]!	; 0xfffffe50
    18a8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    18ac:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 16e4 <startup-0x1fffe91c>
    18b0:	2f72656c 	svccs	0x0072656c
    18b4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    18b8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    18bc:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
    18c0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    18c4:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0xffffff90
    18c8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    18cc:	Address 0x000018cc is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <APBAHBPrescTable+0xdfffc856>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000070 	andeq	r0, r0, r0, ror r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000080 	andcs	r0, r0, r0, lsl #1
  38:	00000028 	andeq	r0, r0, r8, lsr #32
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	100e4101 	andne	r4, lr, r1, lsl #2
  48:	00070d41 	andeq	r0, r7, r1, asr #26
  4c:	00000020 	andeq	r0, r0, r0, lsr #32
  50:	00000000 	andeq	r0, r0, r0
  54:	200000a8 	andcs	r0, r0, r8, lsr #1
  58:	0000005e 	andeq	r0, r0, lr, asr r0
  5c:	400c0e41 	andmi	r0, ip, r1, asr #28
  60:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  64:	018e4002 	orreq	r4, lr, r2
  68:	41180e41 	tstmi	r8, r1, asr #28
  6c:	0000070d 	andeq	r0, r0, sp, lsl #14
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000106 	andcs	r0, r0, r6, lsl #2
  7c:	0000003e 	andeq	r0, r0, lr, lsr r0
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000144 	andcs	r0, r0, r4, asr #2
  9c:	00000020 	andeq	r0, r0, r0, lsr #32
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	100e4101 	andne	r4, lr, r1, lsl #2
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000164 	andcs	r0, r0, r4, ror #2
  bc:	00000044 	andeq	r0, r0, r4, asr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	200001a8 	andcs	r0, r0, r8, lsr #3
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200001c8 	andcs	r0, r0, r8, asr #3
  fc:	0000003c 	andeq	r0, r0, ip, lsr r0
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	180e4101 	stmdane	lr, {r0, r8, lr}
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000204 	andcs	r0, r0, r4, lsl #4
 11c:	00000020 	andeq	r0, r0, r0, lsr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000224 	andcs	r0, r0, r4, lsr #4
 13c:	00000028 	andeq	r0, r0, r8, lsr #32
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	100e4101 	andne	r4, lr, r1, lsl #2
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	2000024c 	andcs	r0, r0, ip, asr #4
 15c:	00000020 	andeq	r0, r0, r0, lsr #32
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	2000026c 	andcs	r0, r0, ip, ror #4
 17c:	00000030 	andeq	r0, r0, r0, lsr r0
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	180e4101 	stmdane	lr, {r0, r8, lr}
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	2000029c 	mulcs	r0, ip, r2
 19c:	00000020 	andeq	r0, r0, r0, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 1bc:	00000020 	andeq	r0, r0, r0, lsr #32
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	100e4101 	andne	r4, lr, r1, lsl #2
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	200002dc 	ldrdcs	r0, [r0], -ip
 1dc:	00000040 	andeq	r0, r0, r0, asr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	2000031c 	andcs	r0, r0, ip, lsl r3
 1fc:	0000003c 	andeq	r0, r0, ip, lsr r0
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	180e4101 	stmdane	lr, {r0, r8, lr}
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000358 	andcs	r0, r0, r8, asr r3
 21c:	00000034 	andeq	r0, r0, r4, lsr r0
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	180e4101 	stmdane	lr, {r0, r8, lr}
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	00000018 	andeq	r0, r0, r8, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	2000038c 	andcs	r0, r0, ip, lsl #7
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	40080e41 	andmi	r0, r8, r1, asr #28
 244:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 248:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	00000000 	andeq	r0, r0, r0
 254:	200003a8 	andcs	r0, r0, r8, lsr #7
 258:	00000034 	andeq	r0, r0, r4, lsr r0
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	180e4101 	stmdane	lr, {r0, r8, lr}
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	00000000 	andeq	r0, r0, r0
 274:	200003dc 	ldrdcs	r0, [r0], -ip
 278:	00000038 	andeq	r0, r0, r8, lsr r0
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	180e4101 	stmdane	lr, {r0, r8, lr}
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000414 	andcs	r0, r0, r4, lsl r4
 298:	0000003c 	andeq	r0, r0, ip, lsr r0
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	20000450 	andcs	r0, r0, r0, asr r4
 2b8:	00000158 	andeq	r0, r0, r8, asr r1
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	280e4101 	stmdacs	lr, {r0, r8, lr}
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	200005a8 	andcs	r0, r0, r8, lsr #11
 2d8:	00000060 	andeq	r0, r0, r0, rrx
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	20000608 	andcs	r0, r0, r8, lsl #12
 2f8:	00000020 	andeq	r0, r0, r0, lsr #32
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	100e4101 	andne	r4, lr, r1, lsl #2
 308:	00070d41 	andeq	r0, r7, r1, asr #26
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	00000000 	andeq	r0, r0, r0
 314:	20000628 	andcs	r0, r0, r8, lsr #12
 318:	00000020 	andeq	r0, r0, r0, lsr #32
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	100e4101 	andne	r4, lr, r1, lsl #2
 328:	00070d41 	andeq	r0, r7, r1, asr #26
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000000 	andeq	r0, r0, r0
 334:	20000648 	andcs	r0, r0, r8, asr #12
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	00000000 	andeq	r0, r0, r0
 354:	20000664 	andcs	r0, r0, r4, ror #12
 358:	0000003c 	andeq	r0, r0, ip, lsr r0
 35c:	40080e41 	andmi	r0, r8, r1, asr #28
 360:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 364:	180e4101 	stmdane	lr, {r0, r8, lr}
 368:	00070d41 	andeq	r0, r7, r1, asr #26
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	200006a0 	andcs	r0, r0, r0, lsr #13
 378:	00000040 	andeq	r0, r0, r0, asr #32
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	180e4101 	stmdane	lr, {r0, r8, lr}
 388:	00070d41 	andeq	r0, r7, r1, asr #26
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	200006e0 	andcs	r0, r0, r0, ror #13
 398:	0000003c 	andeq	r0, r0, ip, lsr r0
 39c:	40080e41 	andmi	r0, r8, r1, asr #28
 3a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3a8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	2000071c 	andcs	r0, r0, ip, lsl r7
 3b8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3bc:	40080e41 	andmi	r0, r8, r1, asr #28
 3c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3c8:	00070d41 	andeq	r0, r7, r1, asr #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	20000758 	andcs	r0, r0, r8, asr r7
 3d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3dc:	40080e41 	andmi	r0, r8, r1, asr #28
 3e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3e4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e8:	00070d41 	andeq	r0, r7, r1, asr #26
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	00000000 	andeq	r0, r0, r0
 3f4:	20000794 	mulcs	r0, r4, r7
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	40080e41 	andmi	r0, r8, r1, asr #28
 400:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 404:	100e4101 	andne	r4, lr, r1, lsl #2
 408:	00070d41 	andeq	r0, r7, r1, asr #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	00000000 	andeq	r0, r0, r0
 414:	200007b0 			; <UNDEFINED> instruction: 0x200007b0
 418:	00000040 	andeq	r0, r0, r0, asr #32
 41c:	40080e41 	andmi	r0, r8, r1, asr #28
 420:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 424:	100e4101 	andne	r4, lr, r1, lsl #2
 428:	00070d41 	andeq	r0, r7, r1, asr #26
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 438:	00000040 	andeq	r0, r0, r0, asr #32
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	100e4101 	andne	r4, lr, r1, lsl #2
 448:	00070d41 	andeq	r0, r7, r1, asr #26
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	00000000 	andeq	r0, r0, r0
 454:	20000830 	andcs	r0, r0, r0, lsr r8
 458:	00000040 	andeq	r0, r0, r0, asr #32
 45c:	40080e41 	andmi	r0, r8, r1, asr #28
 460:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 464:	100e4101 	andne	r4, lr, r1, lsl #2
 468:	00070d41 	andeq	r0, r7, r1, asr #26
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	20000870 	andcs	r0, r0, r0, ror r8
 478:	00000040 	andeq	r0, r0, r0, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	00000000 	andeq	r0, r0, r0
 494:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	100e4101 	andne	r4, lr, r1, lsl #2
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	200008f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 4b8:	00000040 	andeq	r0, r0, r0, asr #32
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	100e4101 	andne	r4, lr, r1, lsl #2
 4c8:	00070d41 	andeq	r0, r7, r1, asr #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	20000930 	andcs	r0, r0, r0, lsr r9
 4d8:	00000040 	andeq	r0, r0, r0, asr #32
 4dc:	40080e41 	andmi	r0, r8, r1, asr #28
 4e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e4:	100e4101 	andne	r4, lr, r1, lsl #2
 4e8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	20000970 	andcs	r0, r0, r0, ror r9
 4f8:	00000040 	andeq	r0, r0, r0, asr #32
 4fc:	40080e41 	andmi	r0, r8, r1, asr #28
 500:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 504:	100e4101 	andne	r4, lr, r1, lsl #2
 508:	00070d41 	andeq	r0, r7, r1, asr #26
 50c:	0000001c 	andeq	r0, r0, ip, lsl r0
 510:	00000000 	andeq	r0, r0, r0
 514:	200009b0 			; <UNDEFINED> instruction: 0x200009b0
 518:	00000040 	andeq	r0, r0, r0, asr #32
 51c:	40080e41 	andmi	r0, r8, r1, asr #28
 520:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 524:	100e4101 	andne	r4, lr, r1, lsl #2
 528:	00070d41 	andeq	r0, r7, r1, asr #26
 52c:	0000001c 	andeq	r0, r0, ip, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 538:	00000040 	andeq	r0, r0, r0, asr #32
 53c:	40080e41 	andmi	r0, r8, r1, asr #28
 540:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 544:	100e4101 	andne	r4, lr, r1, lsl #2
 548:	00070d41 	andeq	r0, r7, r1, asr #26
 54c:	0000001c 	andeq	r0, r0, ip, lsl r0
 550:	00000000 	andeq	r0, r0, r0
 554:	20000a30 	andcs	r0, r0, r0, lsr sl
 558:	00000040 	andeq	r0, r0, r0, asr #32
 55c:	40080e41 	andmi	r0, r8, r1, asr #28
 560:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 564:	100e4101 	andne	r4, lr, r1, lsl #2
 568:	00070d41 	andeq	r0, r7, r1, asr #26
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	00000000 	andeq	r0, r0, r0
 574:	20000a70 	andcs	r0, r0, r0, ror sl
 578:	00000040 	andeq	r0, r0, r0, asr #32
 57c:	40080e41 	andmi	r0, r8, r1, asr #28
 580:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 584:	100e4101 	andne	r4, lr, r1, lsl #2
 588:	00070d41 	andeq	r0, r7, r1, asr #26
 58c:	0000001c 	andeq	r0, r0, ip, lsl r0
 590:	00000000 	andeq	r0, r0, r0
 594:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 598:	00000040 	andeq	r0, r0, r0, asr #32
 59c:	40080e41 	andmi	r0, r8, r1, asr #28
 5a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a4:	100e4101 	andne	r4, lr, r1, lsl #2
 5a8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b0:	00000000 	andeq	r0, r0, r0
 5b4:	20000af0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 5b8:	00000040 	andeq	r0, r0, r0, asr #32
 5bc:	40080e41 	andmi	r0, r8, r1, asr #28
 5c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c4:	100e4101 	andne	r4, lr, r1, lsl #2
 5c8:	00070d41 	andeq	r0, r7, r1, asr #26
 5cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d0:	00000000 	andeq	r0, r0, r0
 5d4:	20000b30 	andcs	r0, r0, r0, lsr fp
 5d8:	00000040 	andeq	r0, r0, r0, asr #32
 5dc:	40080e41 	andmi	r0, r8, r1, asr #28
 5e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e4:	100e4101 	andne	r4, lr, r1, lsl #2
 5e8:	00070d41 	andeq	r0, r7, r1, asr #26
 5ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f0:	00000000 	andeq	r0, r0, r0
 5f4:	20000b70 	andcs	r0, r0, r0, ror fp
 5f8:	00000050 	andeq	r0, r0, r0, asr r0
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	100e4101 	andne	r4, lr, r1, lsl #2
 608:	00070d41 	andeq	r0, r7, r1, asr #26
 60c:	0000001c 	andeq	r0, r0, ip, lsl r0
 610:	00000000 	andeq	r0, r0, r0
 614:	20000bc0 	andcs	r0, r0, r0, asr #23
 618:	00000084 	andeq	r0, r0, r4, lsl #1
 61c:	40080e41 	andmi	r0, r8, r1, asr #28
 620:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 624:	200e4101 	andcs	r4, lr, r1, lsl #2
 628:	00070d41 	andeq	r0, r7, r1, asr #26
 62c:	00000018 	andeq	r0, r0, r8, lsl r0
 630:	00000000 	andeq	r0, r0, r0
 634:	20000c44 	andcs	r0, r0, r4, asr #24
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
 63c:	40080e41 	andmi	r0, r8, r1, asr #28
 640:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 644:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 648:	0000001c 	andeq	r0, r0, ip, lsl r0
 64c:	00000000 	andeq	r0, r0, r0
 650:	20000c60 	andcs	r0, r0, r0, ror #24
 654:	00000044 	andeq	r0, r0, r4, asr #32
 658:	40080e41 	andmi	r0, r8, r1, asr #28
 65c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 660:	180e4101 	stmdane	lr, {r0, r8, lr}
 664:	00070d41 	andeq	r0, r7, r1, asr #26
 668:	0000001c 	andeq	r0, r0, ip, lsl r0
 66c:	00000000 	andeq	r0, r0, r0
 670:	20000ca4 	andcs	r0, r0, r4, lsr #25
 674:	00000020 	andeq	r0, r0, r0, lsr #32
 678:	40080e41 	andmi	r0, r8, r1, asr #28
 67c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 680:	100e4101 	andne	r4, lr, r1, lsl #2
 684:	00070d41 	andeq	r0, r7, r1, asr #26
 688:	0000000c 	andeq	r0, r0, ip
 68c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 690:	7c020001 	stcvc	0, cr0, [r2], {1}
 694:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	00000688 	andeq	r0, r0, r8, lsl #13
 6a0:	20000cc4 	andcs	r0, r0, r4, asr #25
 6a4:	00000170 	andeq	r0, r0, r0, ror r1
 6a8:	40080e41 	andmi	r0, r8, r1, asr #28
 6ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6b0:	100e4101 	andne	r4, lr, r1, lsl #2
 6b4:	00070d41 	andeq	r0, r7, r1, asr #26
 6b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6bc:	00000688 	andeq	r0, r0, r8, lsl #13
 6c0:	20000e34 	andcs	r0, r0, r4, lsr lr
 6c4:	00000118 	andeq	r0, r0, r8, lsl r1
 6c8:	40080e41 	andmi	r0, r8, r1, asr #28
 6cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6d0:	200e4101 	andcs	r4, lr, r1, lsl #2
 6d4:	00070d41 	andeq	r0, r7, r1, asr #26
 6d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6dc:	00000688 	andeq	r0, r0, r8, lsl #13
 6e0:	20000f4c 	andcs	r0, r0, ip, asr #30
 6e4:	00000034 	andeq	r0, r0, r4, lsr r0
 6e8:	40080e41 	andmi	r0, r8, r1, asr #28
 6ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6f0:	100e4101 	andne	r4, lr, r1, lsl #2
 6f4:	00070d41 	andeq	r0, r7, r1, asr #26
 6f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6fc:	00000688 	andeq	r0, r0, r8, lsl #13
 700:	20000f80 	andcs	r0, r0, r0, lsl #31
 704:	00000046 	andeq	r0, r0, r6, asr #32
 708:	40080e41 	andmi	r0, r8, r1, asr #28
 70c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 710:	180e4101 	stmdane	lr, {r0, r8, lr}
 714:	00070d41 	andeq	r0, r7, r1, asr #26
 718:	0000001c 	andeq	r0, r0, ip, lsl r0
 71c:	00000688 	andeq	r0, r0, r8, lsl #13
 720:	20000fc6 	andcs	r0, r0, r6, asr #31
 724:	00000042 	andeq	r0, r0, r2, asr #32
 728:	40080e41 	andmi	r0, r8, r1, asr #28
 72c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 730:	180e4101 	stmdane	lr, {r0, r8, lr}
 734:	00070d41 	andeq	r0, r7, r1, asr #26
 738:	0000001c 	andeq	r0, r0, ip, lsl r0
 73c:	00000688 	andeq	r0, r0, r8, lsl #13
 740:	20001008 	andcs	r1, r0, r8
 744:	00000016 	andeq	r0, r0, r6, lsl r0
 748:	40080e41 	andmi	r0, r8, r1, asr #28
 74c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 750:	100e4101 	andne	r4, lr, r1, lsl #2
 754:	00070d41 	andeq	r0, r7, r1, asr #26
 758:	0000001c 	andeq	r0, r0, ip, lsl r0
 75c:	00000688 	andeq	r0, r0, r8, lsl #13
 760:	2000101e 	andcs	r1, r0, lr, lsl r0
 764:	00000042 	andeq	r0, r0, r2, asr #32
 768:	40080e41 	andmi	r0, r8, r1, asr #28
 76c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 770:	180e4101 	stmdane	lr, {r0, r8, lr}
 774:	00070d41 	andeq	r0, r7, r1, asr #26
 778:	0000001c 	andeq	r0, r0, ip, lsl r0
 77c:	00000688 	andeq	r0, r0, r8, lsl #13
 780:	20001060 	andcs	r1, r0, r0, rrx
 784:	00000016 	andeq	r0, r0, r6, lsl r0
 788:	40080e41 	andmi	r0, r8, r1, asr #28
 78c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 790:	100e4101 	andne	r4, lr, r1, lsl #2
 794:	00070d41 	andeq	r0, r7, r1, asr #26
 798:	0000001c 	andeq	r0, r0, ip, lsl r0
 79c:	00000688 	andeq	r0, r0, r8, lsl #13
 7a0:	20001076 	andcs	r1, r0, r6, ror r0
 7a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 7a8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7b0:	100e4101 	andne	r4, lr, r1, lsl #2
 7b4:	00070d41 	andeq	r0, r7, r1, asr #26
 7b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7bc:	00000688 	andeq	r0, r0, r8, lsl #13
 7c0:	20001094 	mulcs	r0, r4, r0
 7c4:	0000001e 	andeq	r0, r0, lr, lsl r0
 7c8:	40080e41 	andmi	r0, r8, r1, asr #28
 7cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7d0:	100e4101 	andne	r4, lr, r1, lsl #2
 7d4:	00070d41 	andeq	r0, r7, r1, asr #26
 7d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7dc:	00000688 	andeq	r0, r0, r8, lsl #13
 7e0:	200010b2 	strhcs	r1, [r0], -r2
 7e4:	0000003a 	andeq	r0, r0, sl, lsr r0
 7e8:	40080e41 	andmi	r0, r8, r1, asr #28
 7ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7f0:	100e4101 	andne	r4, lr, r1, lsl #2
 7f4:	00070d41 	andeq	r0, r7, r1, asr #26
 7f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7fc:	00000688 	andeq	r0, r0, r8, lsl #13
 800:	200010ec 	andcs	r1, r0, ip, ror #1
 804:	0000001e 	andeq	r0, r0, lr, lsl r0
 808:	40080e41 	andmi	r0, r8, r1, asr #28
 80c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 810:	100e4101 	andne	r4, lr, r1, lsl #2
 814:	00070d41 	andeq	r0, r7, r1, asr #26
 818:	0000001c 	andeq	r0, r0, ip, lsl r0
 81c:	00000688 	andeq	r0, r0, r8, lsl #13
 820:	2000110a 	andcs	r1, r0, sl, lsl #2
 824:	00000024 	andeq	r0, r0, r4, lsr #32
 828:	40080e41 	andmi	r0, r8, r1, asr #28
 82c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 830:	100e4101 	andne	r4, lr, r1, lsl #2
 834:	00070d41 	andeq	r0, r7, r1, asr #26
 838:	0000001c 	andeq	r0, r0, ip, lsl r0
 83c:	00000688 	andeq	r0, r0, r8, lsl #13
 840:	2000112e 	andcs	r1, r0, lr, lsr #2
 844:	000000a4 	andeq	r0, r0, r4, lsr #1
 848:	40080e41 	andmi	r0, r8, r1, asr #28
 84c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 850:	180e4101 	stmdane	lr, {r0, r8, lr}
 854:	00070d41 	andeq	r0, r7, r1, asr #26
 858:	0000000c 	andeq	r0, r0, ip
 85c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 860:	7c020001 	stcvc	0, cr0, [r2], {1}
 864:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 868:	0000001c 	andeq	r0, r0, ip, lsl r0
 86c:	00000858 	andeq	r0, r0, r8, asr r8
 870:	200011d4 	ldrdcs	r1, [r0], -r4
 874:	00000050 	andeq	r0, r0, r0, asr r0
 878:	40080e41 	andmi	r0, r8, r1, asr #28
 87c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 880:	100e4101 	andne	r4, lr, r1, lsl #2
 884:	00070d41 	andeq	r0, r7, r1, asr #26
 888:	0000001c 	andeq	r0, r0, ip, lsl r0
 88c:	00000858 	andeq	r0, r0, r8, asr r8
 890:	20001224 	andcs	r1, r0, r4, lsr #4
 894:	000001c4 	andeq	r0, r0, r4, asr #3
 898:	40080e41 	andmi	r0, r8, r1, asr #28
 89c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 8a4:	00070d41 	andeq	r0, r7, r1, asr #26
 8a8:	00000020 	andeq	r0, r0, r0, lsr #32
 8ac:	00000858 	andeq	r0, r0, r8, asr r8
 8b0:	200013e8 	andcs	r1, r0, r8, ror #7
 8b4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
 8b8:	400c0e41 	andmi	r0, ip, r1, asr #28
 8bc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 8c0:	018e4002 	orreq	r4, lr, r2
 8c4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 8c8:	0000070d 	andeq	r0, r0, sp, lsl #14
 8cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d0:	00000858 	andeq	r0, r0, r8, asr r8
 8d4:	20001598 	mulcs	r0, r8, r5
 8d8:	00000052 	andeq	r0, r0, r2, asr r0
 8dc:	40080e41 	andmi	r0, r8, r1, asr #28
 8e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8e4:	100e4101 	andne	r4, lr, r1, lsl #2
 8e8:	00070d41 	andeq	r0, r7, r1, asr #26
 8ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f0:	00000858 	andeq	r0, r0, r8, asr r8
 8f4:	200015ea 	andcs	r1, r0, sl, ror #11
 8f8:	00000072 	andeq	r0, r0, r2, ror r0
 8fc:	40080e41 	andmi	r0, r8, r1, asr #28
 900:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 904:	100e4101 	andne	r4, lr, r1, lsl #2
 908:	00070d41 	andeq	r0, r7, r1, asr #26
 90c:	0000001c 	andeq	r0, r0, ip, lsl r0
 910:	00000858 	andeq	r0, r0, r8, asr r8
 914:	2000165c 	andcs	r1, r0, ip, asr r6
 918:	00000040 	andeq	r0, r0, r0, asr #32
 91c:	40080e41 	andmi	r0, r8, r1, asr #28
 920:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 924:	100e4101 	andne	r4, lr, r1, lsl #2
 928:	00070d41 	andeq	r0, r7, r1, asr #26
 92c:	0000001c 	andeq	r0, r0, ip, lsl r0
 930:	00000858 	andeq	r0, r0, r8, asr r8
 934:	2000169c 	mulcs	r0, ip, r6
 938:	000000c8 	andeq	r0, r0, r8, asr #1
 93c:	40080e41 	andmi	r0, r8, r1, asr #28
 940:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 944:	100e4101 	andne	r4, lr, r1, lsl #2
 948:	00070d41 	andeq	r0, r7, r1, asr #26
 94c:	00000020 	andeq	r0, r0, r0, lsr #32
 950:	00000858 	andeq	r0, r0, r8, asr r8
 954:	20001764 	andcs	r1, r0, r4, ror #14
 958:	000001e2 	andeq	r0, r0, r2, ror #3
 95c:	400c0e41 	andmi	r0, ip, r1, asr #28
 960:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 964:	018e4002 	orreq	r4, lr, r2
 968:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 96c:	0000070d 	andeq	r0, r0, sp, lsl #14
 970:	0000001c 	andeq	r0, r0, ip, lsl r0
 974:	00000858 	andeq	r0, r0, r8, asr r8
 978:	20001946 	andcs	r1, r0, r6, asr #18
 97c:	000000d6 	ldrdeq	r0, [r0], -r6
 980:	40080e41 	andmi	r0, r8, r1, asr #28
 984:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 988:	180e4101 	stmdane	lr, {r0, r8, lr}
 98c:	00070d41 	andeq	r0, r7, r1, asr #26
 990:	0000001c 	andeq	r0, r0, ip, lsl r0
 994:	00000858 	andeq	r0, r0, r8, asr r8
 998:	20001a1c 	andcs	r1, r0, ip, lsl sl
 99c:	00000056 	andeq	r0, r0, r6, asr r0
 9a0:	40080e41 	andmi	r0, r8, r1, asr #28
 9a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9a8:	100e4101 	andne	r4, lr, r1, lsl #2
 9ac:	00070d41 	andeq	r0, r7, r1, asr #26
 9b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b4:	00000858 	andeq	r0, r0, r8, asr r8
 9b8:	20001a72 	andcs	r1, r0, r2, ror sl
 9bc:	000001aa 	andeq	r0, r0, sl, lsr #3
 9c0:	40080e41 	andmi	r0, r8, r1, asr #28
 9c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 9cc:	00070d41 	andeq	r0, r7, r1, asr #26
 9d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d4:	00000858 	andeq	r0, r0, r8, asr r8
 9d8:	20001c1c 	andcs	r1, r0, ip, lsl ip
 9dc:	00000038 	andeq	r0, r0, r8, lsr r0
 9e0:	40080e41 	andmi	r0, r8, r1, asr #28
 9e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 9e8:	100e4101 	andne	r4, lr, r1, lsl #2
 9ec:	00070d41 	andeq	r0, r7, r1, asr #26
 9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f4:	00000858 	andeq	r0, r0, r8, asr r8
 9f8:	20001c54 	andcs	r1, r0, r4, asr ip
 9fc:	00000060 	andeq	r0, r0, r0, rrx
 a00:	40080e41 	andmi	r0, r8, r1, asr #28
 a04:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a08:	180e4101 	stmdane	lr, {r0, r8, lr}
 a0c:	00070d41 	andeq	r0, r7, r1, asr #26
 a10:	0000001c 	andeq	r0, r0, ip, lsl r0
 a14:	00000858 	andeq	r0, r0, r8, asr r8
 a18:	20001cb4 			; <UNDEFINED> instruction: 0x20001cb4
 a1c:	00000124 	andeq	r0, r0, r4, lsr #2
 a20:	40080e41 	andmi	r0, r8, r1, asr #28
 a24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a28:	180e4101 	stmdane	lr, {r0, r8, lr}
 a2c:	00070d41 	andeq	r0, r7, r1, asr #26
 a30:	0000001c 	andeq	r0, r0, ip, lsl r0
 a34:	00000858 	andeq	r0, r0, r8, asr r8
 a38:	20001dd8 	ldrdcs	r1, [r0], -r8
 a3c:	00000042 	andeq	r0, r0, r2, asr #32
 a40:	40080e41 	andmi	r0, r8, r1, asr #28
 a44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a48:	180e4101 	stmdane	lr, {r0, r8, lr}
 a4c:	00070d41 	andeq	r0, r7, r1, asr #26
 a50:	0000001c 	andeq	r0, r0, ip, lsl r0
 a54:	00000858 	andeq	r0, r0, r8, asr r8
 a58:	20001e1a 	andcs	r1, r0, sl, lsl lr
 a5c:	00000062 	andeq	r0, r0, r2, rrx
 a60:	40080e41 	andmi	r0, r8, r1, asr #28
 a64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a68:	180e4101 	stmdane	lr, {r0, r8, lr}
 a6c:	00070d41 	andeq	r0, r7, r1, asr #26
 a70:	0000001c 	andeq	r0, r0, ip, lsl r0
 a74:	00000858 	andeq	r0, r0, r8, asr r8
 a78:	20001e7c 	andcs	r1, r0, ip, ror lr
 a7c:	0000002e 	andeq	r0, r0, lr, lsr #32
 a80:	40080e41 	andmi	r0, r8, r1, asr #28
 a84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 a88:	180e4101 	stmdane	lr, {r0, r8, lr}
 a8c:	00070d41 	andeq	r0, r7, r1, asr #26
 a90:	0000001c 	andeq	r0, r0, ip, lsl r0
 a94:	00000858 	andeq	r0, r0, r8, asr r8
 a98:	20001eaa 	andcs	r1, r0, sl, lsr #29
 a9c:	00000026 	andeq	r0, r0, r6, lsr #32
 aa0:	40080e41 	andmi	r0, r8, r1, asr #28
 aa4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 aa8:	180e4101 	stmdane	lr, {r0, r8, lr}
 aac:	00070d41 	andeq	r0, r7, r1, asr #26
 ab0:	0000001c 	andeq	r0, r0, ip, lsl r0
 ab4:	00000858 	andeq	r0, r0, r8, asr r8
 ab8:	20001ed0 	ldrdcs	r1, [r0], -r0
 abc:	00000026 	andeq	r0, r0, r6, lsr #32
 ac0:	40080e41 	andmi	r0, r8, r1, asr #28
 ac4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ac8:	180e4101 	stmdane	lr, {r0, r8, lr}
 acc:	00070d41 	andeq	r0, r7, r1, asr #26
 ad0:	0000001c 	andeq	r0, r0, ip, lsl r0
 ad4:	00000858 	andeq	r0, r0, r8, asr r8
 ad8:	20001ef6 	strdcs	r1, [r0], -r6
 adc:	0000003a 	andeq	r0, r0, sl, lsr r0
 ae0:	40080e41 	andmi	r0, r8, r1, asr #28
 ae4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ae8:	180e4101 	stmdane	lr, {r0, r8, lr}
 aec:	00070d41 	andeq	r0, r7, r1, asr #26
 af0:	0000001c 	andeq	r0, r0, ip, lsl r0
 af4:	00000858 	andeq	r0, r0, r8, asr r8
 af8:	20001f30 	andcs	r1, r0, r0, lsr pc
 afc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 b00:	40080e41 	andmi	r0, r8, r1, asr #28
 b04:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b08:	180e4101 	stmdane	lr, {r0, r8, lr}
 b0c:	00070d41 	andeq	r0, r7, r1, asr #26
 b10:	0000001c 	andeq	r0, r0, ip, lsl r0
 b14:	00000858 	andeq	r0, r0, r8, asr r8
 b18:	20002020 	andcs	r2, r0, r0, lsr #32
 b1c:	00000070 	andeq	r0, r0, r0, ror r0
 b20:	40080e41 	andmi	r0, r8, r1, asr #28
 b24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b28:	180e4101 	stmdane	lr, {r0, r8, lr}
 b2c:	00070d41 	andeq	r0, r7, r1, asr #26
 b30:	00000020 	andeq	r0, r0, r0, lsr #32
 b34:	00000858 	andeq	r0, r0, r8, asr r8
 b38:	20002090 	mulcs	r0, r0, r0
 b3c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 b40:	400c0e41 	andmi	r0, ip, r1, asr #28
 b44:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 b48:	018e4002 	orreq	r4, lr, r2
 b4c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 b50:	0000070d 	andeq	r0, r0, sp, lsl #14
 b54:	0000001c 	andeq	r0, r0, ip, lsl r0
 b58:	00000858 	andeq	r0, r0, r8, asr r8
 b5c:	20002280 	andcs	r2, r0, r0, lsl #5
 b60:	000000ec 	andeq	r0, r0, ip, ror #1
 b64:	40080e41 	andmi	r0, r8, r1, asr #28
 b68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b6c:	100e4101 	andne	r4, lr, r1, lsl #2
 b70:	00070d41 	andeq	r0, r7, r1, asr #26
 b74:	0000001c 	andeq	r0, r0, ip, lsl r0
 b78:	00000858 	andeq	r0, r0, r8, asr r8
 b7c:	2000236c 	andcs	r2, r0, ip, ror #6
 b80:	0000003a 	andeq	r0, r0, sl, lsr r0
 b84:	40080e41 	andmi	r0, r8, r1, asr #28
 b88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 b8c:	180e4101 	stmdane	lr, {r0, r8, lr}
 b90:	00070d41 	andeq	r0, r7, r1, asr #26
 b94:	0000000c 	andeq	r0, r0, ip
 b98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b9c:	7c020001 	stcvc	0, cr0, [r2], {1}
 ba0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 ba4:	0000001c 	andeq	r0, r0, ip, lsl r0
 ba8:	00000b94 	muleq	r0, r4, fp
 bac:	200023a8 	andcs	r2, r0, r8, lsr #7
 bb0:	00000038 	andeq	r0, r0, r8, lsr r0
 bb4:	40080e41 	andmi	r0, r8, r1, asr #28
 bb8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bbc:	100e4101 	andne	r4, lr, r1, lsl #2
 bc0:	00070d41 	andeq	r0, r7, r1, asr #26
 bc4:	0000001c 	andeq	r0, r0, ip, lsl r0
 bc8:	00000b94 	muleq	r0, r4, fp
 bcc:	200023e0 	andcs	r2, r0, r0, ror #7
 bd0:	00000060 	andeq	r0, r0, r0, rrx
 bd4:	40080e41 	andmi	r0, r8, r1, asr #28
 bd8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 bdc:	100e4101 	andne	r4, lr, r1, lsl #2
 be0:	00070d41 	andeq	r0, r7, r1, asr #26
 be4:	00000020 	andeq	r0, r0, r0, lsr #32
 be8:	00000b94 	muleq	r0, r4, fp
 bec:	20002440 	andcs	r2, r0, r0, asr #8
 bf0:	000001f4 	strdeq	r0, [r0], -r4
 bf4:	400c0e41 	andmi	r0, ip, r1, asr #28
 bf8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 bfc:	018e4002 	orreq	r4, lr, r2
 c00:	41400e41 	cmpmi	r0, r1, asr #28
 c04:	0000070d 	andeq	r0, r0, sp, lsl #14
 c08:	00000020 	andeq	r0, r0, r0, lsr #32
 c0c:	00000b94 	muleq	r0, r4, fp
 c10:	20002634 	andcs	r2, r0, r4, lsr r6
 c14:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 c18:	400c0e41 	andmi	r0, ip, r1, asr #28
 c1c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 c20:	018e4002 	orreq	r4, lr, r2
 c24:	41300e41 	teqmi	r0, r1, asr #28
 c28:	0000070d 	andeq	r0, r0, sp, lsl #14
 c2c:	00000024 	andeq	r0, r0, r4, lsr #32
 c30:	00000b94 	muleq	r0, r4, fp
 c34:	200026e4 	andcs	r2, r0, r4, ror #13
 c38:	000000c4 	andeq	r0, r0, r4, asr #1
 c3c:	40100e41 	andsmi	r0, r0, r1, asr #28
 c40:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 c44:	02874003 	addeq	r4, r7, #3
 c48:	41018e40 	tstmi	r1, r0, asr #28
 c4c:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 c50:	00000007 	andeq	r0, r0, r7
 c54:	0000001c 	andeq	r0, r0, ip, lsl r0
 c58:	00000b94 	muleq	r0, r4, fp
 c5c:	200027a8 	andcs	r2, r0, r8, lsr #15
 c60:	00000040 	andeq	r0, r0, r0, asr #32
 c64:	40080e41 	andmi	r0, r8, r1, asr #28
 c68:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c6c:	100e4101 	andne	r4, lr, r1, lsl #2
 c70:	00070d41 	andeq	r0, r7, r1, asr #26
 c74:	00000018 	andeq	r0, r0, r8, lsl r0
 c78:	00000b94 	muleq	r0, r4, fp
 c7c:	200027e8 	andcs	r2, r0, r8, ror #15
 c80:	00000028 	andeq	r0, r0, r8, lsr #32
 c84:	40080e41 	andmi	r0, r8, r1, asr #28
 c88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 c8c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 c90:	00000018 	andeq	r0, r0, r8, lsl r0
 c94:	00000b94 	muleq	r0, r4, fp
 c98:	20002810 	andcs	r2, r0, r0, lsl r8
 c9c:	00000028 	andeq	r0, r0, r8, lsr #32
 ca0:	40080e41 	andmi	r0, r8, r1, asr #28
 ca4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ca8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 cac:	0000001c 	andeq	r0, r0, ip, lsl r0
 cb0:	00000b94 	muleq	r0, r4, fp
 cb4:	20002838 	andcs	r2, r0, r8, lsr r8
 cb8:	00000028 	andeq	r0, r0, r8, lsr #32
 cbc:	40080e41 	andmi	r0, r8, r1, asr #28
 cc0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 cc4:	100e4101 	andne	r4, lr, r1, lsl #2
 cc8:	00070d41 	andeq	r0, r7, r1, asr #26
 ccc:	0000001c 	andeq	r0, r0, ip, lsl r0
 cd0:	00000b94 	muleq	r0, r4, fp
 cd4:	20002860 	andcs	r2, r0, r0, ror #16
 cd8:	0000001e 	andeq	r0, r0, lr, lsl r0
 cdc:	40080e41 	andmi	r0, r8, r1, asr #28
 ce0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ce4:	100e4101 	andne	r4, lr, r1, lsl #2
 ce8:	00070d41 	andeq	r0, r7, r1, asr #26
 cec:	0000000c 	andeq	r0, r0, ip
 cf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 cf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 cf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 cfc:	0000001c 	andeq	r0, r0, ip, lsl r0
 d00:	00000cec 	andeq	r0, r0, ip, ror #25
 d04:	20002880 	andcs	r2, r0, r0, lsl #17
 d08:	00000040 	andeq	r0, r0, r0, asr #32
 d0c:	40080e41 	andmi	r0, r8, r1, asr #28
 d10:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d14:	180e4101 	stmdane	lr, {r0, r8, lr}
 d18:	00070d41 	andeq	r0, r7, r1, asr #26
 d1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 d20:	00000cec 	andeq	r0, r0, ip, ror #25
 d24:	200028c0 	andcs	r2, r0, r0, asr #17
 d28:	000000e0 	andeq	r0, r0, r0, ror #1
 d2c:	40080e41 	andmi	r0, r8, r1, asr #28
 d30:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 d34:	180e4101 	stmdane	lr, {r0, r8, lr}
 d38:	00070d41 	andeq	r0, r7, r1, asr #26
 d3c:	0000000c 	andeq	r0, r0, ip
 d40:	00000cec 	andeq	r0, r0, ip, ror #25
 d44:	20000000 	andcs	r0, r0, r0
 d48:	0000000c 	andeq	r0, r0, ip
 d4c:	0000000c 	andeq	r0, r0, ip
 d50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 d54:	7c010001 	stcvc	0, cr0, [r1], {1}
 d58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 d5c:	0000000c 	andeq	r0, r0, ip
 d60:	00000d4c 	andeq	r0, r0, ip, asr #26
 d64:	200029a1 	andcs	r2, r0, r1, lsr #19
 d68:	0000010a 	andeq	r0, r0, sl, lsl #2

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20002880 	andcs	r2, r0, r0, lsl #17
   4:	200029a0 	andcs	r2, r0, r0, lsr #19
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
